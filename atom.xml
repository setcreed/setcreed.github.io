<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伊甸园</title>
  
  
  <link href="https://setcreed.github.io/atom.xml" rel="self"/>
  
  <link href="https://setcreed.github.io/"/>
  <updated>2024-03-04T14:47:21.722Z</updated>
  <id>https://setcreed.github.io/</id>
  
  <author>
    <name>SetCreed</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kube-apiserver更改鉴权方式</title>
    <link href="https://setcreed.github.io/posts/4f91bd66/"/>
    <id>https://setcreed.github.io/posts/4f91bd66/</id>
    <published>2024-02-27T14:17:38.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不使用RBAC的鉴权方式"><a href="#不使用RBAC的鉴权方式" class="headerlink" title="不使用RBAC的鉴权方式"></a>不使用RBAC的鉴权方式</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>参考文档：<a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/authorization/">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/authorization/</a></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202402272220360.png" alt=""></p><p>根据文档，我们可以使用<code>Webhook</code>模式 实现自己的鉴权逻辑</p><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/webhook/">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/webhook/</a></p><h2 id="实现自己的授权逻辑"><a href="#实现自己的授权逻辑" class="headerlink" title="实现自己的授权逻辑"></a>实现自己的授权逻辑</h2><p>根据文档，<code>Webhook</code> 模式需要一个 HTTP 配置文件，通过 <code>--authorization-webhook-config-file=SOME_FILENAME</code> 的参数声明。</p><p>webhook的配置文件是kubeconfig格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">insecure-skip-tls-verify:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 远程服务的查询 URL。必须使用 &#x27;https&#x27;。</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">https://localhost:9090/authorize</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-user</span></span><br><span class="line"></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">webhook</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">webhook</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">webhook-user</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webhook</span></span><br></pre></td></tr></table></figure><p>启动apiserver的脚本需要修改，将授权模式改为webhook</p><p>新加的配置：</p><ul><li>—authentication-token-webhook-config-file</li><li>—runtime-config=authorization.k8s.io/v1beta1=true</li><li>将—authorization-mode 改为Webhook模式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">go run -mod=mod cmd/kube-apiserver/apiserver.go \</span><br><span class="line">--etcd-servers=http://127.0.0.1:2379 \</span><br><span class="line">--service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">--authorization-mode=Node,Webhook \</span><br><span class="line">--authorization-webhook-config-file=./001/webhook/config \</span><br><span class="line">--runtime-config=authorization.k8s.io/v1beta1=<span class="literal">true</span> \</span><br><span class="line">--service-account-key-file=./certs/sa.pub \</span><br><span class="line">--service-account-signing-key-file=./certs/sa.key \</span><br><span class="line">--tls-cert-file=./certs/apiserver.crt \</span><br><span class="line">--tls-private-key-file=./certs/apiserver.key \</span><br><span class="line">--feature-gates=EphemeralContainers=<span class="literal">true</span> \</span><br><span class="line">--service-cluster-ip-range=10.96.0.0/22</span><br></pre></td></tr></table></figure><p>webhook服务的证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line"></span><br><span class="line">openssl req -new -key server.key -out certFile.csr</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> certFile.csr -signkey server.key -out server.pem</span><br></pre></td></tr></table></figure><p>authorize代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">AccessApiVersion = <span class="string">&quot;authorization.k8s.io/v1beta1&quot;</span></span><br><span class="line">AccessKind       = <span class="string">&quot;SubjectAccessReview&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authorizeRsp</span><span class="params">(allowed <span class="type">bool</span>, reason <span class="type">string</span>)</span></span> *unstructured.Unstructured &#123;</span><br><span class="line">obj := &amp;unstructured.Unstructured&#123;&#125;</span><br><span class="line">obj.SetAPIVersion(AccessApiVersion)</span><br><span class="line">obj.SetKind(AccessKind)</span><br><span class="line">obj.Object[<span class="string">&quot;status&quot;</span>] = <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;allowed&quot;</span>: allowed,</span><br><span class="line"><span class="string">&quot;reason&quot;</span>:  reason,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.New()</span><br><span class="line">r.POST(<span class="string">&quot;/authorize&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">b, err := io.ReadAll(c.Request.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.AbortWithStatusJSON(<span class="number">400</span>, authorizeRsp(<span class="literal">false</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">obj := &amp;unstructured.Unstructured&#123;&#125;</span><br><span class="line">err = json.Unmarshal(b, obj)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.AbortWithStatusJSON(<span class="number">400</span>, authorizeRsp(<span class="literal">false</span>, err.Error()))</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">c.AbortWithStatusJSON(<span class="number">200</span>, authorizeRsp(<span class="literal">true</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">r.RunTLS(<span class="string">&quot;:9090&quot;</span>, <span class="string">&quot;./webhook/certs/server.pem&quot;</span>, <span class="string">&quot;./webhook/certs/server.key&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所有成功的请求全都放行</p><p>启动</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202402280041486.png" alt=""></p><h1 id="使用client-go请求本地apiserver"><a href="#使用client-go请求本地apiserver" class="headerlink" title="使用client-go请求本地apiserver"></a>使用client-go请求本地apiserver</h1><p>上面的操作已经在本地启动了一个apiserver、etcd，使用自己的鉴权（所有请求放行）</p><p>现在我想知道 使用 client-go客户端 访问本地的apiserver是个什么效果</p><p>K8sClient.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;k8s.io/client-go/kubernetes&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/client-go/rest&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">K8sClient</span><span class="params">()</span></span> *kubernetes.Clientset &#123;</span><br><span class="line">config := &amp;rest.Config&#123;</span><br><span class="line">Host: <span class="string">&quot;https://127.0.0.1:6443&quot;</span>,  <span class="comment">// 只需要这个host即可</span></span><br><span class="line">&#125;</span><br><span class="line">config.Insecure = <span class="literal">true</span></span><br><span class="line">clientset, err := kubernetes.NewForConfig(config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> clientset</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">metav1 <span class="string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/kubernetes/001/config&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">clientset := config.K8sClient()</span><br><span class="line"></span><br><span class="line"><span class="comment">// List all pods in the &quot;default&quot; namespace</span></span><br><span class="line">list, err := clientset.CoreV1().Pods(<span class="string">&quot;default&quot;</span>).List(context.Background(), metav1.ListOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> list.Items &#123;</span><br><span class="line">fmt.Println(d.Name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>没啥问题</p><p>现在我想创建一个pod，看看啥效果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">corev1 <span class="string">&quot;k8s.io/api/core/v1&quot;</span></span><br><span class="line">metav1 <span class="string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/kubernetes/001/config&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">clientset := config.K8sClient()</span><br><span class="line"></span><br><span class="line"><span class="comment">// create nginx pod</span></span><br><span class="line">ngxPod := &amp;corev1.Pod&#123;&#125;</span><br><span class="line">ngxPod.Name = <span class="string">&quot;nginx&quot;</span></span><br><span class="line">ngxPod.Namespace = <span class="string">&quot;default&quot;</span></span><br><span class="line">ngxPod.Spec.Containers = []corev1.Container&#123;</span><br><span class="line">&#123;Name: <span class="string">&quot;nginx&quot;</span>, Image: <span class="string">&quot;nginx:latest&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">_, err := clientset.CoreV1().Pods(<span class="string">&quot;default&quot;</span>).Create(context.Background(), ngxPod, metav1.CreateOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果报错：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202403042155375.png" alt=""></p><p>这个default账号作用：</p><ul><li>当在 Kubernetes 中创建一个 Pod 时，如果没有指定其他服务账户，<code>default</code> 服务账户的凭据会自动被挂载到该 Pod 中</li><li>具有访问该namespace内的大多数资源的权限</li></ul><p>这个default是由 controller-manager创建的</p><p>代码位置：pkg/controller/serviceaccount/serviceaccounts_controller.go:185</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202403042204701.png" alt=""></p><p>手动创建default sa</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202403042207936.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;不使用RBAC的鉴权方式&quot;&gt;&lt;a href=&quot;#不使用RBAC的鉴权方式&quot; class=&quot;headerlink&quot; title=&quot;不使用RBAC的鉴权方式&quot;&gt;&lt;/a&gt;不使用RBAC的鉴权方式&lt;/h1&gt;&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; cla</summary>
      
    
    
    
    <category term="k8s" scheme="https://setcreed.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://setcreed.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>kube-apiserver本地启动</title>
    <link href="https://setcreed.github.io/posts/fec34943/"/>
    <id>https://setcreed.github.io/posts/fec34943/</id>
    <published>2024-02-27T12:44:47.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>下载kubernetes 1.24.15版本源码</li><li>etcd-v3.5.12 本机单机启动</li><li>apiserver启动入口：cmd/kube-apiserver/apiserver.go</li><li>k8s集群 apiserver配置文件：/etc/kubernetes/manifests/kube-apiserver.yaml</li></ul><h2 id="本地启动apiserver"><a href="#本地启动apiserver" class="headerlink" title="本地启动apiserver"></a>本地启动apiserver</h2><p>参考 文档：<a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/">https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/</a></p><p>启动apiserver的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">go run -mod=mod cmd/kube-apiserver/apiserver.go \</span><br><span class="line">--etcd-servers=http://127.0.0.1:2379 \</span><br><span class="line">--service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">--authorization-mode=Node,RBAC \</span><br><span class="line">--service-account-key-file=./certs/sa.pub \</span><br><span class="line">--service-account-signing-key-file=./certs/sa.key \</span><br><span class="line">--tls-cert-file=./certs/apiserver.crt \</span><br><span class="line">--tls-private-key-file=./certs/apiserver.key \</span><br><span class="line">--feature-gates=EphemeralContainers=<span class="literal">true</span> \</span><br><span class="line">--service-cluster-ip-range=10.96.0.0/22</span><br></pre></td></tr></table></figure><p>Kubernetes的<code>service-account-key-file</code>是一个重要的配置，用于签署Service Account令牌。这个文件包含的是私钥，Kubernetes API服务器使用它来签署生成的Service Account令牌。这些令牌再被用于Kubernetes集群内部的服务认证。</p><p>密钥生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out sa.key 2048</span><br><span class="line">openssl rsa -<span class="keyword">in</span> sa.key -pubout &gt; sa.pub</span><br></pre></td></tr></table></figure><p>在Kubernetes环境中，<code>tls-cert-file</code>和<code>tls-private-key-file</code>是用于API服务器的TLS加密通信的证书文件和私钥文件。这些文件确保了Kubernetes API的安全通信。生成这些文件通常涉及到创建一个自签名的证书或者使用一个已经存在的证书颁发机构(CA)签发的证书。</p><p>生成证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">openssl genrsa -out apiserver.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成证书请求CSR</span></span><br><span class="line">openssl req -new -key apiserver.key -out apiserver.csr -subj <span class="string">&quot;/CN=kubernetes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自签名证书</span></span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> apiserver.csr -signkey apiserver.key -out apiserver.crt -days 365</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接启动apiserver的脚本，如果有报错需要解决错误，没有报错，直接访问：<a href="https://localhost:6443">https://localhost:6443</a></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202402272156046.png" alt=""></p><p>这样 算是启动成功了</p><p>本地etcd启动没有加证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apiserver启动之后 查看本地etcd的key </span></span><br><span class="line">etcdctl get <span class="string">&quot;&quot;</span> --prefix --keys-only</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202402272207519.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下载kubernetes 1.24.15版本源码&lt;/li&gt;
&lt;li&gt;etcd-v3.5.12 本机单机启动&lt;/l</summary>
      
    
    
    
    <category term="k8s" scheme="https://setcreed.github.io/categories/k8s/"/>
    
    
    <category term="k8s" scheme="https://setcreed.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes组件之apiserver</title>
    <link href="https://setcreed.github.io/posts/7b5f308e/"/>
    <id>https://setcreed.github.io/posts/7b5f308e/</id>
    <published>2024-02-27T12:36:09.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<p>kube-apiserver源码学习</p><p>目的：</p><ul><li>了解kube-apiserver基本架构、原理</li><li>怎么修改代码，加入自己的逻辑</li><li>去掉不需要的东西。。。</li></ul><p>目录：</p><ul><li><a href="https://setcreed.github.io/posts/fec34943">kube-apiserver在本地启动</a></li><li><a href="https://setcreed.github.io/posts/4f91bd66">kube-apiserver更改鉴权方式</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;kube-apiserver源码学习&lt;/p&gt;
&lt;p&gt;目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解kube-apiserver基本架构、原理&lt;/li&gt;
&lt;li&gt;怎么修改代码，加入自己的逻辑&lt;/li&gt;
&lt;li&gt;去掉不需要的东西。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录：&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>云原生软件开发模式</title>
    <link href="https://setcreed.github.io/posts/d99f2ea2/"/>
    <id>https://setcreed.github.io/posts/d99f2ea2/</id>
    <published>2023-11-25T14:31:18.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="云原生环境下软件开发模式的转变"><a href="#云原生环境下软件开发模式的转变" class="headerlink" title="云原生环境下软件开发模式的转变"></a>云原生环境下软件开发模式的转变</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>现在云原生时代，软件开发模式有了一些改变。原本软件开发过程中，本地开发、本地调试都不是很复杂，开发完就往服务器上一丢，或者跑CI/CD，部署流程自动化，也不会耗费很长时间，调试的话也能在本地调试好，中间的loop时间不会很长。但是云原生时代，各种软件架构都变得复杂了，各种微服务架构，很多都是部署到k8s中，调试也比较麻烦。如果修改了一段代码，提交到git仓库，触发CI/CD流程，最终部署到k8s中，中间的过程还是需要等待的，并不是立即就能看到效果。 其实也就是分为 inner loop、outloop两部分，其实开发时间中很大一部分时间就被浪费掉了。</p><p>参考一下两篇文章：</p><ul><li><a href="http://jorgemoral.es/posts/2020_03_17-develop_apps_in_k8s_and_not_die_trying-inner_loop_outer_loop/">http://jorgemoral.es/posts/2020_03_17-develop_apps_in_k8s_and_not_die_trying-inner_loop_outer_loop/</a></li><li><a href="https://thenewstack.io/kubernetes-infrastructure-know-the-inner-dev-loop/">https://thenewstack.io/kubernetes-infrastructure-know-the-inner-dev-loop/</a></li></ul><p>其实也有一些工具来改善这些情况，下面就来介绍几款这样的工具</p><h2 id="skaffold"><a href="#skaffold" class="headerlink" title="skaffold"></a>skaffold</h2><p>Skaffold是由Google发布的命令行工具，专注于促进K8S应用的持续deployment。自动化building和deploying到k8s集群的任务，可以让开发者专注于编写代码。</p><ul><li><p><a href="https://github.com/GoogleContainerTools/skaffold">https://github.com/GoogleContainerTools/skaffold</a></p></li><li><p><a href="https://skaffold.dev/docs">https://skaffold.dev/docs</a></p></li></ul><p>下面就举个例子来试一下：</p><p>go的一个工程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── Dockerfile</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">├── manifests</span><br><span class="line">│   ├── gin.deploy.yaml</span><br><span class="line">│   └── gin.svc.yaml</span><br><span class="line">└── skaffold.yaml</span><br></pre></td></tr></table></figure><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>) <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>skaffold.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">skaffold/v4beta8</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">manifests:</span></span><br><span class="line">  <span class="attr">rawYaml:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">manifests/*.yaml</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">push:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">gin-server-demo</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">docker:</span></span><br><span class="line">        <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gin.deploy.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gin-server-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">gin-server-demo</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">gin-server-demo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">gin-server-demo</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">regcred</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gin.svc.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gin-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">gin-server-demo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.21</span>-alpine AS builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE=on GOPROXY=https://goproxy.cn,direct</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> go.mod .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> go.sum .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go mod download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> *.go .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o server -a -installsuffix cgo .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/server /server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/server&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312021055489.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312021056307.png" alt=""></p><p>就会在指定的k8s集群中部署服务：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312021955398.png" alt=""></p><p>同时给你在本地映射端口: <a href="http://127.0.0.1:4503">http://127.0.0.1:4503</a></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312021957806.png" alt=""></p><p>此时你修改代码，再次点击 触发编译</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312022130276.png" alt=""></p><p>访问原来接口，就发现已经更改了</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312022130453.png" alt=""></p><p>看来 Skaffold 就是在本地构建，虽然说节省了一点时间。</p><h2 id="telepresence"><a href="#telepresence" class="headerlink" title="telepresence"></a>telepresence</h2><p><strong>Telepresence是一款为Kubernetes微服务框架提供快速本地化开发功能的开源软件</strong>。Telepresence在Kubernetes集群中运行的Pod中部署双向网络代理，该Pod将Kubernetes环境（如TCP连接，环境变量，卷）中的数据代理到本地进程。本地进程透明地覆盖其网络，以便DNS调用和TCP连接通过代理路由到远程Kubernetes集群，能够获取远端K8S集群的各项资源。</p><p><a href="https://www.telepresence.io/">https://www.telepresence.io/</a></p><p>还是简单使用一下</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312042236739.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312042239472.png" alt=""></p><p>发现gin-server-demo这个deployment 被注入了一个container，查看一下：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312032116579.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312042240390.png" alt=""></p><p>此时已经不能访问了</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312042244974.png" alt=""></p><p>这时候你在本地跑这个应用，就会发现 访问远程服务器的流量已经被拦截在本地了，也就是说你本地起的服务，在远程也可访问到了，很容易做修改，不必等待ci过程了。仅仅受限于你本地编译的速度了。</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312042249184.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312042249016.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;云原生环境下软件开发模式的转变&quot;&gt;&lt;a href=&quot;#云原生环境下软件开发模式的转变&quot; class=&quot;headerlink&quot; title=&quot;云原生环境下软件开发模式的转变&quot;&gt;&lt;/a&gt;云原生环境下软件开发模式的转变&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="云原生" scheme="https://setcreed.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
    <category term="云原生" scheme="https://setcreed.github.io/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>容器共享进程命名空间的应用</title>
    <link href="https://setcreed.github.io/posts/b43710ac/"/>
    <id>https://setcreed.github.io/posts/b43710ac/</id>
    <published>2023-11-22T22:39:35.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>我们都知道一个pod里面可以放若干个容器，容器之间可以共享网络命名空间、文件夹。这时候一个pod里面有两个容器a和b，同时对外提供服务。如果这个两个服务之间需要彼此交互，比如a想要触发b容器的容器，或者b想要获取a容器里的一个变量之类的。我们这时候就可以使用容器共享命名空间的方法。</p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>先准备两个程序app1和app2</p><p>app1.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="type">byte</span>(<span class="string">&quot;this is app1\n&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app2.go</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, func(writer http.ResponseWriter, request *http.Request) &#123;</span><br><span class="line">writer.Write([]byte(<span class="string">&quot;this is app2\n&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8081&quot;</span>, nil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后分别编译丢到服务器上</p><p>编写对应的yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8splay</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">k8splay</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">k8splay</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeName:</span> <span class="string">k8s-node1</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">k8splayapp1</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">alpine:3.12</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">command:</span> [ <span class="string">&quot;./app1&quot;</span> ]</span><br><span class="line">          <span class="attr">workingDir:</span> <span class="string">/app</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/app</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">k8splayapp2</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">alpine:3.12</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">command:</span> [ <span class="string">&quot;./app2&quot;</span> ]</span><br><span class="line">          <span class="attr">workingDir:</span> <span class="string">/app</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/app</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8081</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/root/k8splay</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后直接apply</p><p>进入这个容器查看</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311252143889.png" alt=""></p><p>可以看到 pid为1的进程为 <code>./app1</code>，这也没啥好说的</p><p>这时候在yaml中加入 <code>shareProcessNamespace: true</code>，打开共享进程命名空间开关。</p><p>此时进入pod查看进程</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311252149356.png" alt=""></p><p>现在任意一个容器查看 pid为1的进程就不是自己了，而且可以查看到其他容器的进程了。这就是进程命名空间共享。</p><p>现在在app1这个容器写入一个文件，在app2容器利用共享进程命名空间可以查看到了，而不需要设置emptydir</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311252158475.png" alt=""></p><p>总结一下：</p><ul><li>当启用进程命名空间共享时，容器中的进程对该pod中所有其他容器都可见</li><li>容器进程PID不再是1</li><li>容器文件系统 通过 <code>/proc/$pid/root</code> 链接对pod中的其他容器可见</li></ul><h1 id="使用信号通知进程"><a href="#使用信号通知进程" class="headerlink" title="使用信号通知进程"></a>使用信号通知进程</h1><h2 id="使用命令行操作"><a href="#使用命令行操作" class="headerlink" title="使用命令行操作"></a>使用命令行操作</h2><p>使用脚本方式发送信号通知容器1，不通知容器2</p><p>重新修改app1.go代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="type">byte</span>(<span class="string">&quot;this is app1\n&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(ch, syscall.SIGTERM, syscall.SIGUSR1) <span class="comment">// 监听 kill -15 和 kill -10 (用户自定义信号)</span></span><br><span class="line">c := &lt;-ch</span><br><span class="line">fmt.Println(<span class="string">&quot;接收到信号:&quot;</span>, c)</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">50</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新apply 一下</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311252214146.png" alt=""></p><h2 id="使用代码方式"><a href="#使用代码方式" class="headerlink" title="使用代码方式"></a>使用代码方式</h2><p>app1.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="type">byte</span>(<span class="string">&quot;this is app1\n&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/counter&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;counter: %d\n&quot;</span>, counter)))</span><br><span class="line">counter++</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(ch, syscall.SIGTERM, syscall.SIGUSR1) <span class="comment">// 监听 kill -15 和 kill -10 (用户自定义信号)</span></span><br><span class="line">c := &lt;-ch</span><br><span class="line"><span class="keyword">switch</span> c &#123;</span><br><span class="line"><span class="keyword">case</span> syscall.SIGUSR1:</span><br><span class="line">fmt.Println(<span class="string">&quot;counter被重置&quot;</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">50</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每次访问/counter ，counter就会加1</p><p>app2.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="type">byte</span>(<span class="string">&quot;this is app2\n&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/rest&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">syscall.Kill(<span class="number">-1</span>, syscall.SIGUSR1)</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8081&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在app2中访问 /rest，就会发生信号给app1，从而触发counter=0的逻辑</p><p>Deploy.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8splay</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">k8splay</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">k8splay</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeName:</span> <span class="string">k8s-node1</span></span><br><span class="line">      <span class="attr">shareProcessNamespace:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">k8splayapp1</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">byrnedo/alpine-curl</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">command:</span> [ <span class="string">&quot;./app1&quot;</span> ]</span><br><span class="line">          <span class="attr">workingDir:</span> <span class="string">/app</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/app</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">k8splayapp2</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">byrnedo/alpine-curl</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">command:</span> [ <span class="string">&quot;./app2&quot;</span> ]</span><br><span class="line">          <span class="attr">workingDir:</span> <span class="string">/app</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/app</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8081</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">app</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/root/k8splay</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311252225789.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt;我们都知道一个pod里面可以放若干个容器，容器之间可以共享网络命名空间、文件夹。这时候一个pod里面有两个容器a和b，同时对</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用gopacket理解TCP三次握手</title>
    <link href="https://setcreed.github.io/posts/5faa7163/"/>
    <id>https://setcreed.github.io/posts/5faa7163/</id>
    <published>2023-11-18T03:39:38.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gopacket-抓包实战基础"><a href="#gopacket-抓包实战基础" class="headerlink" title="gopacket  抓包实战基础"></a>gopacket  抓包实战基础</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>库地址：<a href="https://gitHub.com/google/gopacket">https://gitHub.com/google/gopacket</a></p><p>几个耳熟能详的抓包工具：</p><ul><li>wireshark：依赖npcap</li><li>tcpdump：依赖libpcap</li></ul><p>gopacket 是libpcap 和npcap的go封装, 是一个基于go语言实现的网络数据包解析库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># win需要安装npcap: https://nmap.org/npcap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux:  </span></span><br><span class="line">yum install -y libpcap libpcap-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后 </span></span><br><span class="line">go get gitHub.com/google/gopacket</span><br></pre></td></tr></table></figure><h2 id="指定eth0网卡-抓包"><a href="#指定eth0网卡-抓包" class="headerlink" title="指定eth0网卡 抓包"></a>指定eth0网卡 抓包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket/pcap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取所有网络设备</span></span><br><span class="line"><span class="comment">//devs, err := pcap.FindAllDevs()</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//log.Fatalln(err)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//for _, dev := range devs &#123;</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;网卡: &quot;, dev.Name)</span></span><br><span class="line"><span class="comment">//fmt.Println(&quot;IP: &quot;, dev.Addresses)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">handler, err := pcap.OpenLive(<span class="string">&quot;eth0&quot;</span>, <span class="number">1024</span>, <span class="literal">false</span>, time.Second*<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> handler.Close()</span><br><span class="line"></span><br><span class="line">source := gopacket.NewPacketSource(handler, handler.LinkType())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> packet := <span class="keyword">range</span> source.Packets() &#123;</span><br><span class="line"><span class="comment">//fmt.Println(packet.String())</span></span><br><span class="line"><span class="comment">// 获取传输层数据</span></span><br><span class="line"><span class="keyword">if</span> tcpLayer := packet.TransportLayer(); tcpLayer != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(tcpLayer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行这个程序，大概会输出这样的数据：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311121527874.png" alt=""></p><h2 id="抓取指定http的包"><a href="#抓取指定http的包" class="headerlink" title="抓取指定http的包"></a>抓取指定http的包</h2><p>准备一个程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="type">byte</span>(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行这个程序</p><p>修改抓包的代码，获取tcp层的数据，并且只抓取8080端口的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket/layers&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket/pcap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取所有网络设备</span></span><br><span class="line"></span><br><span class="line">handler, err := pcap.OpenLive(<span class="string">&quot;eth0&quot;</span>, <span class="number">1024</span>, <span class="literal">false</span>, time.Second*<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> handler.Close()</span><br><span class="line"></span><br><span class="line">source := gopacket.NewPacketSource(handler, handler.LinkType())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> packet := <span class="keyword">range</span> source.Packets() &#123;</span><br><span class="line"><span class="comment">// 获取传输层数据</span></span><br><span class="line"><span class="keyword">if</span> layer4 := packet.TransportLayer(); layer4 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tcpLayer, ok := layer4.(*layers.TCP); ok &amp;&amp; tcpLayer.DstPort == <span class="number">8080</span> &#123;</span><br><span class="line">fmt.Println(<span class="type">string</span>(tcpLayer.Payload))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接执行</p><p>访问http程序，此时抓包数据如下：只抓取了请求的数据</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311121537344.png" alt=""></p><p>如果使用GET请求中 传输body数据，从下图中很清楚的知道，body信息是明文的</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311121544038.png" alt=""></p><h2 id="借助gopacket理解三次握手"><a href="#借助gopacket理解三次握手" class="headerlink" title="借助gopacket理解三次握手"></a>借助gopacket理解三次握手</h2><p>简单回顾一下tcp三次握手</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311121547348.png" alt=""></p><p>客户端在向服务端发送数据 建立连接之前，需要建立三次握手，客户端发送SYN包，服务端应答发送ACK包。</p><ul><li>在初始时，双端处于<code>CLOSE</code>状态，服务端为了提供服务，会主动监听某个端口，进入LISTEN状态</li><li>客户端主动发送连接的 <code>SYN</code> 包，之后进入 <code>SYN-SENT</code>状态，服务端在收到客户端发来的<code>SYN</code> 包后，回复 <code>SYN, ACK</code> 包，之后进入 <code>SYN-RCVD</code> 状态</li><li>客户端收到服务端发来的 <code>SYN, ACK</code>包之后，可以确认对方存在，此时回复 <code>ACK</code> 包，并进入 <code>ESTABLISHD</code>状态</li><li><p>服务端收到最后一个 <code>ACK</code>包后，也进入<code>ESTABLISHD</code> 状态</p><p>这其中可以使用gopacket进行抓包，看看究竟发生了什么。</p></li></ul><p>准备tcp程序</p><p>tcp服务端代码 tcpserver.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">l, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;0.0.0.0:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">conn, err := l.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Receive message %s -&gt; %s\n&quot;</span>, conn.RemoteAddr(), conn.LocalAddr())</span><br><span class="line"><span class="keyword">go</span> handler(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">num, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Receive data:%v\n&quot;</span>, <span class="type">string</span>(buf[:num]))</span><br><span class="line">num, err = conn.Write([]<span class="type">byte</span>(<span class="string">&quot;ok&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相应的客户端 tcpclient.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;147.112.58.137:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, err := conn.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抓包的程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket/layers&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket/pcap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取所有网络设备</span></span><br><span class="line"></span><br><span class="line">handler, err := pcap.OpenLive(<span class="string">&quot;eth0&quot;</span>, <span class="number">1024</span>, <span class="literal">false</span>, time.Second*<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> handler.Close()</span><br><span class="line"></span><br><span class="line">source := gopacket.NewPacketSource(handler, handler.LinkType())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> packet := <span class="keyword">range</span> source.Packets() &#123;</span><br><span class="line"><span class="comment">// 获取传输层数据</span></span><br><span class="line"><span class="keyword">if</span> layer4 := packet.TransportLayer(); layer4 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tcpLayer, ok := layer4.(*layers.TCP); ok &#123;</span><br><span class="line"><span class="keyword">if</span> tcpLayer.DstPort == <span class="number">8080</span> || tcpLayer.SrcPort == <span class="number">8080</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d--&gt;%d, SYN=%v, ACK=%v, payload length=%v\n&quot;</span>,</span><br><span class="line">tcpLayer.SrcPort, tcpLayer.DstPort, tcpLayer.SYN, tcpLayer.ACK, <span class="built_in">len</span>(tcpLayer.Payload))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依次启动服务端、抓包程序、客户端程序</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311121620735.png" alt=""></p><p>通过抓包，我们也得知 客户端向服务端发送SYN，没有ACK包，服务端接收到之后，发送ACK包，且发送自己的SYN包。</p><h2 id="三次握手-seq和ack的作用"><a href="#三次握手-seq和ack的作用" class="headerlink" title="三次握手 seq和ack的作用"></a>三次握手 seq和ack的作用</h2><p>seq和ack是啥（和SYN、ACK不是一回事）：</p><ul><li>序号（sequence number）：seq序号，标识从TCP源端口向目的端口发送的字节流，发起方发送数据时对次进行标记。</li><li>确认号（acknowledgement number）：ack序号，占32位，只有ACK标识位为1时，确认号字段才有效，ack=seq+1</li></ul><p>两者用于确认数据是否准确，是否能正常通信。</p><p>大概的过程：</p><ul><li>第一次握手：seq为x（x为任意值），无ack number</li><li>第二次握手：seq为y（y为任意值），ack number=接受包seq+1（即x+1）</li><li>第三次握手：seq等于上一个本机发送包seq+1（即x+1），ack number等于接受包seq+1（即y+1）</li></ul><p>修改抓包的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket/layers&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/gopacket/pcap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取所有网络设备</span></span><br><span class="line"></span><br><span class="line">handler, err := pcap.OpenLive(<span class="string">&quot;eth0&quot;</span>, <span class="number">1024</span>, <span class="literal">false</span>, time.Second*<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> handler.Close()</span><br><span class="line"></span><br><span class="line">source := gopacket.NewPacketSource(handler, handler.LinkType())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> packet := <span class="keyword">range</span> source.Packets() &#123;</span><br><span class="line"><span class="comment">// 获取传输层数据</span></span><br><span class="line"><span class="keyword">if</span> layer4 := packet.TransportLayer(); layer4 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> tcpLayer, ok := layer4.(*layers.TCP); ok &#123;</span><br><span class="line"><span class="keyword">if</span> tcpLayer.DstPort == <span class="number">8080</span> || tcpLayer.SrcPort == <span class="number">8080</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d--&gt;%d, SYN=%v, ACK=%v, payload length=%v, seq=%v, ackNum=%v\n&quot;</span>,</span><br><span class="line">tcpLayer.SrcPort, tcpLayer.DstPort, tcpLayer.SYN, tcpLayer.ACK,</span><br><span class="line"><span class="built_in">len</span>(tcpLayer.Payload),</span><br><span class="line">tcpLayer.Seq, tcpLayer.Ack,</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311122307465.png" alt=""></p><h2 id="SYN攻击原理、简单模拟"><a href="#SYN攻击原理、简单模拟" class="headerlink" title="SYN攻击原理、简单模拟"></a>SYN攻击原理、简单模拟</h2><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311122311125.png" alt=""></p><p>SYN攻击：</p><ul><li>攻击者发送大量的SYN包，源IP是伪造的，服务器回应（SYN+ACK）包，攻击者不回应ACK包</li><li>服务器不止带（SYN+ACK）是否发送成功，默认情况下5次 （tcp_syn_retries） cat /etc/sysctl.conf</li></ul><p>使用工具 hping3</p><ul><li>一款TCP/IP数据包编辑器/分析器，常用来做安全审计、防火墙测试等工作。支持TCP、UDP、ICMP和RAW-IP协议，具有跟踪路由模式，在覆盖通道之间发送文件的功能以及许多其他功能（如SYN攻击）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install hping3 -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">hping3 -I eth0 -c 1 -a 192.168.10.60 172.31.107.15 --syn -p 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># -I 网卡、-c 数据包  -a 地址， 加入--flood选项，会疯狂发</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hping3 -I eth0 -c 1 172.31.107.15 --syn -p 8080   <span class="comment"># 不模拟IP 使用真实的IP</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;gopacket-抓包实战基础&quot;&gt;&lt;a href=&quot;#gopacket-抓包实战基础&quot; class=&quot;headerlink&quot; title=&quot;gopacket  抓包实战基础&quot;&gt;&lt;/a&gt;gopacket  抓包实战基础&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="golang" scheme="https://setcreed.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://setcreed.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes杂项:查漏补缺</title>
    <link href="https://setcreed.github.io/posts/65fe9395/"/>
    <id>https://setcreed.github.io/posts/65fe9395/</id>
    <published>2023-11-05T02:22:14.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<p>目录：</p><ul><li><a href="https://setcreed.github.io/posts/b43710ac">容器共享进程命名空间的应用</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://setcreed.github.io/posts/b43710ac&quot;&gt;容器共享进程命名空间的应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kubernetes基础知识</title>
    <link href="https://setcreed.github.io/posts/c9fd1d24/"/>
    <id>https://setcreed.github.io/posts/c9fd1d24/</id>
    <published>2023-11-04T14:27:22.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<p>目录：</p><ul><li><p><a href="https://setcreed.github.io/posts/b404e8ed">kubernetes基本操作</a></p></li><li><p><a href="https://setcreed.github.io/posts/b2fa1aad">Linux的Namespace和CGroup</a></p></li><li><p><a href="https://setcreed.github.io/posts/d9ca3d6f">容器运行时基础——runC</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://setcreed.github.io/posts/b404e8ed&quot;&gt;kubernetes基本操作&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://setcreed.git</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>容器基础——Linux的Namespace和CGroup</title>
    <link href="https://setcreed.github.io/posts/b2fa1aad/"/>
    <id>https://setcreed.github.io/posts/b2fa1aad/</id>
    <published>2023-11-04T12:39:28.000Z</published>
    <updated>2024-03-04T14:47:21.718Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这段时间继续学习kubernetes，了解Kubernetes的pod和容器的区别，期间不断深入挖掘，发现需要了解Linux的Namespace、CGroup以及容器运行时等知识。以下内容就当复习一下Linux Namespace和CGroup了。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前我们提到的虚拟化技术、容器技术都能做到资源层面上的隔离和限制。</p><p>而我们关心的容器技术，它实现资源层面上的隔离和限制，依赖于Linux的Namespace和CGroup技术，这是容器技术的基石。下面就重点介绍一下。</p><h1 id="Linux的Namespace"><a href="#Linux的Namespace" class="headerlink" title="Linux的Namespace"></a>Linux的Namespace</h1><p>linux Namespace提供了一种内核级别隔离系统资源的方法，通过将系统的全局资源放在不同的Namespace中，来实现资源隔离的目的。不同Namespace的程序，拥有独立系统资源。</p><p>常见的隔离有</p><ul><li><p>Mount：隔离文件系统挂载点</p></li><li><p>UTS：隔离主机名和域名信息</p></li><li><p>IPC：隔离进程间通信</p></li><li><p>PID：隔离进程的ID</p></li><li><p>Network：隔离网络资源</p></li><li><p>User：隔离用户和用户组的ID</p></li></ul><p>当然后面内核更新，又增加了一些Namespace的种类</p><div class="table-container"><table><thead><tr><th style="text-align:center">Namespace类型</th><th style="text-align:center">隔离资源</th><th style="text-align:center">kernel版本</th></tr></thead><tbody><tr><td style="text-align:center">IPC</td><td style="text-align:center">System V IPC和POSIX消息队列</td><td style="text-align:center">2.6.19</td></tr><tr><td style="text-align:center">Network</td><td style="text-align:center">网络设备、网络协议栈、网络端口</td><td style="text-align:center">2.6.29</td></tr><tr><td style="text-align:center">PID</td><td style="text-align:center">进程</td><td style="text-align:center">2.6.14</td></tr><tr><td style="text-align:center">Mount</td><td style="text-align:center">挂载点</td><td style="text-align:center">2.4.19</td></tr><tr><td style="text-align:center">UTS</td><td style="text-align:center">主机名和域名</td><td style="text-align:center">2.6.19</td></tr><tr><td style="text-align:center">USR</td><td style="text-align:center">用户和用户组</td><td style="text-align:center">3.8</td></tr></tbody></table></div><p>查看Linux下的Namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /proc/$$/ns  </span><br><span class="line"><span class="comment">## $$ 代表当前的shell进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式为</span></span><br><span class="line"><span class="comment"># namespace类型:[inode number]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个进程的某个namespace文件指向同一个链接文件，说明其相关资源在同一个namespace中</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051325985.png" alt=""></p><h2 id="Network-Namespace-网络命名空间"><a href="#Network-Namespace-网络命名空间" class="headerlink" title="Network Namespace 网络命名空间"></a>Network Namespace 网络命名空间</h2><p>介绍 一下 <code>ip netns</code> 命令</p><p>用来管理网络命名空间 实现网络隔离</p><p>每个网络命名空间都提供了一个完全独立的网络协议栈，包括网络接口设备、IPV4和IPV6协议栈、路由表、sockets等</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip netns list  <span class="comment"># 列出网络命名空间 /var/run/netns</span></span><br><span class="line">ip netns add NAME   <span class="comment">#添加网络命名空间</span></span><br><span class="line">ip netns delete <span class="comment">#删除指定命名空间</span></span><br><span class="line">ip netns <span class="built_in">exec</span> NAME cmd <span class="comment">#在指定ns中执行命令</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051431600.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051433576.png" alt=""></p><h3 id="Namespace网络隔离"><a href="#Namespace网络隔离" class="headerlink" title="Namespace网络隔离"></a>Namespace网络隔离</h3><p>准备实际操作一番。</p><p>使用命令行 创建两个网络命名空间，通过veth对连接在一起，使得两个网络命名空间互通</p><h4 id="veth对"><a href="#veth对" class="headerlink" title="veth对"></a>veth对</h4><p>解释：VETH（Virtual Ethernet）设备是Linux内核中的一种虚拟网络设备，通常以成对的方式出现。VETH设备通过一个虚拟的以太网链路连接起来，可以用于各种网络相关的任务，如网络命名空间隔离、容器网络等。通过VETH设备，可以在不同的网络命名空间之间建立通信。</p><p>主要特点：</p><ul><li>成对出现</li><li>一端数据会发送给另一端</li></ul><h4 id="预计的效果"><a href="#预计的效果" class="headerlink" title="预计的效果"></a>预计的效果</h4><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051449762.png" alt=""></p><p>这样两者可以相互ping通</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、在宿主机上创建veth对</span></span><br><span class="line">ip <span class="built_in">link</span> add name veth1 <span class="built_in">type</span> veth peer name veth2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、创建两个net ns</span></span><br><span class="line">ip netns add ns1 &amp;&amp; ip netns add ns2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、在宿主机上把veth设备 设置到ns上</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> veth1 netns ns1 &amp;&amp; ip <span class="built_in">link</span> <span class="built_in">set</span> veth2 netns ns2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、利用exec命令 设置ip</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip addr add <span class="built_in">local</span> 10.12.0.2/24 dev veth1</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip addr add <span class="built_in">local</span> 10.12.0.3/24 dev veth2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、启用设备</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip <span class="built_in">link</span> <span class="built_in">set</span> veth1 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip <span class="built_in">link</span> <span class="built_in">set</span> veth2 up</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231105145833.png" alt=""></p><div class="note warning simple"><p>这只是基本联通了，数据也没有，没什么用的。。。</p></div><h2 id="UTS-Namespace-主机名隔离"><a href="#UTS-Namespace-主机名隔离" class="headerlink" title="UTS Namespace 主机名隔离"></a>UTS Namespace 主机名隔离</h2><p>这里使用<code>unshare</code> 命令演示，unshare是Linux 集成工具，使用它可以创建不同的namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unshare --fork --uts /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># --fork fork出一个进程</span></span><br><span class="line"><span class="comment"># --uts 针对的是主机名隔离</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051521629.png" alt=""></p><h2 id="Mount-Namespace-隔离文件挂载"><a href="#Mount-Namespace-隔离文件挂载" class="headerlink" title="Mount Namespace  隔离文件挂载"></a>Mount Namespace  隔离文件挂载</h2><p>挂载的进程可以查看 /proc/[pid]/mounts、/proc/[pid]/mountinfo、/proc/[pid]/mountstats等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/mytemp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户隔离、挂载隔离</span></span><br><span class="line">unshare --fork --uts --mount /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载文件</span></span><br><span class="line">mount -t tmpfs myfs /mnt/mytemp/</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051553539.png" alt=""></p><p>执行<code>ls -l /proc/self/ns</code></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051557020.png" alt=""></p><p>由于开了主机名隔离和挂载隔离，这两个 namespace的id 不一致</p><h2 id="USR-Namespace-用户隔离"><a href="#USR-Namespace-用户隔离" class="headerlink" title="USR Namespace 用户隔离"></a>USR Namespace 用户隔离</h2><p>使用的是centos7.9系统</p><ul><li>用户隔离，用来隔离user权限</li><li>使用unshare命令在linux上创建不同的namespace</li></ul><p>我们使用alpine来模拟 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先要切换到非root用户</span></span><br><span class="line">https://dl-cdn.alpinelinux.org/alpine/v3.12/releases/x86_64/alpine-minirootfs-3.12.6-x86_64.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> alpine </span><br><span class="line">tar -zxvf alpine-minirootfs-3.12.6-x86_64.tar.gz -C alpine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安装一些库</span></span><br><span class="line">curl https://forensics.cert.org/cert-forensics-tools-release-el7.rpm -o cert-forensics-tools-release-el7.rpm</span><br><span class="line">rpm -Uvh cert-forensics-tools-release-el7.rpm</span><br><span class="line">yum --enablerepo=forensics install -y musl-libc-static</span><br></pre></td></tr></table></figure><p>开始用户隔离</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unshare --fork --user /home/cwz/alpine/bin/busybox sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能会不成功，报参数异常</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果要创建出用户空间，<code>/proc/sys/user/max_user_namespaces</code> 这个值需要更改，默认是0</li><li><code>echo 65535 &gt; /proc/sys/user/max_user_namespaces</code>  需要切换成root</li></ul><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111104157.png" alt=""></p><p>此时切换回普通用户，执行 用户隔离命令</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111104659.png" alt=""></p><p>默认情况下会映射 <code>/proc/sys/kernel/overflowuid</code></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111105207.png" alt=""></p><p>而我们使用docker 进入到容器内部查看 用户id，发现是0</p><p>其实我们宿主机普通用户1000  映射到容器中id（对应0），而没有任何设置的情况下，这个容器的root其实就是宿主机的1000，并不是一个真正的root用户。 但是容器内显示的uid是0，其实是被我们进行用户隔离了且映射了，所以就造成了我们看到uid是0的情况。</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111105043.png" alt=""></p><p>接下来我们在alpine上操作，也要显示uid是0的效果</p><p>我们需要做一些权限处理</p><p>为busybox设置capability</p><ul><li>Linux内核 2.2 之后引入了capabilities机制，来对root权限进行更加细颗粒度的划分。如果进程不是特权进程，而且也没有root的有效id，系统就会去检查进程的capabilities，来确认该进程是否有执行特权操作的权限</li></ul><p>给我们执行的进程设置特权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> cap_setgid,cap_setuid+ep /home/cwz/alpine/bin/busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">getcap</span> /home/cwz/alpine/bin/busybox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消</span></span><br><span class="line">sudo <span class="built_in">setcap</span> cap_setgid,cap_setuid-ep /home/cwz/alpine/bin/busybox</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111111242.png" alt=""></p><p>在busybox下执行</p><ul><li>echo $$  查看当前进程id（此时我们还没做进程隔离，所以显示的是宿主机上的进程id） 下图id是 16263</li><li>映射用户的方法是，添加映射信息到 <code>/proc/16263/uid_map</code>和<code>/proc/16263/gid_map</code>中</li><li>一共三个数字，譬如： 0、1000、256<ul><li>0 就是进程起始id</li><li>第二个数字是父namespace（可以嵌套）</li><li>第二、三个数字代表：父namespace中的 1000～1256 映射到 新namespace 的0～256</li></ul></li></ul><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311111115066.png" alt=""></p><p>继续操作，进行映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;0 1000 256&#x27;</span>  &gt; /proc/16263/uid_map</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;0 1000 256&#x27;</span>  &gt; /proc/16263/gid_map</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311111130129.png" alt=""></p><p>参考文档：</p><p><a href="https://man7.org/linux/man-pages/man7/user_namespaces.7.html">https://man7.org/linux/man-pages/man7/user_namespaces.7.html</a></p><h2 id="使用go代码实现隔离Namespace"><a href="#使用go代码实现隔离Namespace" class="headerlink" title="使用go代码实现隔离Namespace"></a>使用go代码实现隔离Namespace</h2><h3 id="实现主机名隔离"><a href="#实现主机名隔离" class="headerlink" title="实现主机名隔离"></a>实现主机名隔离</h3><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── cmds</span><br><span class="line">│   ├── exec.go</span><br><span class="line">│   ├── root.go</span><br><span class="line">│   └── run.go</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>exec.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> execCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;error args&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">runArgs := []<span class="type">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">runArgs = args[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runCmd := exec.Command(ALPINE+args[<span class="number">0</span>], runArgs...)</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>run.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">SELF   = <span class="string">&quot;/proc/self/exe&quot;</span>   <span class="comment">// Linux中代表当前的程序</span></span><br><span class="line">ALPINE = <span class="string">&quot;/root/alpine&quot;</span> <span class="comment">// 写死的路径，便于测试</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> runCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">runCmd := exec.Command(SELF, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/bin/busybox&quot;</span>, <span class="string">&quot;sh&quot;</span>)</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行入口main.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;gons/cmds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmds.Execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Linux终端执行 go run main.go run 发现没有实现主机名隔离，需要修改一下</p><p>先熟悉一下几个宏定义：</p><ul><li>IPC                CLONE_NEWIPC    进程通信相关</li><li>Network      CLONE_NEWNET    网络</li><li>Mount          CLONE_NEWNS      挂载</li><li>PID                CLONE_NEWPID     进程</li><li>User              CLONE_NEWUSER   用户</li><li>UTS               CLONE_NEWUTS      主机名</li></ul><p>相应的结果内核API定义：</p><ul><li>clone：创建新进程，并放入新的namespace中</li><li>setns：当前进程加入已有的namespace中</li><li>unshare：移除进程（从现有的namespace中）</li></ul><p>在run.go文件中修改：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> runCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">runCmd := exec.Command(SELF, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/bin/busybox&quot;</span>, <span class="string">&quot;sh&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    # 加入的代码：</span><br><span class="line">runCmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class="line">Cloneflags: syscall.CLONE_NEWUTS,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">.....</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新准备环境"><a href="#重新准备环境" class="headerlink" title="重新准备环境"></a>重新准备环境</h3><p>之前下载的alpine可能有些兼容性问题，所以这次使用docker 克隆一个镜像文件出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull alpine:3.12</span><br><span class="line">docker run -d alpine:3.12 top -b</span><br><span class="line">docker <span class="built_in">export</span> -o alpine.tar 容器<span class="built_in">id</span></span><br><span class="line"><span class="built_in">mkdir</span> alpine &amp;&amp; tar xf alpine.tar -C alpine</span><br></pre></td></tr></table></figure><p>当我们使用docker exec 进入容器  显示的是根目录，而之前我们使用代码测试的是当前目录，显然不合理，所以我们需要修改代码，使得也进入根目录。</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132155057.png" alt=""></p><p>只需要修改两点：</p><ul><li>syscall.Chroot  可以用来在指定根目录下运行（chroot）</li><li>os.Chdir 可以来替换当前的工作目录</li></ul><p>修改exec.go文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> execCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;error args&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">runArgs := []<span class="type">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">runArgs = args[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := syscall.Chroot(alpine) <span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">err = os.Chdir(<span class="string">&quot;/&quot;</span>)  <span class="comment">// 替换</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runCmd := exec.Command(args[<span class="number">0</span>], runArgs...)</span><br><span class="line">......</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132157244.png" alt=""></p><h3 id="用户隔离"><a href="#用户隔离" class="headerlink" title="用户隔离"></a>用户隔离</h3><p>run.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">SELF   = <span class="string">&quot;/proc/self/exe&quot;</span> <span class="comment">// Linux中代表当前的程序</span></span><br><span class="line">ALPINE = <span class="string">&quot;/root/alpine&quot;</span>   <span class="comment">// 写死的路径，便于测试</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> runCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">runCmd := exec.Command(SELF, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">fmt.Println(runCmd.Args)</span><br><span class="line">runCmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class="line">Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWUSER,</span><br><span class="line">UidMappings: []syscall.SysProcIDMap&#123;</span><br><span class="line">&#123;</span><br><span class="line">ContainerID: <span class="number">0</span>,</span><br><span class="line">HostID:      os.Getuid(),</span><br><span class="line">Size:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">GidMappings: []syscall.SysProcIDMap&#123;</span><br><span class="line">&#123;</span><br><span class="line">ContainerID: <span class="number">0</span>,</span><br><span class="line">HostID:      os.Getgid(),</span><br><span class="line">Size:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>如果执行用户隔离程序时出现错误：<code>fork/exec /proc/self/exe: invalid argument</code>，需要修改<code>/proc/sys/user/max_user_namespaces</code>的默认值</li></ul><h3 id="进程隔离"><a href="#进程隔离" class="headerlink" title="进程隔离"></a>进程隔离</h3><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshare --fork /root/alpine/bin/busybox sh</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132231993.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行隔离</span></span><br><span class="line"><span class="comment"># 需要挂载隔离，因为需要把 /proc 挂载进来，ps命令依赖这个文件夹</span></span><br><span class="line">unshare --fork --pid --mount /root/alpine/bin/busybox sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">mount -t proc proc /proc</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132234513.png" alt=""></p><p>此时就实现了进程隔离，busybox进程id为1</p><p>代码实现：</p><p>run.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">SELF   = <span class="string">&quot;/proc/self/exe&quot;</span> <span class="comment">// Linux中代表当前的程序</span></span><br><span class="line">ALPINE = <span class="string">&quot;/root/alpine&quot;</span>   <span class="comment">// 写死的路径，便于测试</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> runCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">runCmd := exec.Command(SELF, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">fmt.Println(runCmd.Args)</span><br><span class="line">runCmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class="line"><span class="comment">// 用户隔离</span></span><br><span class="line">Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWUSER | syscall.CLONE_NEWNS | syscall.CLONE_NEWPID,</span><br><span class="line">UidMappings: []syscall.SysProcIDMap&#123;</span><br><span class="line">&#123;</span><br><span class="line">ContainerID: <span class="number">0</span>,</span><br><span class="line">HostID:      os.Getuid(),</span><br><span class="line">Size:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">GidMappings: []syscall.SysProcIDMap&#123;</span><br><span class="line">&#123;</span><br><span class="line">ContainerID: <span class="number">0</span>,</span><br><span class="line">HostID:      os.Getgid(),</span><br><span class="line">Size:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exec.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ENV = <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> execCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;error args&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">runArgs := []<span class="type">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">runArgs = args[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := syscall.Chroot(ALPINE) <span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err = os.Chdir(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">syscall.Mount(<span class="string">&quot;proc&quot;</span>, <span class="string">&quot;/proc&quot;</span>, <span class="string">&quot;proc&quot;</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>)  <span class="comment">// 挂载</span></span><br><span class="line">runCmd := exec.Command(args[<span class="number">0</span>], runArgs...)</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line">runCmd.Env = []<span class="type">string</span>&#123;ENV&#125; <span class="comment">// 设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132301867.png" alt=""></p><h1 id="Linux的CGroups"><a href="#Linux的CGroups" class="headerlink" title="Linux的CGroups"></a>Linux的CGroups</h1><p>CGroups (Control Groups) 是Linux下用于对一个或一组进程进行资源控制和监控的机制。利用CGroups可以对诸如CPU使用时间、内存、磁盘I/O等进程所需资源进行限制。kubernetes允许用户为pod的容器申请资源，当容器在计算节点上运行起来时，可以通过CGroups来完成资源的分配和限制。</p><p>CGroups为每种可以控制的资源定义了一个子系统。</p><p>文档：<a href="https://man7.org/linux/man-pages/man7/cgroups.7.html">https://man7.org/linux/man-pages/man7/cgroups.7.html</a></p><p>任务（task）：理解为进程</p><ul><li><p>控制组（cgroup）：用来设定资源的配额。任务（进程）可以加入到某个组，也可以迁移。可以包含多个子系统</p></li><li><p>层级（hierarchy）：控制组有层级关系，类似树的结构，子节点的控制组继承父控制组的属性（资源配额、限制等）</p></li><li><p>子系统（subsystem）：也叫资源控制器，比如memory子系统可以控制进程内的使用。子系统需要加入到某个层级，然后该层级的所有控制组，均受到这个子系统的控制</p><ul><li><p>cpu：限制进程的使用率</p></li><li><p>cpuacct：统计cgroups中的进程的cpu的实验报告</p></li><li><p>cpuset：为cgroups中的进程分配单独的cpu节点或者内存节点</p></li><li><p>memory：限制进程的memory使用量</p></li><li><p>blkio：限制进程的块设备io</p></li><li><p>devices：控制进程能够访问某些设备</p></li><li><p>net_cls：标记cgroups中进程的网络数据包，然后可以使用tc模块（traffic control）对数据包进行控制</p></li><li><p>net_prio：限制进程网络流量的优先级</p></li><li><p>huge_tlb：限制hugeTLB的使用</p></li><li><p>freezer ：挂起或者恢复cgroups中的进程</p></li><li><p>ns：控制cgrouops中的进程使用不同的namespace</p></li></ul></li></ul><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142135713.png" alt=""></p><p>还是直接演练一番来的实在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y libcgroup-tools.x86_64</span><br><span class="line"><span class="comment"># 用来操作cgroup相关的命令</span></span><br></pre></td></tr></table></figure><p>cgroups以文件挂载的方式存在，其中 <code>/sys/fs/cgroup</code> 这个文件夹 是挂载到tmpfs(临时内存文件夹)的</p><h2 id="限制CPU使用率"><a href="#限制CPU使用率" class="headerlink" title="限制CPU使用率"></a>限制CPU使用率</h2><p>进入<code>/sys/fs/cgroup/cpu</code>，创建一个文件夹myapp，进入myapp，发现会自动生成对应的配置文件</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142142595.png" alt=""></p><p>首先先解释一下这几个文件是干啥的</p><ul><li>cpu.shares  是在该cgroup能获得CPU使用时间的相对值，最小值为2。如果两个cgroup的cpu.shares都为100，那么他们可以得到相同的CPU时间。如果另外一个cgroup的cpu.shares是200，那么他可以得到两倍于cpu.shares=100的cgroup获取的CPU时间。但是如果一个cgroup中的任务处在空闲状态，不使用任何的CPU时间，则该CPU时间就可以被其他的cgroup所借用。也就是说 cpu.shares 主要表示当系统繁忙时，给该cgroup分配的CPU时间份额。</li><li>cpu.cfs_period_us和cpu.cfs_quota_us   cpu.cfs_period_us用于配置时间周期长度，单位为us（微秒）。cpu.cfs_quota_us用来配置当前cgroup在cpu.cfs_period_us 时间内最多使用的CPU时间数，单位为us（微秒）。这两个参数被用来设置该cgroup能使用的CPU的时间上限。如果不想对进程使用的CPU设置限制，可以将cpu.cfs_quota_us 设置为-1。</li><li>cpu.stat  cgroup内的进程使用的CPU时间统计</li><li>cpuacct.usage    包含该cgroup及其子cgroup下进程使用CPU的时间，单位是ns（纳秒）</li></ul><p>具体操作：</p><ul><li>随便写个死循环程序，然后编译上传到服务器</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  i:=<span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    i++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142225430.png" alt=""></p><p>可以看到，如果不限制，直接cpu打满</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd 进入这个myapp</span></span><br><span class="line"><span class="built_in">cd</span> /sys/fs/cgroup/cpu/myapp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 100000 &gt; cpu.cfs_period_us  <span class="comment"># 一个CFS调度时间周期长度，默认100000微妙</span></span><br><span class="line"><span class="built_in">echo</span> 10000 &gt; cpu.cfs_quota_us <span class="comment"># 在上面一个周期内，允许运行的时间是10000微秒，默认 -1 不限制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cpu.cfs_quota_us / cpu.cfs_period_us = 0.1  就好比只能使用0.1个cpu 10%</span></span><br></pre></td></tr></table></figure><p>CFS 表示 Completely Fair Scheduler 完全公平调度器（Linux内核功能，负责进程调度）</p><p>有关文档：<a href="https://kernel.org/doc/Documentation/scheduler/sched-bwc.txt">https://kernel.org/doc/Documentation/scheduler/sched-bwc.txt</a></p><p>接下来操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cgexec -g cpu:myapp ./myapp</span><br><span class="line"><span class="comment"># 该命令的作用是：在制定的cgroup中运行任务</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142238564.png" alt=""></p><p>还可以 把 当前运行程序的进程id放入 cgroup.procs 中来限制</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142243008.png" alt=""></p><h2 id="限制内存使用"><a href="#限制内存使用" class="headerlink" title="限制内存使用"></a>限制内存使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /sys/fs/cgroup/memory</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> myapp  <span class="comment"># 创建一个文件夹，不影响系统原来的memory</span></span><br></pre></td></tr></table></figure><p>随便写一个程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mem</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++ &#123;</span><br><span class="line">list = <span class="built_in">append</span>(list, rand.Int())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">go</span> mem()</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的程序 不断创建协程，协程 使用 <code>select &#123;&#125;</code> 卡住，协程不能退出，无法释放后内存，内存最终会用爆掉。</p><p>这是个内存泄漏的程序</p><p>需要修改两个文件：</p><ul><li><p>memory.limit_in_bytes  设定用户的内存（包括文件缓存）的最大用量。默认单位是字节。可加后缀代表更大的单位—— k</p><p>、m、g等</p></li><li><p>memory.swappiness  设置如何使用swap分区。swappiness=0 时 表示最大限度使用物理内存，然后才是swap空间</p><ul><li>假设swappiness=30，表示当内存使用到70%，就会开始swap交换</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1g &gt; memory.limit_in_bytes</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; memory.swappiness</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制程序运行</span></span><br><span class="line">cgexec -g memory:myapp ./mymem</span><br></pre></td></tr></table></figure><p>看效果：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142305002.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142305024.png" alt=""></p><p>当内存超过一定限制，这个程序就自动杀死了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这段时间继续学习kubernetes，了解Kubernetes的pod和容器的区别，期间不断深入挖掘，发现需要了解Linux的Namespace、CGroup以及容器运行时等知识。以下内容就当复习一下Linux Namespace和CGroup了。</summary>
      
    
    
    
    <category term="Namespace、CGroup" scheme="https://setcreed.github.io/categories/Namespace%E3%80%81CGroup/"/>
    
    
    <category term="Namespace" scheme="https://setcreed.github.io/tags/Namespace/"/>
    
    <category term="CGroup" scheme="https://setcreed.github.io/tags/CGroup/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes容器运行时</title>
    <link href="https://setcreed.github.io/posts/d9ca3d6f/"/>
    <id>https://setcreed.github.io/posts/d9ca3d6f/</id>
    <published>2023-11-04T06:54:33.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s容器运行时"><a href="#k8s容器运行时" class="headerlink" title="k8s容器运行时"></a>k8s容器运行时</h1><h2 id="k8s容器运行时的发展脉络"><a href="#k8s容器运行时的发展脉络" class="headerlink" title="k8s容器运行时的发展脉络"></a>k8s容器运行时的发展脉络</h2><h3 id="早期"><a href="#早期" class="headerlink" title="早期"></a>早期</h3><p>首先看一下docker 如何启动容器的</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311181319635.png" alt=""></p><p>早期的k8s+docker架构</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311181322375.png" alt=""></p><p>那时候k8s还不是容器的老大，需要兼容各个容器产品的接口，每次那些容器产品升级了，k8s也得跟着升级。</p><h3 id="CRI"><a href="#CRI" class="headerlink" title="CRI"></a>CRI</h3><p>后面为了兼容性，kubernetes从1.5版本之后加入了容器运行时插件，即 Container Runtime Interface 简称 CRI。用来充当kubelet和容器运行时的桥梁。</p><p>CRI本质是一个规范、标准，怎么做是由各个厂商自己实现的。</p><p>就变成了这样的一个调用过程：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311181339247.png" alt=""></p><p>由于历史原因，docker-shim 还是由k8s项目组维护。可以看到，kubelet创建出容器 需要通过很多链路，比较复杂。所以在1.20之后，逐步分离出了docker，就变成这样了：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311181343980.png" alt=""></p><p>这样 整个流程就比之前简单很多了。</p><h3 id="OCI规范介绍"><a href="#OCI规范介绍" class="headerlink" title="OCI规范介绍"></a>OCI规范介绍</h3><p>OCI标准</p><p>包含两个协议：</p><p>镜像标准（Image Spec ）和 运行时标准（Runtime Spec），这两个标准通过OCI运行时文件系统包（OCI runtime filesystem bundle）的标准格式链接在一起，OCI镜像可以通过工具转换成文件系统包，OCI Runtime也可以识别该文件系统包并运行容器</p><ul><li>镜像标准，规范了以layer 保存的文件系统，每个层保存了和上层之间的变化，如 用manifest、config和index文件找出镜像的具体信息</li><li>运行时标准，定义了容器的创建、删除、查看等操作，规范了容器的状态描述。 runC就是OCI运行时标准的一个参考实现。</li></ul><p><strong>OCI Runtime （ Open Container Initiative Runtime Specification ）规范了容器的配置、执行环境和生命周期管理</strong>。容器的配置信息由config.json配置文件来管理。规范容器的执行环境可以保证容器内运行的应用在生命周期内拥有一致的运行环境。</p><p>设计的考虑因素：</p><ul><li>操作标准化：容器的标准化操作包括使用标准流程创建、启动和停止容器，使用标准文件系统工具复制和创建容器快照，使用标准化网络工具进行下载和上传</li><li>内容无关：不关系容器内的具体应用内容是什么，都能通过容器标准操作来运行</li><li>基础设施无关</li><li>工业级交付</li></ul><p>文档：<a href="https://github.com/opencontainers/runtime-spec/blob/main/spec.md">https://github.com/opencontainers/runtime-spec/blob/main/spec.md</a></p><p>相关文章：<a href="https://cloud.tencent.com/developer/article/1965651">浅析容器运行时奥秘——OCI标准 - 腾讯云开发者社区-腾讯云</a></p><p>RunC 是 Open Container Initivate Runtime Specification(指定容器的配置、执行环境和生命周期) 的基本实现</p><h2 id="runC"><a href="#runC" class="headerlink" title="runC"></a>runC</h2><p>了解了k8s kubelet创建容器的流程，发现 都有 runC这个工具。那就先来看看runC到底是什么</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>它是用来运行容器的一个轻量级工具，被称为运行容器的运行时，它负责利用符合标准的文件OCI（Open Container Initiative）标准等资源运行容器。</p><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>首先下载runc，本次使用的是最新版本的runc：<a href="https://github.com/opencontainers/runc/releases/tag/v1.1.10">https://github.com/opencontainers/runc/releases/tag/v1.1.10</a></p><p>因为我的环境中有docker，下载下来的runc和docker中的有冲突，所以可以重命名为rc，放入<code>/usr/local/bin</code> 下。</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311181355593.png" alt=""></p><p>准备一个镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull alpine:3.18</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p alpine/rootfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压并导出alpine镜像文件</span></span><br><span class="line">docker <span class="built_in">export</span> $(docker create alpine:3.18) | tar -C alpine/rootfs -xvf -</span><br></pre></td></tr></table></figure><p>执行 <code>rc spec</code> 会得到一个配置文件：<code>config.json</code></p><p>文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ociVersion&quot;</span><span class="punctuation">:</span><span class="string">&quot;1.0.2-dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;process&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;terminal&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;gid&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;sh&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;TERM=xterm&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span><span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;capabilities&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;bounding&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;CAP_AUDIT_WRITE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CAP_KILL&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CAP_NET_BIND_SERVICE&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;effective&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;CAP_AUDIT_WRITE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CAP_KILL&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CAP_NET_BIND_SERVICE&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;permitted&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;CAP_AUDIT_WRITE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CAP_KILL&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CAP_NET_BIND_SERVICE&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ambient&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;CAP_AUDIT_WRITE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CAP_KILL&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;CAP_NET_BIND_SERVICE&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rlimits&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;RLIMIT_NOFILE&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;hard&quot;</span><span class="punctuation">:</span><span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;soft&quot;</span><span class="punctuation">:</span><span class="number">1024</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;noNewPrivileges&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;rootfs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;readonly&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span><span class="string">&quot;runc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mounts&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/proc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;proc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="string">&quot;proc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;tmpfs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="string">&quot;tmpfs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;nosuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;strictatime&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;mode=755&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;size=65536k&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/dev/pts&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;devpts&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="string">&quot;devpts&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;nosuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;noexec&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;newinstance&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;ptmxmode=0666&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;mode=0620&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;gid=5&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/dev/shm&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;tmpfs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="string">&quot;shm&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;nosuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;noexec&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;nodev&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;mode=1777&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;size=65536k&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/dev/mqueue&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;mqueue&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="string">&quot;mqueue&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;nosuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;noexec&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;nodev&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/sys&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;sysfs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="string">&quot;sysfs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;nosuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;noexec&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;nodev&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;ro&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;destination&quot;</span><span class="punctuation">:</span><span class="string">&quot;/sys/fs/cgroup&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;cgroup&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="string">&quot;cgroup&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;nosuid&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;noexec&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;nodev&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;relatime&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;ro&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;linux&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;devices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;allow&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span><span class="string">&quot;rwm&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;namespaces&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;pid&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;network&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;ipc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;uts&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;mount&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;cgroup&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;maskedPaths&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;/proc/acpi&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/asound&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/kcore&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/keys&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/latency_stats&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/timer_list&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/timer_stats&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/sched_debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/sys/firmware&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/scsi&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;readonlyPaths&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;/proc/bus&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/fs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/irq&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/sys&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;/proc/sysrq-trigger&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="使用runc运行容器"><a href="#使用runc运行容器" class="headerlink" title="使用runc运行容器"></a>使用runc运行容器</h4><p>修改config.json文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rootfs&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;readonly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;just&quot;</span><span class="punctuation">,</span>  <span class="comment">// 修改主机名为just</span></span><br><span class="line">  <span class="attr">&quot;mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc run abc  <span class="comment"># 启动一个容器abc</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311181553839.png" alt=""></p><p>这样直接rc run  是前台运行的，退出容器之后 就停了，我们希望使用detach模式在后台运行。</p><p>随便写个go程序：</p><p>myhttp.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;Hello World!&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">log.Println(<span class="string">&quot;开始启动http服务~&quot;</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译之后放到 alpine/rootfs/app 目录下，并设置可执行权限</p><p>修改config.json文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;process&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;terminal&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>  <span class="comment">// 修改</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;/app/myhttp&quot;</span>   <span class="comment">// 修改如何启动程序</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rootfs&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;readonly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span>  <span class="comment">// readonly也改为false</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>基本命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">runc run -d abc   // 后台运行程序</span><br><span class="line">runc list  // 列出运行容器列表</span><br><span class="line">runc <span class="built_in">kill</span> abc  // 停止容器</span><br><span class="line">runc delete abc  // 删除容器</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311181622146.png" alt=""></p><h4 id="挂载文件夹"><a href="#挂载文件夹" class="headerlink" title="挂载文件夹"></a>挂载文件夹</h4><p>可以把可执行程序放到 /root/app 文件夹下</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222100707.png" alt=""></p><p>同样执行：<code>runc run -d abc &gt; abc.out 2&gt;&amp;1</code> </p><p>exec 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc <span class="built_in">exec</span> -t abc sh   <span class="comment"># 进入容器</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222103399.png" alt=""></p><h3 id="给容器配置网络"><a href="#给容器配置网络" class="headerlink" title="给容器配置网络"></a>给容器配置网络</h3><p>之前我们随便run了一个容器abc，但是没有设置网络</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222106019.png" alt=""></p><p>可以看到只有一个回环地址</p><p>现在我们要设置这个容器的虚拟网卡，使得能和联通宿主机的网络</p><h4 id="虚拟网卡设置"><a href="#虚拟网卡设置" class="headerlink" title="虚拟网卡设置"></a>虚拟网卡设置</h4><p>可以先看一下之前的文章：</p><p><a href="https://setcreed.github.io/posts/b2fa1aad/">Linux的namespace基础</a></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222119551.png" alt=""></p><p>上图是大概的结构</p><p>首先安装一个网桥管理的工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bridge-utils</span><br><span class="line"></span><br><span class="line">brctl show <span class="comment"># 可以看到本机有哪些网桥</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网桥</span></span><br><span class="line">brctl addbr just0</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> just0 up</span><br><span class="line">ip addr add 10.12.0.1/24 dev just0</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222126394.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建veth设备</span></span><br><span class="line">ip <span class="built_in">link</span> add name veth0-host <span class="built_in">type</span> veth peer name veth0-ns</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> veth0-host up</span><br><span class="line">brctl addif just0 veth0-host  <span class="comment"># 把veth0-host搭在网桥上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个网络命名空间</span></span><br><span class="line">ip netns add mycontainer</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> veth0-ns netns mycontainer   <span class="comment"># 把veth0-ns 移动到 mycontainer这个命名空间下</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222131254.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置ns里面的网卡名称和启动</span></span><br><span class="line">ip netns <span class="built_in">exec</span> mycontainer ip <span class="built_in">link</span> <span class="built_in">set</span> veth0-ns name eth0  <span class="comment"># 把veth0-ns 改为eth0 设置名字</span></span><br><span class="line">ip netns <span class="built_in">exec</span> mycontainer ip addr add 10.12.0.2/24 dev eth0</span><br><span class="line">ip netns <span class="built_in">exec</span> mycontainer ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 up</span><br><span class="line">ip netns <span class="built_in">exec</span> mycontainer ip addr add 127.0.0.1 dev lo</span><br><span class="line">ip netns <span class="built_in">exec</span> mycontainer ip <span class="built_in">link</span> <span class="built_in">set</span> lo up</span><br><span class="line">ip netns <span class="built_in">exec</span> mycontainer ip route add default via 10.12.0.1  <span class="comment"># 设置ip路由 指向外部host veth设备</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222134037.png" alt=""></p><p>这样 网络就算通了</p><h4 id="访问容器服务"><a href="#访问容器服务" class="headerlink" title="访问容器服务"></a>访问容器服务</h4><p>我们手动创建的命名空间在<code>/var/run/netns</code> 下</p><p>所以我们在config文件中指定网络命名空间，让容器使用我们之前创建的网络命名空间<code>mycontianer</code></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222143970.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222144846.png" alt=""></p><p>可以看到已经可以在宿主机 访问容器的http服务了！</p><p>端口映射，使得外部可以访问容器服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口映射</span></span><br><span class="line">iptables -t nat -I PREROUTING -p tcp -m tcp --dport 9090 -j DNAT --to-destination 10.12.0.2:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">iptables -t nat -D PREROUTING -p tcp -m tcp --dport 9090 -j DNAT --to-destination 10.12.0.2:80</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311222149101.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启内核数据包转发</span></span><br><span class="line">sysctl -w net.ipv4.ip_forward=1 <span class="comment"># 临时开启</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样就可以外部访问容器服务了</p><h3 id="k8s中的sandbox"><a href="#k8s中的sandbox" class="headerlink" title="k8s中的sandbox"></a>k8s中的sandbox</h3><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101508682.png" alt=""></p><ul><li><p>容器：一个隔离（Linux Namespace）的应用运行时环境</p></li><li><p>POD 沙箱：一组共同被Pod约束的容器就叫做 Pod Sandbox，各个容器共享底层资源，其中扮演沙箱的角色就是pause</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> port <span class="type">string</span></span><br><span class="line">flag.StringVar(&amp;port, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;80&quot;</span>, <span class="string">&quot;-p 80&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">writer.Write([]<span class="type">byte</span>(<span class="string">&quot;hello world!\n&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">log.Println(<span class="string">&quot;开始启动http服务...&quot;</span>)</span><br><span class="line">log.Println(<span class="string">&quot;启动端口是: &quot;</span>, port)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:&quot;</span>+port, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动两个容器</span></span><br><span class="line"><span class="comment"># 修改启动参数 args ip:8081</span></span><br><span class="line">rc run -d web1 &gt; web1.out 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改启动参数 args ip:8082</span></span><br><span class="line">rc run -d web2 &gt; web2.out 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样两个容器就共享了网络命名空间</span></span><br><span class="line"></span><br><span class="line">[root@just alpine]<span class="comment"># curl 10.12.0.2:8081</span></span><br><span class="line">hello world!</span><br><span class="line">[root@just alpine]<span class="comment"># curl 10.12.0.2:8082</span></span><br><span class="line">hello world!</span><br><span class="line">[root@just alpine]<span class="comment"># ip netns</span></span><br><span class="line">mycontainer (<span class="built_in">id</span>: 0)</span><br><span class="line">[root@just alpine]<span class="comment"># ip netns exec mycontainer curl localhost:8081</span></span><br><span class="line">hello world!</span><br><span class="line">[root@just alpine]<span class="comment"># ip netns exec mycontainer curl localhost:8082</span></span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101522755.png" alt=""></p><h3 id="模拟pod多容器网络共享"><a href="#模拟pod多容器网络共享" class="headerlink" title="模拟pod多容器网络共享"></a>模拟pod多容器网络共享</h3><p>目标：运行pause容器，把web1、web2两个容器纳入到pause中</p><h4 id="runC-运行pause容器"><a href="#runC-运行pause容器" class="headerlink" title="runC 运行pause容器"></a>runC 运行pause容器</h4><p>使用pasue镜像来进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像-导出文件夹</span></span><br><span class="line">docker pull mirrorgooglecontainers/pause-amd64:3.1</span><br><span class="line"></span><br><span class="line">docker tag mirrorgooglecontainers/pause-amd64:3.1  pause:3.1</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p pause/rootfs</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">export</span> $(docker create pause:3.1) | tar -C pause/rootfs -xvf -</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> pause</span><br><span class="line"></span><br><span class="line">rc spec</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改启动参数 args /pause</span></span><br><span class="line"><span class="comment">#            terminal 改为false</span></span><br><span class="line">rc run -d pause &gt; pause.out 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /proc/&#123;pid&#125;/ns</span><br><span class="line"><span class="comment"># 这里面的就是namespace文件</span></span><br><span class="line"><span class="comment"># 两个进程的某个namespace文件指向同一个链接文件，说明其相关资源在同一个namespace中</span></span><br></pre></td></tr></table></figure><h4 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h4><p>先使用runc创建一个pasue容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置软连接</span></span><br><span class="line"><span class="comment"># ip netns 所在的目录在 /var/run/netns</span></span><br><span class="line"><span class="comment"># 而我们通过runc创建(或普通进程) 的 ns 在/proc/pid/ns/net 里</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /proc/15609/ns/net /var/run/netns/proc15609</span><br><span class="line"></span><br><span class="line">ip <span class="built_in">link</span> add name veth0-pause <span class="built_in">type</span> veth peer name veth0-pause-ns</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> veth0-pause up</span><br><span class="line">brctl addif just0 veth0-pause</span><br><span class="line"></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> veth0-pause-ns netns proc15609</span><br><span class="line"></span><br><span class="line">ip netns <span class="built_in">exec</span> proc15609 ip <span class="built_in">link</span> <span class="built_in">set</span> veth0-pause-ns name eth0</span><br><span class="line">ip netns <span class="built_in">exec</span> proc15609 ip addr add 10.12.0.4/24 dev eth0</span><br><span class="line">ip netns <span class="built_in">exec</span> proc15609 ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 up</span><br><span class="line">ip netns <span class="built_in">exec</span> proc15609 ip route add default via 10.12.0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理脚本</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ip netns | grep ^proc | grep -v <span class="built_in">id</span>);<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">rm</span> -rf /var/run/netns/<span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101827672.png" alt=""></p><h4 id="将web容器纳入到pause容器"><a href="#将web容器纳入到pause容器" class="headerlink" title="将web容器纳入到pause容器"></a>将web容器纳入到pause容器</h4><p>首先改web容器的config配置</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101830645.png" alt=""></p><p>然后启动web1、web2容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rc run -d web1 &gt; web1.out 2&gt;&amp;1</span><br><span class="line">rc run -d web2 &gt; web2.out 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>补充一个命令：nsenter 是一个 可以在指定进程的命名空间下运行指定程序的命令</p><ul><li>-t 、—target pid：指定被进入命名空间的目标进程的pid</li><li>-m、—mount[=file]：进入mount命名空间。如果指定了file，则进入file的命名空间</li><li>-u、—uts[=file]：进入uts命名空间</li><li>-i、—ipc[=file]：进入ipc命名空间</li><li>-n、—net[=file]：进入net命名空间</li><li>-p、—pid[=file]：进入pid命名空间</li><li>—user[=file]：进入user命名空间</li><li>-G、—setgid gid：设置运行程序的gid</li><li>-S、—setuid uid：设置运行程序的uid</li><li>-r、—root[=directory]: 设置根目录</li><li>-w、—wd[=directory]：设置工作目录</li></ul><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101844044.png" alt=""></p><h3 id="Pod共享进程命名空间和通信"><a href="#Pod共享进程命名空间和通信" class="headerlink" title="Pod共享进程命名空间和通信"></a>Pod共享进程命名空间和通信</h3><p>没有共享进程命名空间之前的：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101848503.png" alt=""></p><p>修改web容器的config 配置</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101850986.png" alt=""></p><p>效果：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101851066.png" alt=""></p><h3 id="使用runC配置Cgroups资源限制-cpu"><a href="#使用runC配置Cgroups资源限制-cpu" class="headerlink" title="使用runC配置Cgroups资源限制 cpu"></a>使用runC配置Cgroups资源限制 cpu</h3><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312101910327.png" alt=""></p><h2 id="OCI规范之Image-Spec规范"><a href="#OCI规范之Image-Spec规范" class="headerlink" title="OCI规范之Image Spec规范"></a>OCI规范之Image Spec规范</h2><p>OCI规范分为 Image Spec和Runtime Spec ，Runtime Spec是上面的内容（runc是其基本实现）</p><p>文档：<a href="https://github.com/opencontainers/image-spec/blob/main/spec.md">https://github.com/opencontainers/image-spec/blob/main/spec.md</a></p><p>镜像规范定义了如何创建一个符合OCI规范的镜像，规定了镜像需要输出的内容和格式。</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312122051312.png" alt=""></p><h3 id="镜像分层说明"><a href="#镜像分层说明" class="headerlink" title="镜像分层说明"></a>镜像分层说明</h3><p> 准备配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull alpine:3.18</span><br><span class="line">docker save alpine:3.18 -o alpine-img.tar</span><br><span class="line"><span class="built_in">mkdir</span> alpine-img</span><br><span class="line">tar -xf alpine-img.tar -C alpine-img</span><br></pre></td></tr></table></figure><p>把镜像导出来看看是啥样的</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312122106561.png" alt=""></p><p>大概的目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── b541f2080109ab7b6bf2c06b28184fb750cdd17836c809211127717f48809858.json</span><br><span class="line">├── c4a8dbca6271e3b1737cc978e30b84cd80bcff117b5eb0ecd01b526de36a5e7c</span><br><span class="line">│   ├── json</span><br><span class="line">│   ├── layer.tar</span><br><span class="line">│   └── VERSION</span><br><span class="line">├── manifest.json  <span class="comment"># 记录config文件和层信息、镜像名称和tag</span></span><br><span class="line">└── repositories</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>manifest.json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b541f2080109ab7b6bf2c06b28184fb750cdd17836c809211127717f48809858.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;RepoTags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;alpine:3.18&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Layers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;c4a8dbca6271e3b1737cc978e30b84cd80bcff117b5eb0ecd01b526de36a5e7c/layer.tar&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>其中Layers列表中的tar包共同组成了生产容器的rootfs</p><h4 id="使用Dockerfile-说明镜像分层"><a href="#使用Dockerfile-说明镜像分层" class="headerlink" title="使用Dockerfile 说明镜像分层"></a>使用Dockerfile 说明镜像分层</h4><p>准备一个Dockerfile文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.18</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /app</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后执行：<code>docker build -t myalpine:v1 .</code></p><p>然后解压这个镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save myalpine:v1 -o myalpine.tar</span><br><span class="line"><span class="built_in">mkdir</span> myalpine</span><br><span class="line">tar -xf myalpine.tar -C myalpine</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312231004321.png" alt=""></p><p>多了一层layer</p><h3 id="使用umoci制作镜像文件"><a href="#使用umoci制作镜像文件" class="headerlink" title="使用umoci制作镜像文件"></a>使用umoci制作镜像文件</h3><p>文档：<a href="https://github.com/opencontainers/umoci">https://github.com/opencontainers/umoci</a></p><p>OCI镜像规范的参考实现，为用户提供创建、操作容器镜像以及与容器镜像交互的能力</p><p>首先准备一个alpine文件夹，里面是下载下来的alpine</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">umoci init --layout myimage  <span class="comment"># 初始化一个布局文件夹</span></span><br><span class="line"></span><br><span class="line">umoci new --image myimage:v1   <span class="comment"># 创建出一个新的镜像</span></span><br><span class="line"></span><br><span class="line">umoci unpack --image myimage:v1 bundle  <span class="comment"># 将一个镜像提取到一个文件夹中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入bundle中，把之前的rootfs拷贝进去</span></span><br><span class="line"></span><br><span class="line">umoci repack --image myimage:v1 bundle  <span class="comment"># 重新pack</span></span><br><span class="line"></span><br><span class="line">umoci <span class="built_in">stat</span> --image myimage:v1  <span class="comment"># 查看状态</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312231023044.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312231025189.png" alt=""></p><p>这里的mediaType  不同的规范所对应的文件格式是不一样的</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312231030884.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312231039821.png" alt=""></p><h4 id="将umoci制作的镜像发布到阿里云镜像仓库"><a href="#将umoci制作的镜像发布到阿里云镜像仓库" class="headerlink" title="将umoci制作的镜像发布到阿里云镜像仓库"></a>将umoci制作的镜像发布到阿里云镜像仓库</h4><p>使用工具：skopeo</p><p><a href="https://github.com/containers/skopeo">https://github.com/containers/skopeo</a></p><p>skopeo是用来对Register（镜像服务）上的image操作的工具，功能主要包括：</p><ul><li>查看Register上的镜像信息</li><li>在Register之间或Register与本地之间复制镜像、删除Register上的镜像</li></ul><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照文档上安装，有各个linux发行版的安装方式，我这个是centos7，yum 安装的skopeo版本很低，我们使用编译安装的方式</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install gpgme-devel device-mapper-devel btrfs-progs-devel glib2-devel libassuan-devel go-md2man -y</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用源码构建始终不成功，所以就使用镜像来构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/containers/skopeo.git &amp;&amp; <span class="built_in">cd</span> skopeo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">docker run --name skopeo-build \</span><br><span class="line">    -v <span class="variable">$PWD</span>:/src \</span><br><span class="line">    -v /usr/bin/go-md2man:/go/bin/go-md2man \</span><br><span class="line">    -w /src \</span><br><span class="line">    -e CGO_ENABLED=0 \</span><br><span class="line">    -e GOPROXY=https://goproxy.cn,direct \</span><br><span class="line">    golang:1.21 \</span><br><span class="line">    sh -c <span class="string">&#x27;make BUILDTAGS=containers_image_openpgp &amp;&amp; \</span></span><br><span class="line"><span class="string">           CGO_CFLAGS=&quot;&quot; CGO_LDFLAGS=&quot;&quot; GO111MODULE=on go build -mod=vendor \</span></span><br><span class="line"><span class="string">           -tags &quot;containers_image_openpgp&quot; -o bin/skopeo ./cmd/skopeo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> ./bin/skopeo /usr/local/bin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了与docker兼容，先从网上直接下载一个alpine</span></span><br><span class="line">skopeo copy docker://alpine:3.16 oci:alpine:v1  <span class="comment"># 会生成一个alpine的文件夹</span></span><br><span class="line"></span><br><span class="line">umoci unpack --image alpine:v1 bundle  <span class="comment"># 解包</span></span><br><span class="line"></span><br><span class="line">umoci repack --image alpine:v1 bundle</span><br><span class="line"></span><br><span class="line">skopeo inspect docker://docker.io/alpine:3.16  <span class="comment"># 查看镜像信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">skopeo login --username=你的用户名 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布镜像</span></span><br><span class="line">skopeo copy oci:alpine:v1 docker://registry.cn-hangzhou.aliyuncs.com/chengwz/alpine:v1</span><br></pre></td></tr></table></figure><h2 id="OCI规范之分发规范"><a href="#OCI规范之分发规范" class="headerlink" title="OCI规范之分发规范"></a>OCI规范之分发规范</h2><p>官方：<a href="https://github.com/opencontainers/distribution-spec">https://github.com/opencontainers/distribution-spec</a></p><ul><li>OCI分发规范项目定义了一系列API协议来促进、标准化内容的分发</li><li>最早实现该规范的是Docker Distribution（可以用来搭建本地私有镜像仓库），后来捐给了CNCF。现在地址是：<a href="https://github.com/distribution/distribution">https://github.com/distribution/distribution</a></li></ul><p>现在开始玩一把：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --name registry registry:2</span><br><span class="line"></span><br><span class="line">docker tag alpine:3.18 localhost:5000/alpine:3.18</span><br><span class="line">docker push localhost:5000/alpine:3.18</span><br></pre></td></tr></table></figure><p>安装 <a href="https://github.com/opencontainers/distribution-spec/blob/main/spec.md">https://github.com/opencontainers/distribution-spec/blob/main/spec.md</a> 分发规范的api endpoint，肯定是可以请求的，现在试一试。</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312231401129.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:5000/v2/alpine/manifests/3.18</span><br><span class="line"><span class="comment"># 得到镜像的基本信息</span></span><br></pre></td></tr></table></figure><h2 id="使用代码获取镜像信息"><a href="#使用代码获取镜像信息" class="headerlink" title="使用代码获取镜像信息"></a>使用代码获取镜像信息</h2><p>使用第三方库：<a href="https://github.com/google/go-containerregistry">https://github.com/google/go-containerregistry</a></p><p>关于代码中镜像清单类型可以参考文档：</p><ul><li><a href="https://distribution.github.io/distribution/spec/manifest-v2-2/">https://distribution.github.io/distribution/spec/manifest-v2-2/</a></li></ul><p>image和index模式 仅仅只是格式不同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/name&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/go-containerregistry/pkg/v1/remote&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseImage</span><span class="params">(image <span class="type">string</span>, options ...name.Option)</span></span> &#123;</span><br><span class="line">ref, err := name.ParseReference(image, options...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">des, err := remote.Get(ref) <span class="comment">// 镜像描述信息</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(des.MediaType)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> des.MediaType.IsImage() &#123;</span><br><span class="line">img, _ := des.Image()</span><br><span class="line">conf, _ := img.ConfigFile()</span><br><span class="line">fmt.Println(conf.OS, conf.Architecture, conf.Config.Entrypoint, conf.Config.Cmd)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> des.MediaType.IsIndex() &#123;</span><br><span class="line">index, err := des.ImageIndex()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">mf, err := index.IndexManifest()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> mf.Manifests &#123;</span><br><span class="line">img, err := index.Image(d.Digest)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">conf, err := img.ConfigFile()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(conf.OS, <span class="string">&quot;/&quot;</span>, conf.Architecture, <span class="string">&quot;:&quot;</span>, conf.Config.Entrypoint, conf.Config.Cmd) <span class="comment">// linux amd64 [] [/bin/sh]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// application/vnd.docker.distribution.manifest.v2+json</span></span><br><span class="line"><span class="comment">//img := &quot;192.168.34.172:5000/alpine:3.18&quot;</span></span><br><span class="line"><span class="comment">//parseImage(imag, name.Insecure)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// application/vnd.docker.distribution.manifest.list.v2+json</span></span><br><span class="line">img := <span class="string">&quot;docker.io/alpine:3.18&quot;</span></span><br><span class="line">parseImage(img)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="containerd和cri功能模拟开发"><a href="#containerd和cri功能模拟开发" class="headerlink" title="containerd和cri功能模拟开发"></a>containerd和cri功能模拟开发</h2><p>准备工作：</p><ul><li>准备一个centos7系统，安装containerd和 go1.20+环境，不要安装docker</li></ul><h3 id="安装containerd和crictl客户端工具"><a href="#安装containerd和crictl客户端工具" class="headerlink" title="安装containerd和crictl客户端工具"></a>安装containerd和crictl客户端工具</h3><p><a href="https://github.com/containerd/containerd/releases，选择当前最新版本">https://github.com/containerd/containerd/releases，选择当前最新版本</a> 1.7.11</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/containerd/containerd/releases/download/v1.7.11/containerd-1.7.11-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压并将文件夹内所有文件放入环境变量中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交给systemd纳管</span></span><br><span class="line">vim /etc/systemd/system/containerd.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=containerd container runtime</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/containerd/containerd</span><br><span class="line"></span><br><span class="line">Type=notify</span><br><span class="line">Delegate=<span class="built_in">yes</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line">RestartSpec=5</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">TaskMax=infinity</span><br><span class="line">OOMScoreAdjust=-999</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=muti-user.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl start containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line"><span class="comment"># cgroup</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class="line">  SystemdCgroup = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 重启containerd</span></span><br></pre></td></tr></table></figure><p>安装crictl工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.29.0/crictl-v1.29.0-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf crictl-v1.29.0-linux-amd64.tar.gz -C /usr/local/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/crictl.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">runtime-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">image-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">timeout: 10</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="cri接口初步调用"><a href="#cri接口初步调用" class="headerlink" title="cri接口初步调用"></a>cri接口初步调用</h3><p>cri相关接口的定义：<a href="https://github.com/kubernetes/cri-api">https://github.com/kubernetes/cri-api</a></p><p>自己可以写grpc代码调用即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@just ~]<span class="comment"># crictl version</span></span><br><span class="line">Version:  0.1.0</span><br><span class="line">RuntimeName:  containerd</span><br><span class="line">RuntimeVersion:  v1.7.11</span><br><span class="line">RuntimeApiVersion:  v1</span><br></pre></td></tr></table></figure><p>版本是v1，看<a href="https://github.com/kubernetes/cri-api/blob/master/pkg/apis/runtime/v1/api.proto">https://github.com/kubernetes/cri-api/blob/master/pkg/apis/runtime/v1/api.proto</a></p><p>安装两个依赖：</p><ul><li>go get google.golang.org/grpc</li><li>go get k8s.io/cri-api</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line">v1 <span class="string">&quot;k8s.io/cri-api/pkg/apis/runtime/v1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">gopts := []grpc.DialOption&#123;</span><br><span class="line">grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">&#125;</span><br><span class="line">addr := <span class="string">&quot;unix:///run/containerd/containerd.sock&quot;</span></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)</span><br><span class="line">defer cancel()</span><br><span class="line">conn, err := grpc.DialContext(ctx, addr, gopts...)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">defer conn.Close()</span><br><span class="line"></span><br><span class="line">req := &amp;v1.VersionRequest&#123;&#125;</span><br><span class="line">rsp := &amp;v1.VersionResponse&#123;&#125;</span><br><span class="line">err = conn.Invoke(ctx, <span class="string">&quot;/runtime.v1.RuntimeService/Version&quot;</span>, req, rsp)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(rsp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="crictl客户端开发"><a href="#crictl客户端开发" class="headerlink" title="crictl客户端开发"></a>crictl客户端开发</h3><h4 id="version接口"><a href="#version接口" class="headerlink" title="version接口"></a>version接口</h4><p>部分代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">v1 <span class="string">&quot;k8s.io/cri-api/pkg/apis/runtime/v1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> versionCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;version&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(c *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">req := &amp;v1.VersionRequest&#123;&#125;</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="number">3</span>)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">runtimeService := v1.NewRuntimeServiceClient(grpcClient)</span><br><span class="line">rsp, err := runtimeService.Version(ctx, req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Version:&quot;</span>, rsp.Version)</span><br><span class="line">fmt.Println(<span class="string">&quot;RuntimeName:&quot;</span>, rsp.RuntimeName)</span><br><span class="line">fmt.Println(<span class="string">&quot;RuntimeVersion:&quot;</span>, rsp.RuntimeVersion)</span><br><span class="line">fmt.Println(<span class="string">&quot;RuntimeApiVersion:&quot;</span>, rsp.RuntimeApiVersion)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312231558410.png" alt=""></p><p>实现了类似的效果</p><h4 id="打印镜像列表"><a href="#打印镜像列表" class="headerlink" title="打印镜像列表"></a>打印镜像列表</h4><p>部分代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/olekukonko/tablewriter&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">v1 <span class="string">&quot;k8s.io/cri-api/pkg/apis/runtime/v1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gorunc/utils&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 镜像相关的处理</span></span><br><span class="line"><span class="keyword">var</span> imagesCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;images&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="number">3</span>)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">req := &amp;v1.ListImagesRequest&#123;&#125;</span><br><span class="line">rsp, err := NewImageService().ListImages(ctx, req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table := tablewriter.NewWriter(os.Stdout)</span><br><span class="line">table.SetHeader([]<span class="type">string</span>&#123;<span class="string">&quot;镜像&quot;</span>, <span class="string">&quot;标签&quot;</span>, <span class="string">&quot;ID&quot;</span>, <span class="string">&quot;大小&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> _, img := <span class="keyword">range</span> rsp.GetImages() &#123;</span><br><span class="line">imageName, _ := utils.ParseRepoDigest(img.RepoDigests)</span><br><span class="line">repoTag := utils.ParseRepoTag(img.RepoTags, imageName)[<span class="number">0</span>] <span class="comment">// 取到镜像名和标签</span></span><br><span class="line">row := []<span class="type">string</span>&#123;imageName, repoTag[<span class="number">1</span>], utils.ParseImageID(img.Id), utils.ParseSize(img.Size_)&#125;</span><br><span class="line">table.Append(row)</span><br><span class="line">&#125;</span><br><span class="line">utils.SetTable(table)   </span><br><span class="line">table.Render()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312231630438.png" alt=""></p><h4 id="创建pod"><a href="#创建pod" class="headerlink" title="创建pod"></a>创建pod</h4><h5 id="使用命令行创建"><a href="#使用命令行创建" class="headerlink" title="使用命令行创建"></a>使用命令行创建</h5><p>使用crictl工具创建，crictl 时面向k8s接口的，并非面向普通容器用户（如docker），所以crictl工具使用的是配置文件的方式来创建POD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crictl run container-config.json pod-config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># contianer-config.json是容器配置文件</span></span><br><span class="line"><span class="comment"># pod-config.json 是pod沙箱配置文件 </span></span><br></pre></td></tr></table></figure><p>具体配置文件查看api定义：<a href="https://github.com/kubernetes/cri-api/blob/master/pkg/apis/runtime/v1/api.pb.go#L1343">https://github.com/kubernetes/cri-api/blob/master/pkg/apis/runtime/v1/api.pb.go#L1343</a></p><ul><li>PodSandboxConfig</li><li>ContainerConfig</li></ul><p>Sandbox.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysandbox</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">log_directory:</span> <span class="string">&quot;/root/temp&quot;</span></span><br><span class="line"><span class="attr">port_mappings:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">container_port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Container.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myngx</span></span><br><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker.io/nginx:1.18-alpine</span></span><br><span class="line"><span class="attr">log_path:</span> <span class="string">ngx.log</span></span><br></pre></td></tr></table></figure><p>想要启动pod需要cni插件的</p><p>直接下载cni plugins   <a href="https://github.com/containernetworking/plugins">https://github.com/containernetworking/plugins</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/cni/bin</span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/cni/net.d</span><br><span class="line"></span><br><span class="line">tar -zxvf cni-plugins-linux-amd64-v1.4.0.tgz -C /opt/cni/bin/</span><br><span class="line"><span class="comment"># 默认cni的bin路径指向的就是这个目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看containerd的配置。SystemdCgroup 需要改为false</span></span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure><p>需要一个cni的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;/etc/cni/net.d/10-mynet.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;cniVersion&quot;: &quot;0.2.0&quot;,</span></span><br><span class="line"><span class="string">&quot;name&quot;: &quot;mynet&quot;,</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;bridge&quot;,</span></span><br><span class="line"><span class="string">&quot;bridge&quot;: &quot;cni0&quot;,</span></span><br><span class="line"><span class="string">&quot;isGateway&quot;: true,</span></span><br><span class="line"><span class="string">&quot;ipMasq&quot;: true,</span></span><br><span class="line"><span class="string">&quot;ipam&quot;: &#123;</span></span><br><span class="line"><span class="string">&quot;type&quot;: &quot;host-local&quot;,</span></span><br><span class="line"><span class="string">&quot;subnet&quot;: &quot;10.22.0.0/16&quot;,</span></span><br><span class="line"><span class="string">&quot;routes&quot;: [</span></span><br><span class="line"><span class="string">&#123; &quot;dst&quot;: &quot;0.0.0.0/0&quot; &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure><p>crictl run ngx.yaml mysandbox.yaml </p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202312242028638.png" alt=""></p><h5 id="代码创建pod"><a href="#代码创建pod" class="headerlink" title="代码创建pod"></a>代码创建pod</h5><p>创建单pod：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line"><span class="string">&quot;gorunc/utils&quot;</span></span><br><span class="line">v1 <span class="string">&quot;k8s.io/cri-api/pkg/apis/runtime/v1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> podsCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;runp&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;请指定POD配置文件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">config := &amp;v1.PodSandboxConfig&#123;&#125;</span><br><span class="line">err := utils.YamlFile2Struct(args[<span class="number">0</span>], config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="number">20</span>)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">req := &amp;v1.RunPodSandboxRequest&#123;Config: config&#125;</span><br><span class="line">rsp, err := NewRuntimeService().RunPodSandbox(ctx, req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(rsp.PodSandboxId)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建容器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line"><span class="string">&quot;gorunc/utils&quot;</span></span><br><span class="line">v1 <span class="string">&quot;k8s.io/cri-api/pkg/apis/runtime/v1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> containersCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:     <span class="string">&quot;run&quot;</span>, <span class="comment">//单创建 pod</span></span><br><span class="line">Example: <span class="string">&quot;run podid container-config.yaml  pod-config.yaml&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(c *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">3</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;参数不完整&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">podId, containConfig, podConfig := <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">// 一共三个参数。</span></span><br><span class="line">podId = args[<span class="number">0</span>]</span><br><span class="line">containConfig = args[<span class="number">1</span>]</span><br><span class="line">podConfig = args[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">config := &amp;v1.ContainerConfig&#123;&#125;</span><br><span class="line">err := utils.YamlFile2Struct(containConfig, config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second*<span class="number">10</span>)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="comment">//POD sandbox对应的配置对象</span></span><br><span class="line">pConfig := &amp;v1.PodSandboxConfig&#123;&#125;</span><br><span class="line">err = utils.YamlFile2Struct(podConfig, pConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">req := &amp;v1.CreateContainerRequest&#123;</span><br><span class="line">PodSandboxId:  podId,   <span class="comment">//必须要传</span></span><br><span class="line">Config:        config,  <span class="comment">//容器配置</span></span><br><span class="line">SandboxConfig: pConfig, <span class="comment">//pod配置 。必须要传</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rsp, err := NewRuntimeService().</span><br><span class="line">CreateContainer(ctx, req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(rsp.ContainerId) <span class="comment">//打印容器ID</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="实现容器列表加载"><a href="#实现容器列表加载" class="headerlink" title="实现容器列表加载"></a>实现容器列表加载</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器列表   类似docker  ps</span></span><br><span class="line"><span class="keyword">var</span> containersListCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:     <span class="string">&quot;ps&quot;</span>, <span class="comment">//打印容器</span></span><br><span class="line">Example: <span class="string">&quot;ps&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(c *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">listReq := &amp;v1.ListContainersRequest&#123;&#125;</span><br><span class="line">rsp, err := NewRuntimeService().ListContainers(context.Background(), listReq)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">table := tablewriter.NewWriter(os.Stdout)</span><br><span class="line">table.SetHeader([]<span class="type">string</span>&#123;<span class="string">&quot;ID&quot;</span>, <span class="string">&quot;名称&quot;</span>, <span class="string">&quot;镜像&quot;</span>, <span class="string">&quot;状态&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> rsp.GetContainers() &#123;</span><br><span class="line">row := []<span class="type">string</span>&#123;utils.ParseContainerID(c.Id), c.Metadata.Name, c.Image.GetImage(),</span><br><span class="line">strings.Replace(c.State.String(), <span class="string">&quot;CONTAINER_&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>)&#125;</span><br><span class="line">table.Append(row)</span><br><span class="line">&#125;</span><br><span class="line">utils.SetTable(table)</span><br><span class="line">table.Render()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现容器exec功能"><a href="#实现容器exec功能" class="headerlink" title="实现容器exec功能"></a>实现容器exec功能</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 容器 exec</span></span><br><span class="line"><span class="keyword">var</span> containersExecCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:     <span class="string">&quot;exec&quot;</span>, <span class="comment">//打印容器</span></span><br><span class="line">Example: <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(c *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">2</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;error params&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">execReq := &amp;v1.ExecRequest&#123;</span><br><span class="line">Cmd:         args[<span class="number">1</span>:],</span><br><span class="line">Stdin:       <span class="literal">true</span>,</span><br><span class="line">Stdout:      <span class="literal">true</span>,</span><br><span class="line">Stderr:      !TTY, <span class="comment">// TTY的时候 ，这个值必须是  false</span></span><br><span class="line">Tty:         TTY,</span><br><span class="line">ContainerId: args[<span class="number">0</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execRsp, err := NewRuntimeService().Exec(context.Background(), execReq)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">URL, err := url.Parse(execRsp.Url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">exec, err := remoteclient.NewSPDYExecutor(&amp;restclient.Config&#123;TLSClientConfig: restclient.TLSClientConfig&#123;Insecure: <span class="literal">true</span>&#125;&#125;, <span class="string">&quot;POST&quot;</span>, URL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !TTY &#123; <span class="comment">//非 终端模式</span></span><br><span class="line">streamOptions := remoteclient.StreamOptions&#123;</span><br><span class="line">Stdout: os.Stdout,</span><br><span class="line">Stderr: os.Stderr,</span><br><span class="line">Stdin:  os.Stdin,</span><br><span class="line">&#125;</span><br><span class="line">err = exec.Stream(streamOptions)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是终端模式</span></span><br><span class="line">stdin, stdout, stderr := mobyterm.StdStreams()</span><br><span class="line">streamOptions := remoteclient.StreamOptions&#123;</span><br><span class="line">Stdout: stdout,</span><br><span class="line">Stderr: stderr,</span><br><span class="line">Stdin:  stdin,</span><br><span class="line">Tty:    TTY,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t := term.TTY&#123;</span><br><span class="line">In:  stdin,</span><br><span class="line">Out: stdout,</span><br><span class="line">Raw: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">streamOptions.TerminalSizeQueue = t.MonitorSize(t.GetSize())</span><br><span class="line">err = t.Safe(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> exec.Stream(streamOptions)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;k8s容器运行时&quot;&gt;&lt;a href=&quot;#k8s容器运行时&quot; class=&quot;headerlink&quot; title=&quot;k8s容器运行时&quot;&gt;&lt;/a&gt;k8s容器运行时&lt;/h1&gt;&lt;h2 id=&quot;k8s容器运行时的发展脉络&quot;&gt;&lt;a href=&quot;#k8s容器运行时的发展脉络&quot; c</summary>
      
    
    
    
    <category term="runc" scheme="https://setcreed.github.io/categories/runc/"/>
    
    
    <category term="k8s" scheme="https://setcreed.github.io/tags/k8s/"/>
    
    <category term="runc" scheme="https://setcreed.github.io/tags/runc/"/>
    
  </entry>
  
  <entry>
    <title>家用服务器搭建使用指南</title>
    <link href="https://setcreed.github.io/posts/afe9ffa9/"/>
    <id>https://setcreed.github.io/posts/afe9ffa9/</id>
    <published>2023-11-03T14:02:36.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>现在有很多厂商推出自己的云服务器，我也用过不少，其中以阿里云、腾讯云、华为云的服务器较为好用，但是也非常贵。</p><p>我主要在云服务器上部署一些k8s集群，学习云原生用。但是我又不是时时刻刻在用，虽然可以按时付费，但总归是不方便的，所以我萌生了自己组装家用服务器的想法。</p><p>首先既然是家用服务器，那就要考虑经济性和噪音等方面的因素，所以我在网上找了一些资料，逛了一下图吧，综合一下，搞出如下配置：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242109148.png" alt=""></p><p>总共不到两千。</p><h2 id="安装PVE"><a href="#安装PVE" class="headerlink" title="安装PVE"></a>安装PVE</h2><p>考虑使用虚拟化技术，分出多个节点来使用。主要两种选择：</p><ul><li>Proxmox VE。<a href="https://pve.proxmox.com/">https://pve.proxmox.com/</a></li><li>VMware vSphere  <a href="https://docs.vmware.com/cn/VMware-vSphere/index.html">https://docs.vmware.com/cn/VMware-vSphere/index.html</a></li></ul><p>综合下来选择了 PVE（Proxmox VE）。 网上有很多它们之间的比较区别的文章</p><p>接下来我就要开始安装PVE了，其实也很简单，PVE就是基于debian之上使用KVM等虚拟化技术构建的系统，所以就和安装普通的linux系统一样。</p><p>首先下载镜像：<a href="https://www.proxmox.com/en/downloads">https://www.proxmox.com/en/downloads</a>     下载最新的镜像就好了。</p><p>这里推荐使用Ventoy制作U盘启动盘 <a href="https://www.ventoy.net/cn/">https://www.ventoy.net/cn/</a></p><p>安装过程就很稀松平常了。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li><p>安装PVE需要主板BIOS开启虚拟化支持，网上搜一下就知道了</p></li><li><p>安装过程中可能会出现卡住的现象，如果卡住的时间很长，直接强制重启。在启动的时候按e进入grub引导，在 <code>linux /boot/vmxxxxx ro</code> 后面加入 <code>quiet splash nomodeset</code> ，然后F10启动，应该就会进入安装界面</p><ul><li>这是因为 显卡驱动问题导致的，很多独立显卡驱动linux是有问题的，所以我们干脆禁用</li><li>nomodeset 就表示 系统启动过程中，暂时不运行图像驱动程序</li></ul></li><li><p>安装完成之后，如果独立显卡有问题 就需要修改下面参数：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub</span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_TIMEOUT_STYLE=hidden</span><br><span class="line">GRUB_TIMEOUT=10</span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash nomodest&quot;  # splash后加上nomodeset</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存</span></span><br><span class="line">update-grub # 更新引导</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样重启就好了</span></span><br></pre></td></tr></table></figure><h2 id="使用PVE"><a href="#使用PVE" class="headerlink" title="使用PVE"></a>使用PVE</h2><p>pve的web页面</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242141036.png" alt=""></p><h3 id="安装pve-tools"><a href="#安装pve-tools" class="headerlink" title="安装pve-tools"></a>安装pve-tools</h3><p>为了更好的使用pve，我们可以使用pve-tools工具对pve做一些个性化修改。</p><p><a href="https://github.com/ivanhao/pvetools">https://github.com/ivanhao/pvetools</a> 根据文档操作即可。</p><h3 id="删除pve的local-lvm"><a href="#删除pve的local-lvm" class="headerlink" title="删除pve的local-lvm"></a>删除pve的local-lvm</h3><p>参考文章：<a href="https://foxi.buduanwang.vip/virtualization/1434.html/">https://foxi.buduanwang.vip/virtualization/1434.html/</a></p><p>这里就不详细叙说了</p><h3 id="制作ubuntu模版"><a href="#制作ubuntu模版" class="headerlink" title="制作ubuntu模版"></a>制作ubuntu模版</h3><p>这里使用cloud-images来安装ubuntu，可以使用到cloud-init，能非常方便的修改网络ip等。</p><p>下载好 ubuntu的镜像</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242150080.png" alt=""></p><p>然后创建虚拟机</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242151088.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242152216.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242152228.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242153242.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242154569.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242156809.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242156182.png" alt=""></p><p>创建好虚拟机，回到pve终端</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242158294.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qm disk import 999 ubuntu-22.04-server-cloudimg-amd64.img local --format qcow2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将镜像转为 qcow2格式的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">999 是虚拟机的<span class="built_in">id</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span> 是存储的名称</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242200456.png" alt=""></p><p>使用磁盘：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242200100.png" alt=""></p><p>添加串口、cloud-init设备</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242202829.png" alt=""></p><p>在cloud-init中，修改相应的信息，修改完 一定要点重生成映像</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242203048.png" alt=""></p><p>在选项中 把引导顺序改一下，磁盘放在第一位：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242205142.png" alt=""></p><p>然后直接启动，安装你想要安装的软件，做成模版</p><p>我的初始化安装如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置时区</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置仓库源</span></span><br><span class="line">sed -i &#x27;s/http:\/\/security.ubuntu.com/https:\/\/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span><br><span class="line">sed -i &#x27;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装常用软件</span></span><br><span class="line">apt update &amp;&amp; apt upgrade -y</span><br><span class="line"></span><br><span class="line">apt install vim neofetch curl wget htop qemu-guest-agent dnsutils net-tools bash-completion -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改SSH配置</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p>之后关机，转化成模版：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242207002.png" alt=""></p><p>后续就可以基于模版快速创建虚拟机节点了</p><h2 id="网络方案"><a href="#网络方案" class="headerlink" title="网络方案"></a>网络方案</h2><p>方案简图：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242212255.png" alt=""></p><ul><li>使用openwrt作为pve旁路由，pve上所有节点虚拟机的网关都指向openwrt的地址</li><li>使用tailscale 做 full mesh VPN，效果就是 只要在我的电脑上安装了tailscale，就能和pve上的虚拟机通信，原理就是所有安装了tailscale的电脑都被打通了（相当于一个隧道，是一个wireguard）</li></ul><h3 id="安装openwrt"><a href="#安装openwrt" class="headerlink" title="安装openwrt"></a>安装openwrt</h3><p>推荐使用别人封装好的镜像，这样就不需要自己手动加各种插件了</p><p><a href="https://lidrive.vip/OpenWrt">https://lidrive.vip/OpenWrt</a></p><p>下载链接：<strong><a href="https://lidrive.vip/d/OpenWrt/OpenWrt%20X86/6.1%E5%86%85%E6%A0%B8/%E7%B2%BE%E5%93%81%E5%B0%8F%E5%8C%85/openwrt6.1-jpxb-20231014-x86-64-generic-squashfs-combined-efi.img.gz?sign=A8AAu7OttEc0K2biRZTzhnBxfTBvwUCVZulCK_Ct4jk=:0">https://lidrive.vip/d/OpenWrt/OpenWrt%20X86/6.1%E5%86%85%E6%A0%B8/%E7%B2%BE%E5%93%81%E5%B0%8F%E5%8C%85/openwrt6.1-jpxb-20231014-x86-64-generic-squashfs-combined-efi.img.gz?sign=A8AAu7OttEc0K2biRZTzhnBxfTBvwUCVZulCK_Ct4jk=:0</a></strong></p><p>安装openwrt就和上面安装ubuntu步骤类似</p><p>附上我安装的openwrt的信息：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242224964.png" alt=""></p><p>安装好之后 按照提示修改你的ip地址，然后进入web页面：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242225721.png" alt=""></p><p>然后：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242227972.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242228503.png" alt=""></p><p>设置完，网络应该就通了</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242230484.png" alt=""></p><p>openwrt安装了一些可以插件，可以支持科学上网，这样openwrt作为pve其他节点的网关，可以使得网络会更加通畅</p><h3 id="安装tailscale"><a href="#安装tailscale" class="headerlink" title="安装tailscale"></a>安装tailscale</h3><h4 id="在openwrt上安装tailscale"><a href="#在openwrt上安装tailscale" class="headerlink" title="在openwrt上安装tailscale"></a>在openwrt上安装tailscale</h4><p>打开终端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install tailscale iptables-nft</span><br><span class="line">service tailscale restart</span><br><span class="line"></span><br><span class="line">tailscale up --accept-routes=true --accept-dns=false --advertise-routes=192.168.12.0/24</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时会跳出一个url，去浏览器登录就行了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启路由--accept-routes=<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭下发dns--accept-dns=<span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定本地局域网段路由转发--advertise-routes=192.168.12.0/24</span></span><br></pre></td></tr></table></figure><p>然后在openwrt的web上修改</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242303486.png" alt=""></p><p>添加新接口，这里我已经添加好了一个接口 tailscale</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242306427.png" alt=""></p><p>接着修改tailscale接口，这里的ipv4地址填写tailscale上面给的地址</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242307144.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242309034.png" alt=""></p><p>点击防火墙设置，这里防火墙自己新建一个</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242311517.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242317021.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242317537.png" alt=""></p><p>到此就基本完成了</p><h4 id="在其他设备上安装tailscale"><a href="#在其他设备上安装tailscale" class="headerlink" title="在其他设备上安装tailscale"></a>在其他设备上安装tailscale</h4><p>tailscale官方文档：<a href="https://tailscale.com/kb/">https://tailscale.com/kb/</a></p><p>在一台windows上安装tailscale，wifi使用手机热点，模拟不在同一网段下</p><p>安装步骤很快就可以安装完成，然后在<a href="https://login.tailscale.com/admin/machines">https://login.tailscale.com/admin/machines</a> 这个页面上就可以看到你安装了taiscale的设备了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">常用的tailscale命令</span></span><br><span class="line">tailscale status  # 可以看到是否直连</span><br><span class="line">tailscale ping 100.64.1.242 # 看一下延迟</span><br></pre></td></tr></table></figure><p>简单使用一下，发现延迟比较高，这我不能忍啊，得想一个办法解决延迟问题。</p><h4 id="tailscale的开源解决方案"><a href="#tailscale的开源解决方案" class="headerlink" title="tailscale的开源解决方案"></a>tailscale的开源解决方案</h4><p>tailscale的控制服务器是不开源的，免费用户限制100台节点，一般也就够了</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242232441.png" alt=""></p><p>目前有一款开源的实现叫 <a href="https://github.com/juanfont/headscale">Headscale</a>，这也是唯一的一款。</p><p>headscale的部署网上有很多方案了，这里就不多说了</p><h4 id="部署私有DERP中继服务"><a href="#部署私有DERP中继服务" class="headerlink" title="部署私有DERP中继服务"></a>部署私有DERP中继服务</h4><p>Tailscale 官方内置了很多 DERP 服务器，分步在全球各地，<strong>惟独不包含中国大陆</strong>，原因你懂得。这就导致了一旦流量通过 DERP 服务器进行中继，延时就会非常高。而且官方提供的 DERP 服务器是万人骑，存在安全隐患。</p><p>为了实现低延迟、高安全性，我们可以参考 <a href="https://tailscale.com/kb/1118/custom-derp-servers/">Tailscale 官方文档</a>自建私有的 DERP 服务器。有两种部署模式，一种是基于域名，另外一种不需要域名，可以直接使用 IP，不过需要一点黑科技。我们先来看最简单的使用域名的方案。</p><p>参考文档：<a href="https://icloudnative.io/posts/custom-derp-servers/#derp">https://icloudnative.io/posts/custom-derp-servers/#derp</a></p><h4 id="使用国内的一些方案"><a href="#使用国内的一些方案" class="headerlink" title="使用国内的一些方案"></a>使用国内的一些方案</h4><p>上面的一些方案都太折腾了，又没有一些比较好的方案呢。</p><p>我翻遍全网，还真找到了一个国内的方案：xEdge，这是一个国内大佬兼容tailscale的方案，中继节点是部署在国内的，所以延迟这一块完全不成问题。</p><p>文档：<a href="https://xedge.cc/doc/quickstart">https://xedge.cc/doc/quickstart</a></p><p>使用相当简单，在之前我们安装的openwrt上执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale up --accept-dns=false --advertise-routes=192.168.34.0/24 --login-server=https://login.xedge.cc</span><br></pre></td></tr></table></figure><p>然后会有一个url地址，用浏览器打开，微信/GitHub注册登录即可</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242339141.png" alt=""></p><p>其他设备使用参考文档</p><p>以上就是我目前使用家用服务器的一些方案</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>pve使用指南：<ul><li><a href="https://thiscute.world/posts/proxmox-virtual-environment-instruction">https://thiscute.world/posts/proxmox-virtual-environment-instruction</a></li><li><a href="https://foxi.buduanwang.vip/virtualization/1434.html/">https://foxi.buduanwang.vip/virtualization/1434.html/</a></li></ul></li><li>pve换源<ul><li><a href="https://mirrors.ustc.edu.cn/help/proxmox.html">https://mirrors.ustc.edu.cn/help/proxmox.html</a></li></ul></li><li><p>taiscale部署私有DERP中继服务</p><ul><li><a href="https://icloudnative.io/posts/custom-derp-servers/">https://icloudnative.io/posts/custom-derp-servers/</a></li></ul></li><li><p>tailscale原理相关介绍</p><ul><li><a href="https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/">https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/</a></li><li><a href="https://arthurchiao.art/blog/how-nat-traversal-works-zh/">https://arthurchiao.art/blog/how-nat-traversal-works-zh/</a></li><li><a href="https://arthurchiao.art/blog/nat-zh/">https://arthurchiao.art/blog/nat-zh/</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;现在有很多厂商推出自己的云服务器，我也用过不少，其中以阿里云、腾讯云、华为云的服务器较为好用，但是也非常贵。&lt;/p&gt;
&lt;p&gt;我主要在云服务器</summary>
      
    
    
    
    <category term="pve" scheme="https://setcreed.github.io/categories/pve/"/>
    
    
    <category term="pve" scheme="https://setcreed.github.io/tags/pve/"/>
    
  </entry>
  
  <entry>
    <title>k8s-informer深入学习</title>
    <link href="https://setcreed.github.io/posts/7ac9a020/"/>
    <id>https://setcreed.github.io/posts/7ac9a020/</id>
    <published>2022-12-01T09:56:52.000Z</published>
    <updated>2024-03-04T14:47:21.718Z</updated>
    
    <content type="html"><![CDATA[<p>informer</p><p>基本点：</p><ul><li><p>FIFO：先入先出队列，拥有队列的基本方法（add、update、delete、list、pop、close等）</p></li><li><p>Delta：存储对象的行为（变化）类型：Added、Updated、Deleted、Sync</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;informer&lt;/p&gt;
&lt;p&gt;基本点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FIFO：先入先出队列，拥有队列的基本方法（add、update、delete、list、pop、close等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delta：存储对象的行为（变化）类型：Added、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go刷题基础篇</title>
    <link href="https://setcreed.github.io/posts/89a3df7f/"/>
    <id>https://setcreed.github.io/posts/89a3df7f/</id>
    <published>2022-09-18T22:21:26.000Z</published>
    <updated>2024-03-04T14:47:21.718Z</updated>
    
    <content type="html"><![CDATA[<p>反转int切片的两种写法</p><p>方法1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    ret := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(ints))</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(ints) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        ret[<span class="built_in">len</span>(ints)-i<span class="number">-1</span>] = ints[i]</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ret)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(ints)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">        ints[i], ints[j] = ints[j], ints[i]</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ints)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计切片中 两个数之和=给定值的组合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []<span class="type">int</span>&#123;<span class="number">4</span>, <span class="number">18</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">42</span>, <span class="number">60</span>, <span class="number">12</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">    hash := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>) <span class="comment">//key 存具体数字， value存索引</span></span><br><span class="line">    ret := [][<span class="number">2</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    sum := <span class="number">40</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := hash[sum-arr[i]]; ok &#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, [<span class="number">2</span>]<span class="type">int</span>&#123;hash[sum-arr[i]], i&#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash[arr[i]] = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> ret &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d+%d=40\n&quot;</span>, arr[item[<span class="number">0</span>]], arr[item[<span class="number">1</span>]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;反转int切片的两种写法&lt;/p&gt;
&lt;p&gt;方法1：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>istio基础</title>
    <link href="https://setcreed.github.io/posts/d36c6e2c/"/>
    <id>https://setcreed.github.io/posts/d36c6e2c/</id>
    <published>2022-08-04T14:42:19.000Z</published>
    <updated>2024-03-04T14:47:21.718Z</updated>
    
    <content type="html"><![CDATA[<p>istio基础</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;istio基础&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rust基础</title>
    <link href="https://setcreed.github.io/posts/e385a1/"/>
    <id>https://setcreed.github.io/posts/e385a1/</id>
    <published>2022-07-26T00:01:34.000Z</published>
    <updated>2024-03-04T14:47:21.722Z</updated>
    
    <content type="html"><![CDATA[<p>简单跑起来</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;hi, hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rustc main.rs 编译</p><p>使用cargo创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new mypro</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">myname</span> = <span class="string">&quot;cwz&quot;</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, myname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单跑起来&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go刷题</title>
    <link href="https://setcreed.github.io/posts/419e63b4/"/>
    <id>https://setcreed.github.io/posts/419e63b4/</id>
    <published>2022-07-18T23:53:36.000Z</published>
    <updated>2024-03-04T14:47:21.718Z</updated>
    
    <content type="html"><![CDATA[<p>go刷题专场</p><ul><li><a href="https://setcreed.github.io/posts/9a889b79/">专场一</a></li></ul><h2 id="多协程执行后使用channel收集结果"><a href="#多协程执行后使用channel收集结果" class="headerlink" title="多协程执行后使用channel收集结果"></a>多协程执行后使用channel收集结果</h2><p>low逼写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">(index <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    num := <span class="number">5</span></span><br><span class="line">    retCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="comment">//wg := sync.WaitGroup&#123;&#125;</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">        <span class="comment">//wg.Add(1)</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(param <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">//defer wg.Done()</span></span><br><span class="line">            retCh &lt;- job(param)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//wg.Wait()</span></span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> retCh &#123;</span><br><span class="line">        count++</span><br><span class="line">        fmt.Println(<span class="string">&quot;收到结果：&quot;</span>, item)</span><br><span class="line">        <span class="keyword">if</span> count == num &#123;</span><br><span class="line">            <span class="built_in">close</span>(retCh)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end := time.Since(start)</span><br><span class="line">    fmt.Println(<span class="string">&quot;耗时：&quot;</span>, end.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优雅版本：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">(index <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    num := <span class="number">5</span></span><br><span class="line">    retCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(param <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            retCh &lt;- job(param)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="built_in">close</span>(retCh)</span><br><span class="line">        wg.Wait()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> retCh &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;收到结果：&quot;</span>, item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end := time.Since(start)</span><br><span class="line">    fmt.Println(<span class="string">&quot;耗时：&quot;</span>, end.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现一个简易的切片迭代器"><a href="#实现一个简易的切片迭代器" class="headerlink" title="实现一个简易的切片迭代器"></a>实现一个简易的切片迭代器</h2><p>简易版：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Iterator <span class="keyword">struct</span> &#123;</span><br><span class="line">    data  []<span class="type">int</span></span><br><span class="line">    index <span class="type">int</span> <span class="comment">// 索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(data []<span class="type">int</span>)</span></span> *Iterator &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Iterator&#123;data: data&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Iterator)</span></span> HasNext() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i.data == <span class="literal">nil</span> || <span class="built_in">len</span>(i.data) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i.index &lt; <span class="built_in">len</span>(i.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Iterator)</span></span> Next() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i.index++</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> i.data[i.index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    iter := New(ints)</span><br><span class="line">    <span class="keyword">for</span> iter.HasNext() &#123;</span><br><span class="line">        fmt.Println(iter.Next())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持多类型和封装的切片迭代器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Iterator <span class="keyword">struct</span> &#123;</span><br><span class="line">    index <span class="type">int</span></span><br><span class="line">    <span class="built_in">len</span>   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Iterator)</span></span> HasNext() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i.index &lt; i.<span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IntIterator <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Iterator</span><br><span class="line">    data []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IterForInt</span><span class="params">(data []<span class="type">int</span>)</span></span> *IntIterator &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;IntIterator&#123;data: data, Iterator: &amp;Iterator&#123;<span class="built_in">len</span>: <span class="built_in">len</span>(data)&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *IntIterator)</span></span> Next() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i.index++</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> i.data[i.index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StringIterator <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Iterator</span><br><span class="line">    data []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IterForString</span><span class="params">(data []<span class="type">string</span>)</span></span> *StringIterator &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;StringIterator&#123;data: data, Iterator: &amp;Iterator&#123;<span class="built_in">len</span>: <span class="built_in">len</span>(data)&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *StringIterator)</span></span> Next() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i.index++</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> i.data[i.index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    iter := IterForInt(ints)</span><br><span class="line">    <span class="keyword">for</span> iter.HasNext() &#123;</span><br><span class="line">        fmt.Println(iter.Next())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    strs := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">    iterStr := IterForString(strs)</span><br><span class="line">    <span class="keyword">for</span> iterStr.HasNext() &#123;</span><br><span class="line">        fmt.Println(iterStr.Next())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟js的promise写法"><a href="#模拟js的promise写法" class="headerlink" title="模拟js的promise写法"></a>模拟js的promise写法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resolve <span class="function"><span class="keyword">func</span><span class="params">(rsp <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reject <span class="function"><span class="keyword">func</span><span class="params">(err <span class="type">error</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PromiseFunc <span class="function"><span class="keyword">func</span><span class="params">(resolve Resolve, reject Reject)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Promise <span class="keyword">struct</span> &#123;</span><br><span class="line">    f       PromiseFunc</span><br><span class="line">    resolve Resolve</span><br><span class="line">    reject  Reject</span><br><span class="line">    wg      sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPromise</span><span class="params">(f PromiseFunc)</span></span> *Promise &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Promise&#123;f: f&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Then(resolve Resolve) *Promise &#123;</span><br><span class="line">    p.resolve = resolve</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Catch(reject Reject) *Promise &#123;</span><br><span class="line">    p.reject = reject</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Done() &#123;</span><br><span class="line">    p.wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> p.wg.Done()</span><br><span class="line">        p.f(p.resolve, p.reject)</span><br><span class="line">    &#125;()</span><br><span class="line">    p.wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    NewPromise(<span class="function"><span class="keyword">func</span><span class="params">(resolve Resolve, reject Reject)</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> time.Now().Unix()%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            resolve(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(fmt.Errorf(<span class="string">&quot;error&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).Then(<span class="function"><span class="keyword">func</span><span class="params">(rsp <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        fmt.Println(rsp)</span><br><span class="line">    &#125;).Catch(<span class="function"><span class="keyword">func</span><span class="params">(err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;).Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持超时控制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resolve <span class="function"><span class="keyword">func</span><span class="params">(rsp <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reject <span class="function"><span class="keyword">func</span><span class="params">(err <span class="type">error</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PromiseFunc <span class="function"><span class="keyword">func</span><span class="params">(resolve Resolve, reject Reject)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PromiseOpt <span class="function"><span class="keyword">func</span><span class="params">(promise *Promise)</span></span></span><br><span class="line"><span class="keyword">type</span> PromiseOpts []PromiseOpt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(prom PromiseOpts)</span></span> apply(p *Promise) &#123;</span><br><span class="line">    <span class="keyword">for</span> _, opt := <span class="keyword">range</span> prom &#123;</span><br><span class="line">        opt(p)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(t time.Duration)</span></span> PromiseOpt &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(promise *Promise)</span></span> &#123;</span><br><span class="line">        promise.timeout = t</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Promise <span class="keyword">struct</span> &#123;</span><br><span class="line">    f       PromiseFunc</span><br><span class="line">    resolve Resolve</span><br><span class="line">    reject  Reject</span><br><span class="line">    wg      sync.WaitGroup</span><br><span class="line">    timeout time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPromise</span><span class="params">(f PromiseFunc)</span></span> *Promise &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Promise&#123;f: f, timeout: time.Second * <span class="number">10</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Then(resolve Resolve) *Promise &#123;</span><br><span class="line">    p.resolve = resolve</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Catch(reject Reject) *Promise &#123;</span><br><span class="line">    p.reject = reject</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Done(opts ...PromiseOpt) &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> e := <span class="built_in">recover</span>(); e != <span class="literal">nil</span> &#123;</span><br><span class="line">            p.reject(fmt.Errorf(e.(<span class="type">string</span>))) <span class="comment">// 这里的panic error不一定是string，这里是随便写写的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    PromiseOpts(opts).apply(p) <span class="comment">// 参数设置</span></span><br><span class="line">    p.wg.Add(<span class="number">1</span>)</span><br><span class="line">    timeoutCtx, _ := context.WithTimeout(context.Background(), p.timeout)</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> p.wg.Done()</span><br><span class="line">        p.f(p.resolve, p.reject)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;()</span><br><span class="line">        p.wg.Wait()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-timeoutCtx.Done():</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;超时&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        fmt.Println(<span class="string">&quot;正常执行&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    NewPromise(<span class="function"><span class="keyword">func</span><span class="params">(resolve Resolve, reject Reject)</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> time.Now().Unix()%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            resolve(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(fmt.Errorf(<span class="string">&quot;error&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).Then(<span class="function"><span class="keyword">func</span><span class="params">(rsp <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        fmt.Println(rsp)</span><br><span class="line">    &#125;).Catch(<span class="function"><span class="keyword">func</span><span class="params">(err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;catch: &quot;</span>, err)</span><br><span class="line">    &#125;).Done(WithTimeout(time.Second * <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用http分块发送实现网页倒计时"><a href="#使用http分块发送实现网页倒计时" class="headerlink" title="使用http分块发送实现网页倒计时"></a>使用http分块发送实现网页倒计时</h2><p>分块传输编码（Chunked transfer encoding）允许http由网页服务器发送给客户端应用（浏览器）的数据可以分成多个部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    UpdateScript = <span class="string">`&lt;script&gt;document.getElementById(&quot;msg&quot;).innerHTML=&#x27;%d&#x27;;&lt;/script&gt;`</span></span><br><span class="line">    Redirect     = <span class="string">`&lt;script&gt;self.location=&#x27;https://setcreed.top&#x27;&lt;/script&gt;`</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        h1 := []<span class="type">byte</span>(<span class="string">&quot;&lt;h1 id=&#x27;msg&#x27;&gt;&lt;/h1&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        writer.Header().Set(<span class="string">&quot;Transfer-Encoding&quot;</span>, <span class="string">&quot;Chunked&quot;</span>)</span><br><span class="line">        writer.Write(h1)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">            writer.Write([]<span class="type">byte</span>(fmt.Sprintf(UpdateScript, i)))</span><br><span class="line">            writer.(http.Flusher).Flush()</span><br><span class="line">            time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        writer.Write([]<span class="type">byte</span>(Redirect))</span><br><span class="line">        writer.(http.Flusher).Flush()</span><br><span class="line">    &#125;)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go中Struct的指针方法和非指针方法到底有啥区别"><a href="#Go中Struct的指针方法和非指针方法到底有啥区别" class="headerlink" title="Go中Struct的指针方法和非指针方法到底有啥区别"></a>Go中Struct的指针方法和非指针方法到底有啥区别</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> Print1() &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;print1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Print2() &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;print2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, User.Print1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, User.Print2)</span><br><span class="line">    u := User&#123;&#125;</span><br><span class="line">    User.Print1(u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ go run method.go</span><br><span class="line"># command-line-arguments</span><br><span class="line">./method.go:19:25: invalid method expression User.Print2 (needs pointer receiver: (*User).Print2)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> Print1() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;u)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;print1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Print2() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, u)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;print2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//fmt.Printf(&quot;%T\n&quot;, User.Print1)</span></span><br><span class="line">    <span class="comment">//fmt.Printf(&quot;%T\n&quot;, (*User).Print2)</span></span><br><span class="line">    u := User&#123;&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;u)</span><br><span class="line">    User.Print1(u)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u2 *User</span><br><span class="line">    (*User).Print2(u2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ go run method.go</span><br><span class="line">0xc000010230</span><br><span class="line">0xc000010240</span><br><span class="line">print1</span><br><span class="line">0x0</span><br><span class="line">print2</span><br></pre></td></tr></table></figure><h2 id="使用channel读取文件时在控制台显示进度"><a href="#使用channel读取文件时在控制台显示进度" class="headerlink" title="使用channel读取文件时在控制台显示进度"></a>使用channel读取文件时在控制台显示进度</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Format1 = <span class="string">&quot;\b\b%d%%&quot;</span></span><br><span class="line">    Format2 = <span class="string">&quot;\b\b\b%d%%&quot;</span></span><br><span class="line">    Format3 = <span class="string">&quot;\b\b\b%d%%\b&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">progress</span><span class="params">(ch <span class="keyword">chan</span> <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">    format := Format1</span><br><span class="line">    <span class="keyword">var</span> lastNum <span class="type">int64</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> rate := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        <span class="keyword">if</span> lastNum &gt; <span class="number">10</span> &amp;&amp; rate &gt; <span class="number">10</span> &amp;&amp; rate &lt; <span class="number">100</span> &#123;</span><br><span class="line">            format = Format2</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> rate &gt;= <span class="number">100</span> &#123;</span><br><span class="line">            rate = <span class="number">100</span></span><br><span class="line">            format = Format3</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(format, rate)</span><br><span class="line">        lastNum = rate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rateCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int64</span>)</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(rateCh)</span><br><span class="line">    f, _ := os.Open(<span class="string">&quot;./html/img.jpg&quot;</span>)</span><br><span class="line">    fInfo, _ := f.Stat()</span><br><span class="line">    fmt.Print(<span class="string">&quot;rate:0%&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> progress(rateCh) <span class="comment">//显示进度</span></span><br><span class="line"></span><br><span class="line">    ret := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>*<span class="number">5</span>)</span><br><span class="line">        n, err := f.Read(buf)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, buf...)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            rateCh &lt;- <span class="type">int64</span>(<span class="built_in">len</span>(ret)*<span class="number">100</span>) / fInfo.Size()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    ioutil.WriteFile(<span class="string">&quot;./ret.png&quot;</span>, ret, <span class="number">0600</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Gin模拟大文件上传、分片存储和分块显示"><a href="#使用Gin模拟大文件上传、分片存储和分块显示" class="headerlink" title="使用Gin模拟大文件上传、分片存储和分块显示"></a>使用Gin模拟大文件上传、分片存储和分块显示</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveBlock</span><span class="params">(name <span class="type">string</span>, buf []<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">    save, _ := os.OpenFile(<span class="string">&quot;./file/&quot;</span>+name, os.O_CREATE|os.O_RDWR, <span class="number">0600</span>)</span><br><span class="line">    <span class="keyword">defer</span> save.Close()</span><br><span class="line">    save.Write(buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.New()</span><br><span class="line">    r.Use(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> e := <span class="built_in">recover</span>(); e != <span class="literal">nil</span> &#123;</span><br><span class="line">                c.AbortWithStatusJSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;err&quot;</span>: e&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">        c.Next()</span><br><span class="line">    &#125;)</span><br><span class="line">    r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.Writer.Header().Set(<span class="string">&quot;Transfer-Encoding&quot;</span>, <span class="string">&quot;chunked&quot;</span>)</span><br><span class="line">        c.Writer.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/png&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">            f, _ := os.Open(fmt.Sprintf(<span class="string">&quot;./file/img_%d.png&quot;</span>, i))</span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">            b, _ := ioutil.ReadAll(f)</span><br><span class="line">            c.Writer.Write(b)</span><br><span class="line">            c.Writer.(http.Flusher).Flush()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    r.POST(<span class="string">&quot;file&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        file, head, _ := c.Request.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">        block := head.Size / <span class="number">5</span> <span class="comment">// 文件分成5快</span></span><br><span class="line">        index := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            buf := <span class="built_in">make</span>([]<span class="type">byte</span>, block)</span><br><span class="line">            n, err := file.Read(buf)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">                <span class="built_in">panic</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">            saveBlock(fmt.Sprintf(<span class="string">&quot;img_%d.png&quot;</span>, index), buf)</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;OK&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String转-byte的两种方法"><a href="#String转-byte的两种方法" class="headerlink" title="String转[]byte的两种方法"></a>String转[]byte的两种方法</h2><p>第一种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;abc&quot;</span></span><br><span class="line">    fmt.Println([]<span class="type">byte</span>(str))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="string">&quot;abc&quot;</span></span><br><span class="line">    fmt.Println((*reflect.StringHeader)(unsafe.Pointer(&amp;a)).Data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pointer: 表示可以指向任意类型的指针</p><p>uintptr：无符号整型，可以用来保存一个指针地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;adc&quot;</span></span><br><span class="line">    strHeader := (*reflect.StringHeader)(unsafe.Pointer(&amp;str))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fmt.Println(*(*string)(unsafe.Pointer(strHeader)))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> strBytes []<span class="type">byte</span></span><br><span class="line">    bytesHeader := (*reflect.SliceHeader)(unsafe.Pointer(&amp;strBytes))</span><br><span class="line">    bytesHeader.Data = strHeader.Data</span><br><span class="line">    bytesHeader.Len = strHeader.Len</span><br><span class="line">    bytesHeader.Cap = strHeader.Len</span><br><span class="line"></span><br><span class="line">    fmt.Println(*(*[]<span class="type">byte</span>)(unsafe.Pointer(bytesHeader)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="超时控制带来的内存泄露"><a href="#超时控制带来的内存泄露" class="headerlink" title="超时控制带来的内存泄露"></a>超时控制带来的内存泄露</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    ctx, _ := context.WithTimeout(context.Background(), time.Second*<span class="number">1</span>)</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Millisecond * <span class="number">1500</span>)</span><br><span class="line">        done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;超时了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">50</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            job()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        fmt.Println(runtime.NumGoroutine())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的done &lt;- struct&#123;&#125;&#123;&#125;会阻塞住，协程无法释放</span></span><br><span class="line"><span class="comment">// 可以改为done := make(chan struct&#123;&#125;, 1)</span></span><br></pre></td></tr></table></figure><h2 id="context上手"><a href="#context上手" class="headerlink" title="context上手"></a>context上手</h2><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    fmt.Println(ctx.Value(<span class="string">&quot;begin&quot;</span>))</span><br><span class="line">    fmt.Println(<span class="string">&quot;你是猪～&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> g2(context.WithValue(ctx, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;复仇者联盟&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g2</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    fmt.Println(ctx.Value(<span class="string">&quot;movie&quot;</span>))</span><br><span class="line">    fmt.Println(<span class="string">&quot;电影很好看&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx := context.WithValue(context.Background(), <span class="string">&quot;begin&quot;</span>, <span class="string">&quot;从台词看到一句话：&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> g(ctx)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cancel取消"><a href="#cancel取消" class="headerlink" title="cancel取消"></a>cancel取消</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g1</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> g2(ctx)</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        fmt.Println(<span class="string">&quot;g1取消了&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g2</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        fmt.Println(<span class="string">&quot;g2取消了&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">    <span class="keyword">go</span> g1(ctx)</span><br><span class="line">    count := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> count &gt;= <span class="number">3</span> &#123;</span><br><span class="line">            cancel()</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="超时和取消"><a href="#超时和取消" class="headerlink" title="超时和取消"></a>超时和取消</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g1</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        fmt.Println(<span class="string">&quot;g1被取消或超时&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        fmt.Println(<span class="string">&quot;正常执行完成&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">go</span> g1(ctx)</span><br><span class="line">    count := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> count &gt;= <span class="number">3</span> &#123;</span><br><span class="line">            log.Println(<span class="string">&quot;手动取消&quot;</span>)</span><br><span class="line">            cancel()</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span> &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;go刷题专场&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://setcreed.github.io/posts/9a889b79/&quot;&gt;专场一&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;多协程执行后使用channel收集结果&quot;&gt;&lt;a href=&quot;#多协程执行后</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go专场刷题</title>
    <link href="https://setcreed.github.io/posts/9a889b79/"/>
    <id>https://setcreed.github.io/posts/9a889b79/</id>
    <published>2022-07-18T01:01:38.000Z</published>
    <updated>2024-03-04T14:47:21.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限制协程执行数量的基本方法："><a href="#限制协程执行数量的基本方法：" class="headerlink" title="限制协程执行数量的基本方法："></a>限制协程执行数量的基本方法：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">(index <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;执行完毕，序号:%d\n&quot;</span>, index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pool <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    maxNum := <span class="number">10</span></span><br><span class="line">    pool = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, maxNum)</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        pool &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(index <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                &lt;-pool</span><br><span class="line">            &#125;()</span><br><span class="line">            job(index)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数执行超时的控制代码怎么写"><a href="#函数执行超时的控制代码怎么写" class="headerlink" title="函数执行超时的控制代码怎么写"></a>函数执行超时的控制代码怎么写</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、业务过程放到协程</span></span><br><span class="line"><span class="comment">// 2、把业务结果塞入channel</span></span><br><span class="line"><span class="comment">// 3、控制一个time.After</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    ret := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">        ret &lt;- <span class="string">&quot;success&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">    c := job()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> r := &lt;-c:</span><br><span class="line">        <span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;time out&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(run())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nil不等于nil的问题"><a href="#nil不等于nil的问题" class="headerlink" title="nil不等于nil的问题"></a>nil不等于nil的问题</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//fmt.Println(run())</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">var</span> a *<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    list := []<span class="keyword">interface</span>&#123;&#125;&#123;f, a&#125;</span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="comment">//if v, ok := item.(func()); ok &amp;&amp;v==nil &#123;</span></span><br><span class="line">        <span class="comment">//    fmt.Println(&quot;nil func&quot;)</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//if v, ok := item.(*struct&#123;&#125;); ok &amp;&amp;v==nil &#123;</span></span><br><span class="line">        <span class="comment">//    fmt.Println(&quot;nil struct&quot;)</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">if</span> reflect.ValueOf(item).IsNil() &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interface 有两部分组成：类型和值</p><h2 id="defer定义函数时的参数问题"><a href="#defer定义函数时的参数问题" class="headerlink" title="defer定义函数时的参数问题"></a>defer定义函数时的参数问题</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(a)  <span class="comment">// 在定义是就确定了a是1，定义过程中如果有参数就会被确定下来</span></span><br><span class="line">a++</span><br><span class="line"><span class="comment">// 结果是1</span></span><br></pre></td></tr></table></figure><p>defer里链式调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTest</span><span class="params">()</span></span> *test &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;test&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *test)</span></span> do(i <span class="type">int</span>) *test &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    <span class="keyword">return</span> this</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := NewTest()</span><br><span class="line">    <span class="keyword">defer</span> t.do(<span class="number">1</span>).do(<span class="number">2</span>).do(<span class="number">5</span>)</span><br><span class="line">    t.do(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以最后一个执行单位为准放在最后执行， 结果是 1 2 3 5</span></span><br></pre></td></tr></table></figure><p>循环执行defer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 3 3</span></span><br></pre></td></tr></table></figure><p>defer和panic哪个先执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;fmt.Println(<span class="string">&quot;打印前&quot;</span>)&#125;()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;fmt.Println(<span class="string">&quot;打印中&quot;</span>)&#125;()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;fmt.Println(<span class="string">&quot;打印后&quot;</span>)&#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;触发异常&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先执行defer，再把异常往上抛</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印前&quot;</span>) &#125;()</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印中&quot;</span>) &#125;()</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印后&quot;</span>) &#125;()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;触发异常1&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;触发异常2&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后 中 前 1，没有2</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印前&quot;</span>) &#125;()</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印中&quot;</span>) &#125;()</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印后&quot;</span>) &#125;()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;触发异常1&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;触发异常2&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后 中 前 2 1</span></span><br></pre></td></tr></table></figure><h2 id="n-不靠谱"><a href="#n-不靠谱" class="headerlink" title="n++不靠谱"></a>n++不靠谱</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            n++</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案是 1000000 毫无疑问的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            n++</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>n++这个过程并不是原子的，有三个步骤：</p><ul><li>从内存读取n</li><li>执行++</li><li>再赋值结果</li></ul><p>这个过程中，其他协程也会进来读取n的值，因此不是原子的</p><p>所谓的原子，执行过程中不会发生上下文（线程的切换）的切换</p><p>两种办法解决：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    locker := sync.Mutex&#123;&#125;</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="keyword">defer</span> locker.Unlock()</span><br><span class="line">            locker.Lock()</span><br><span class="line">            n++</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n <span class="type">int32</span> = <span class="number">0</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            atomic.AddInt32(&amp;n, <span class="number">1</span>)</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go常见的并发模式"><a href="#go常见的并发模式" class="headerlink" title="go常见的并发模式"></a>go常见的并发模式</h2><p>go的并发模式有哪些，几个点：</p><ul><li>go有协程以及CSP调度模型，是进行并发运行的基础</li><li>可以使用协程来完成 ”并发编程“</li><li>go并发编程哲学：不要通过共享内存来通信，而应通过通信来共享内存</li><li>并发编程的重点在于：如何精准的控制 “共享数据”</li></ul><p>基本：通过协程来执行并发任务，通过channel来通信</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(input <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            fmt.Println(input * <span class="number">2</span>)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(input <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            c &lt;- input * <span class="number">2</span></span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(c); i++ &#123;</span><br><span class="line">        fmt.Println(&lt;-c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者模式</p><p>第一种写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        out &lt;- i * <span class="number">2</span></span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Consumer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> out &#123;</span><br><span class="line">        fmt.Println(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> Producer(c)</span><br><span class="line">    Consumer(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        out &lt;- i * <span class="number">2</span></span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Consumer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>, r <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> out &#123;</span><br><span class="line">        fmt.Println(item)</span><br><span class="line">    &#125;</span><br><span class="line">    r &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    r := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> Producer(c)</span><br><span class="line">    <span class="keyword">go</span> Consumer(c, r)</span><br><span class="line">    &lt;-r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        out &lt;- i * <span class="number">2</span></span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Consumer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> (r <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;) &#123;</span><br><span class="line">    r = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            r &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> out &#123;</span><br><span class="line">        fmt.Println(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> Producer(c)</span><br><span class="line">    r := Consumer(c)</span><br><span class="line">    &lt;-r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优胜劣汰模式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job2</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    rand.Seed(time.Now().Unix())</span><br><span class="line">    result := rand.Intn(<span class="number">5</span>)</span><br><span class="line">    time.Sleep(time.Second * time.Duration(result)) <span class="comment">// 模拟延迟</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            c &lt;- job2()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;最快用了:&quot;</span>, &lt;-c, <span class="string">&quot;秒&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="协程为什么总是先输出倒数第一个"><a href="#协程为什么总是先输出倒数第一个" class="headerlink" title="协程为什么总是先输出倒数第一个"></a>协程为什么总是先输出倒数第一个</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)  <span class="comment">// 单核限制</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先 runtime.GOMAXPROCS，golang默认使用所以的cpu核，runtime.GOMAXPROCS(1) 就变成单核运行了</li><li>单核情况下，所有goroutine运行在同一个线程（M）中，线程维护一个上下文（P）</li><li>在上面程序中，我们循环创建了若干线程，且是单核</li><li>在P就绪后，开始执行。默认先执行的是最后一个创建的协程</li><li>然后再继续执行其他协程，此次是按照顺序来的</li></ul><p>要想按照顺序输出，怎么解决： 再加一个协程就好了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)  <span class="comment">// 单核限制</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wg.Add(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        fmt.Println(<span class="string">&quot;开始解决&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个带过期机制的kv-获取map"><a href="#写一个带过期机制的kv-获取map" class="headerlink" title="写一个带过期机制的kv 获取map"></a>写一个带过期机制的kv 获取map</h2><p>原始的map不是线程安全的，要使用sync.map，使用time.After 实现简单的过期机制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kv sync.Map</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Set</span><span class="params">(key <span class="type">string</span>, value <span class="keyword">interface</span>&#123;&#125;, expire time.Duration)</span></span> &#123;</span><br><span class="line">    kv.Store(key, value)</span><br><span class="line">    time.AfterFunc(expire, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        kv.Delete(key)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Set(<span class="string">&quot;id&quot;</span>, <span class="number">101</span>, time.Second*<span class="number">5</span>)</span><br><span class="line">    Set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, time.Second*<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(kv.Load(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">        fmt.Println(kv.Load(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="谈一谈Go的链表操作"><a href="#谈一谈Go的链表操作" class="headerlink" title="谈一谈Go的链表操作"></a>谈一谈Go的链表操作</h2><p>谈一下双向链表和单向链表的区别</p><p>go自带一个双向链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;container/list&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := list.New()</span><br><span class="line">    e8 := data.PushBack(<span class="number">8</span>)</span><br><span class="line">    data.PushBack(<span class="number">9</span>)</span><br><span class="line">    data.PushBack(<span class="number">10</span>)</span><br><span class="line">    data.PushFront(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    data.InsertAfter(<span class="number">8.5</span>, e8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> e := data.Front(); e != <span class="literal">nil</span>; e = e.Next() &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v &quot;</span>, e.Value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使用golang定义枚举"><a href="#如何使用golang定义枚举" class="headerlink" title="如何使用golang定义枚举"></a>如何使用golang定义枚举</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserType <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u UserType)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> u &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;老师&quot;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;领导&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Student UserType = <span class="literal">iota</span></span><br><span class="line">    Teacher</span><br><span class="line">    Leader</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Student, Teacher, Leader)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go的struct能不能比较"><a href="#go的struct能不能比较" class="headerlink" title="go的struct能不能比较"></a>go的struct能不能比较</h2><p>struct中包含了 map slice func 是不能比较的</p><p>结论：</p><ul><li>相同结构，只要成员类型都可以比较，就能比较</li><li>不相同的结构，如果能互相转化，也能比较。前提是成员都是可以比较的</li></ul><h2 id="用go实现一个简单的set"><a href="#用go实现一个简单的set" class="headerlink" title="用go实现一个简单的set"></a>用go实现一个简单的set</h2><p>目前go的标准库里没有set</p><p>所谓的set 简单来说就是一个集合，里面的内容不能重复</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Set <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]Empty</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this Set)</span></span> Add(vs ...<span class="keyword">interface</span>&#123;&#125;) Set &#123;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> vs &#123;</span><br><span class="line">        this[v] = Empty&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> this</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this Set)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    <span class="keyword">for</span> k, _ := <span class="keyword">range</span> this &#123;</span><br><span class="line">        <span class="keyword">if</span> buf.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">            buf.WriteString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        buf.WriteString(fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, k))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSet</span><span class="params">()</span></span> Set &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]Empty)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    set := NewSet().Add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(set)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go的切片浅拷贝和深拷贝的写法和区别"><a href="#go的切片浅拷贝和深拷贝的写法和区别" class="headerlink" title="go的切片浅拷贝和深拷贝的写法和区别"></a>go的切片浅拷贝和深拷贝的写法和区别</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    b := a</span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这种属于浅拷贝，共享同一层数组空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line">    <span class="built_in">copy</span>(b, a)</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">    b[<span class="number">1</span>] = <span class="number">90</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深拷贝</span></span><br></pre></td></tr></table></figure><h2 id="说一说go的内存逃逸分析"><a href="#说一说go的内存逃逸分析" class="headerlink" title="说一说go的内存逃逸分析"></a>说一说go的内存逃逸分析</h2><p>逃逸分析：go在编译阶段确定内存是分配在栈上还是堆上的一种行为</p><ul><li>栈内存分配和释放非常快</li><li>堆内存需要依靠Go垃圾回收（GC 占用CPU）</li><li>通过逃逸分析，可以尽量把那些不需要分配到堆上的变量直接分配到栈上</li></ul><p>Go的主要目的并不希望程序员关注分配，而是通过编译时的代码分析自动决定</p><p>go build -gcflags=-m main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这种情况就会逃逸</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量原本应该在栈中分配，在栈中回收。由于返回时被外部引用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数为interface类型时，比如 fmt.Println(a...interface&#123;&#125;), 编译期间很难确定其参数的具体类型，也能产生逃逸</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 经典案例：</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUser</span><span class="params">()</span></span> User &#123;</span><br><span class="line">    <span class="keyword">return</span> User&#123;<span class="number">101</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u := NewUser()</span><br><span class="line">    fmt.Println(u)  <span class="comment">// u escapes to heap</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上面的函数中，如果仅仅在main中一步搞定这个u，不需要将u传出去，user这个struct不需要使用指针</span></span><br></pre></td></tr></table></figure><h2 id="说一说Go的单例模式"><a href="#说一说Go的单例模式" class="headerlink" title="说一说Go的单例模式"></a>说一说Go的单例模式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WebConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">    Port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc *WebConfig</span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetConfig</span><span class="params">()</span></span> *WebConfig &#123;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">    <span class="keyword">if</span> cc == <span class="literal">nil</span> &#123;</span><br><span class="line">        cc = &amp;WebConfig&#123;Port: <span class="number">8080</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := GetConfig()</span><br><span class="line">    <span class="comment">// 模拟很多模块都在调用这个函数</span></span><br><span class="line">    c2 := GetConfig()</span><br><span class="line">    c3 := GetConfig()</span><br><span class="line">    fmt.Println(c, c2, c3)</span><br><span class="line">    fmt.Println(c == c2, c2 == c3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上go提供了内置方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WebConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">    Port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc *WebConfig</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetConfig</span><span class="params">()</span></span> *WebConfig &#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        cc = &amp;WebConfig&#123;Port: <span class="number">8080</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> cc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := GetConfig()</span><br><span class="line">    <span class="comment">// 模拟很多模块都在调用这个函数</span></span><br><span class="line">    c2 := GetConfig()</span><br><span class="line">    c3 := GetConfig()</span><br><span class="line">    fmt.Println(c, c2, c3)</span><br><span class="line">    fmt.Println(c == c2, c2 == c3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="说一说Go的简单工厂模式"><a href="#说一说Go的简单工厂模式" class="headerlink" title="说一说Go的简单工厂模式"></a>说一说Go的简单工厂模式</h2><p>可以将接口与具体实现分离，根据需要（根据参数）实例化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetRole() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Member <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Member)</span></span> GetRole() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;会员用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Admin)</span></span> GetRole() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;后台管理用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Mem = <span class="literal">iota</span></span><br><span class="line">    Adm</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateUser</span><span class="params">(t <span class="type">int</span>)</span></span> User &#123;</span><br><span class="line">    <span class="keyword">switch</span> t &#123;</span><br><span class="line">    <span class="keyword">case</span> Mem:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Member)</span><br><span class="line">    <span class="keyword">case</span> Adm:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Admin)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Member)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(CreateUser(Adm).GetRole())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go的抽象工厂方法"><a href="#Go的抽象工厂方法" class="headerlink" title="Go的抽象工厂方法"></a>Go的抽象工厂方法</h2><p>接着上面的简单工厂模式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetRole() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Member <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Member)</span></span> GetRole() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;会员用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Admin)</span></span> GetRole() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;后台管理用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Mem = <span class="literal">iota</span></span><br><span class="line">    Adm</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateUser</span><span class="params">(t <span class="type">int</span>)</span></span> User &#123;</span><br><span class="line">    <span class="keyword">switch</span> t &#123;</span><br><span class="line">    <span class="keyword">case</span> Mem:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Member)</span><br><span class="line">    <span class="keyword">case</span> Adm:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Admin)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Member)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AbstractFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">    CreateUser() User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MemberFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MemberFactory)</span></span> CreateUser() User &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Member&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AdminFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AdminFactory)</span></span> CreateUser() User &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Admin&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> fact AbstractFactory = <span class="built_in">new</span>(AdminFactory)</span><br><span class="line">    fmt.Println(fact.CreateUser().GetRole())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不动原来的代码，一旦增加了什么类别，只要增加如下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MemberFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MemberFactory)</span></span> CreateUser() User &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Member&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加一个工厂，以及一个抽象工厂的具体实现</span></span><br></pre></td></tr></table></figure><h2 id="请写一个Go的装饰器模式的例子"><a href="#请写一个Go的装饰器模式的例子" class="headerlink" title="请写一个Go的装饰器模式的例子"></a>请写一个Go的装饰器模式的例子</h2><p>允许向一个现有对象添加新的功能，同时又不改变其结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">    writer.Write([]<span class="type">byte</span>(<span class="string">&quot;index&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, index)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里访问http://localhost:8080 输出index， 但是我想输出 this is index</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decorator</span><span class="params">(f http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        writer.Write([]<span class="type">byte</span>(<span class="string">&quot;this is &quot;</span>))</span><br><span class="line">        f(writer, request)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">    writer.Write([]<span class="type">byte</span>(<span class="string">&quot;index&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, Decorator(index))</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请简述go-channel的底层机制"><a href="#请简述go-channel的底层机制" class="headerlink" title="请简述go channel的底层机制"></a>请简述go channel的底层机制</h2><p>源码在 runtime/chan.go</p><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220527144940432.png" alt="image-20220527144940432"></p><p>重点关注4个部分：</p><ul><li>buf指向一个循环队列</li><li>sendx和recvx用于记录buf发送和接收的index</li><li>lock 互斥锁</li><li>sendq和recvq 等待（阻塞）列表</li></ul><p>其他的：</p><ul><li>qcount：队列剩余数</li><li>dataqsize：缓冲区大小</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// ch 本身是一个指针，指向堆中的hchan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一开始， sendx = 0。 revcx=0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入值</span></span><br><span class="line"><span class="comment">// 执行前都要加锁</span></span><br><span class="line">ch &lt;<span class="number">-1</span> (send)</span><br><span class="line">sendx = <span class="number">1</span></span><br><span class="line">recvx = <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220527152131672.png" alt="image-20220527152131672"></p><p>一旦缓存满了……</p><p>回答的基本点：</p><ul><li>chan创建在堆中，返回指针</li><li>使用环形队列作为缓冲区</li><li>每次操作都要加锁，并更新操作（send或recv的index）</li><li>缓冲满了，进入等待队列，并让出M。等待被唤醒</li><li>被唤醒后，重新加入G队列</li></ul><h2 id="读写关闭的channel是啥后果"><a href="#读写关闭的channel是啥后果" class="headerlink" title="读写关闭的channel是啥后果"></a>读写关闭的channel是啥后果</h2><h2 id="简述Go协程调度机制"><a href="#简述Go协程调度机制" class="headerlink" title="简述Go协程调度机制"></a>简述Go协程调度机制</h2><p><a href="https://medium.com/@ankur_anand/illustrated-tales-of-go-runtime-scheduler-74809ef6d19b">https://medium.com/@ankur_anand/illustrated-tales-of-go-runtime-scheduler-74809ef6d19b</a></p><p><a href="https://lessisbetter.site/2019/03/10/golang-scheduler-1-history/">https://lessisbetter.site/2019/03/10/golang-scheduler-1-history/</a></p><p><a href="https://zhuanlan.zhihu.com/p/27056944">https://zhuanlan.zhihu.com/p/27056944</a></p><p><a href="https://www.kancloud.cn/aceld/golang/1958305">https://www.kancloud.cn/aceld/golang/1958305</a></p><p>回到要点：</p><ul><li>G、P、M是啥，基本关系</li><li>如何找G</li><li>阻塞过程</li><li>自旋</li></ul><p>Go的协程调度就是 P将G合理的分配给某个M的过程</p><h2 id="简述Raft协议：选举机制"><a href="#简述Raft协议：选举机制" class="headerlink" title="简述Raft协议：选举机制"></a>简述Raft协议：选举机制</h2><p>分布式集群：</p><ul><li>一旦单节点宕机，其他节点依然能提供服务</li><li>关键的是：数据并不会丢失。其中一个重要过程就是数据一致性</li><li>要实现一致性：一般来讲 节点中需要有个主节点来对数据日志进行统一管理（复制）</li></ul><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220601122548765.png" alt="image-20220601122548765"></p><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220601213259612.png" alt="image-20220601213259612"></p><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220601213346193.png" alt="image-20220601213346193"></p><p>正常情况下，A会赢得选举（大多数选票）</p><p>于是，它会立刻给所有节点发送心跳消息，避免其余节点触发新的选举</p><p>不正常情况，由于网络等原因，A和B也许会同时发起选举，</p><p>注意：在同一个任期内，C只能给A或B投一票。先来先得</p><p>假设A先到，此时A胜出。还是那样，A胜出后会发出心跳消息。B发现A的term比他大，则会自觉的改成follower，并更新term </p><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220601214401032.png" alt="image-20220601214401032"></p><h2 id="简述Raft协议：数据复制过程（初级）"><a href="#简述Raft协议：数据复制过程（初级）" class="headerlink" title="简述Raft协议：数据复制过程（初级）"></a>简述Raft协议：数据复制过程（初级）</h2><p>让这个数据同步、可恢复，将这命令持久化到日志里面</p><p>基本过程：所有日志都必须首先提交至leader节点</p><ul><li>leader加入本地日志</li><li>leader要求followers同步日志</li><li>leader等待多数节点的反馈（不是全部）</li><li>上一步成功后leader确认操作ok，并修改本地状态和存储</li><li>发出心跳要求 follower也提交并存储</li></ul><p>最终一致性</p><h2 id="框架中路由实现：手撸前缀树"><a href="#框架中路由实现：手撸前缀树" class="headerlink" title="框架中路由实现：手撸前缀树"></a>框架中路由实现：手撸前缀树</h2><p>特点：</p><ul><li>根节点不包含字符</li><li>每个节点的所有子节点包含的字符都不相同</li><li>一个节点的所有子节点都有相同的前缀</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">    root *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTrie</span><span class="params">()</span></span> *Trie &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Trie&#123;root: NewNode()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    isEnd    <span class="type">bool</span> <span class="comment">// 是否是最后一个</span></span><br><span class="line">    children <span class="keyword">map</span>[<span class="type">string</span>]*Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewNode</span><span class="params">()</span></span> *Node &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Node&#123;children: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*Node)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Trie)</span></span> Insert(str <span class="type">string</span>) &#123;</span><br><span class="line">    current := this.root</span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> []<span class="type">rune</span>(str) &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := current.children[<span class="type">string</span>(item)]; !ok &#123;</span><br><span class="line">            current.children[<span class="type">string</span>(item)] = NewNode()</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.children[<span class="type">string</span>(item)]</span><br><span class="line">    &#125;</span><br><span class="line">    current.isEnd = <span class="literal">true</span> <span class="comment">// 最后一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Trie)</span></span> Search(str <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    current := this.root</span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> []<span class="type">rune</span>(str) &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := current.children[<span class="type">string</span>(item)]; !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        current = current.children[<span class="type">string</span>(item)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.isEnd <span class="comment">// 最后一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    strs := []<span class="type">string</span>&#123;<span class="string">&quot;go&quot;</span>, <span class="string">&quot;gin&quot;</span>, <span class="string">&quot;golang&quot;</span>, <span class="string">&quot;goapp&quot;</span>, <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">    tree := NewTrie()</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        tree.Insert(s)</span><br><span class="line">    &#125;</span><br><span class="line">    strs = <span class="built_in">append</span>(strs, <span class="string">&quot;gi&quot;</span>, <span class="string">&quot;gogo&quot;</span>, <span class="string">&quot;gia&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        fmt.Println(tree.Search(s))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取文件：如何统计文本的行数"><a href="#读取文件：如何统计文本的行数" class="headerlink" title="读取文件：如何统计文本的行数"></a>读取文件：如何统计文本的行数</h2><p>这里用到的是bufio.scanner</p><p>好比是一个带缓冲区的迭代器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.Open(<span class="string">&quot;pkg/mylog&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">    scanner := bufio.NewScanner(file)</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;一共有&quot;</span>, count, <span class="string">&quot;行&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sync-Pool的基本用法"><a href="#Sync-Pool的基本用法" class="headerlink" title="Sync.Pool的基本用法"></a>Sync.Pool的基本用法</h2><p>sync.pool ：协程安全、可伸缩的、用于存放可重用对象的容器</p><p>原始目的是：</p><ul><li>存放已分配但暂时用不到的对象，需要时直接从pool中取，然后放回 以减少GC回收的压力</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p *sync.Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p = &amp;sync.Pool&#123;</span><br><span class="line">        New: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            log.Println(<span class="string">&quot;create user&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> &amp;User&#123;Name: <span class="string">&quot;zhangsan&quot;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    u1 := p.Get().(*User)</span><br><span class="line">    fmt.Println(u1)</span><br><span class="line">    u1.Name = <span class="string">&quot;lisi&quot;</span></span><br><span class="line">    p.Put(u1)</span><br><span class="line">    u2 := p.Get()</span><br><span class="line">    fmt.Println(u2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;限制协程执行数量的基本方法：&quot;&gt;&lt;a href=&quot;#限制协程执行数量的基本方法：&quot; class=&quot;headerlink&quot; title=&quot;限制协程执行数量的基本方法：&quot;&gt;&lt;/a&gt;限制协程执行数量的基本方法：&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="golang" scheme="https://setcreed.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://setcreed.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>03-zookeeper基础</title>
    <link href="https://setcreed.github.io/posts/3fb1bcaf/"/>
    <id>https://setcreed.github.io/posts/3fb1bcaf/</id>
    <published>2022-03-04T14:22:08.000Z</published>
    <updated>2024-03-04T14:47:21.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper简介"><a href="#zookeeper简介" class="headerlink" title="zookeeper简介"></a>zookeeper简介</h1><h2 id="zookeeper是什么"><a href="#zookeeper是什么" class="headerlink" title="zookeeper是什么"></a>zookeeper是什么</h2><p>zookeeper是一个开源的分布式协调服务，其设计目标是将那些复杂的容易出错的分布式一致服务封装起来，构成一个高效可靠的集合，并提供一些简单的接口给用户使用。</p><p>zookeeper主要用来解决分布式集群中应用系统的一致性问题，例如如何避免同时操作同一数据造成脏读的问题等。</p><ul><li>zookeeper本质生是一个分布式的小文件存储系统。提供类似于文件系统的目录树方式的数据存储，并且可以对树中的节点进行有效管理。</li><li>zookeeper提供给客户端监控存储在zookeeper内部数据的功能，从而可以基于数据的集群管理。</li></ul><h2 id="zookeeper的架构组成"><a href="#zookeeper的架构组成" class="headerlink" title="zookeeper的架构组成"></a>zookeeper的架构组成</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210519105843.png" alt=""></p><p>zookeeper没有沿⽤传递的Master/Slave概念，⽽是引⼊了Leader、Follower、Observer三种⻆⾊。</p><p><strong>leader</strong>：</p><ul><li>zookeeper集群工作的核心角色</li><li>集群内部各个服务器的调度者</li><li>事务请求（写操作）的唯一调度者和处理者，保证集群事务处理的顺序；对于create、delete等有写操作的请求，则需要同意转发给leader处理，leader需要决定编号、执行操作，这个过程称为一个事务。</li></ul><p><strong>follower</strong>：</p><ul><li>处理客户端非事务请求（读操作）</li><li>转发事务给leader</li><li>参与集群leader选举投票</li></ul><p>针对访问量大的zookeeper集群，可以增加观察者角色</p><p><strong>observer</strong>：</p><ul><li>观察者角色，观察 Zookeeper 集群的最新状态变化并将这些状态同步过来，其对于非事务请求可以进行独立处理，对于事务请求，则会转发给 Leader服务器进行处理。</li><li>不会参与任何形式的投票只提供非事务服务，通常用于在不影响集群事务处理能力的前提下提升集群的非事务处理能力。增加了集群增加并发的读请求。</li></ul><h2 id="zookeeper特点"><a href="#zookeeper特点" class="headerlink" title="zookeeper特点"></a>zookeeper特点</h2><ul><li>Leader负责进行投票的发起和决议，更新系统状态</li><li>Follower用于接收客户请求并向客户端返回结果，在选举Leader过程中参与投票</li><li>集群中只要有半数以上节点存活，Zookeeper集群就能正常服务</li><li>全局数据一致：每个server保存一份相同的数据副本，Client无论连接到哪个server，数据都是一 致的</li><li>数据更新原子性，一次数据更新要么成功，要么失败</li></ul><h1 id="zookeeper环境搭建"><a href="#zookeeper环境搭建" class="headerlink" title="zookeeper环境搭建"></a>zookeeper环境搭建</h1><h2 id="zookeeper搭建方式"><a href="#zookeeper搭建方式" class="headerlink" title="zookeeper搭建方式"></a>zookeeper搭建方式</h2><p>zookeeper安装方式有三种：单机模式、伪集群模式、集群模式</p><ul><li>单机模式：Zookeeper只运⾏在⼀台服务器上，适合测试环境</li><li>伪集群模式：就是在⼀台服务器上运⾏多个Zookeeper 实例</li><li>集群模式：Zookeeper运⾏于⼀个集群上，适合⽣产环境</li></ul><h2 id="zookeeper集群搭建"><a href="#zookeeper集群搭建" class="headerlink" title="zookeeper集群搭建"></a>zookeeper集群搭建</h2><p>下载稳定版本的zookeeper <a href="http://zookeeper.apache.org/releases.html">http://zookeeper.apache.org/releases.html</a></p><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><p>将安装包上传到一台linux服务器上，然后解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><p>进⼊ zookeeper-3.4.14 ⽬录，创建 data ⽂件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper-3.4.14</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br></pre></td></tr></table></figure><p>修改配置⽂件名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="built_in">mv</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>修改zoo.cfg中的data属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim zoo.cfg</span><br><span class="line"></span><br><span class="line">dataDir=/root/zookeeper-3.4.14/data</span><br></pre></td></tr></table></figure><p>zookeeper服务启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进⼊bin⽬录，启动服务输⼊命令</span></span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="伪集群模式"><a href="#伪集群模式" class="headerlink" title="伪集群模式"></a>伪集群模式</h3><p>将不同的zookeeper实例运⾏在同⼀台机器，⽤端⼝进⾏区分。</p><p>注意事项：</p><p>⼀台机器上部署了3个server，也就是说单台机器及上运⾏多个Zookeeper实例。这种情况下，必须 证每个配置⽂档的各个端⼝号不能冲突，除clientPort不同之外，dataDir也不同。另外，还要在dataDir所对应的⽬录中创建myid⽂件来指定对应的zookeeper服务器实例。</p><p><strong>解压压缩包 创建⽬录zkcluster</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> zkcluster</span><br><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz -C /zkcluster</span><br></pre></td></tr></table></figure><p><strong>重新命名文件夹</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> zookeeper-3.4.14 zookeeper01</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r zookeeper01/ zookeeper02</span><br><span class="line"><span class="built_in">cp</span> -r zookeeper01/ zookeeper03</span><br></pre></td></tr></table></figure><p><strong>分别在zookeeper01、zookeeper02、zookeeper03⽬录下创建data及logs⽬录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p data/logs</span><br></pre></td></tr></table></figure><p><strong>修改配置⽂件名称:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="built_in">mv</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p><strong>配置每⼀个zookeeper 的dataDir（zoo.cfg） clientPort 分别为2181 2182 2183:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zookeeper01</span></span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/zkcluster/zookeeper01/data</span><br><span class="line">dataLogDir=/zkcluster/zookeeper01/data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper02</span></span><br><span class="line">clientPort=2182</span><br><span class="line">dataDir=/zkcluster/zookeeper02/data</span><br><span class="line">dataLogDir=/zkcluster/zookeeper02/data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper03</span></span><br><span class="line">clientPort=2183</span><br><span class="line">dataDir=/zkcluster/zookeeper03/data</span><br><span class="line">dataLogDir=/zkcluster/zookeeper03/data/logs</span><br></pre></td></tr></table></figure><p><strong>配置集群：</strong></p><ul><li><p>在每个zookeeper的 data ⽬录下创建⼀个 myid ⽂件，内容分别是1、2、3 。这个⽂件就是记录 每个服务器的ID</p></li><li><p>在每⼀个zookeeper 的 zoo.cfg配置客户端访问端⼝（clientPort）和集群服务器IP列表</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.1=10.211.55.4:2881:3881</span><br><span class="line">server.2=10.211.55.4:2882:3882</span><br><span class="line">server.3=10.211.55.4:2883:3883</span><br><span class="line"><span class="comment"># server.服务器ID=服务器IP地址：服务器之间通信端⼝：服务器之间投票选举端⼝</span></span><br></pre></td></tr></table></figure><p><strong>启动集群 依次启动三个zk实例</strong></p><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><p><strong>修改配置文件创建data与log目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建zk存储数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/servers/zookeeper-3.4.14/data</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建zk日志文件目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/servers/zookeeper-3.4.14/data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改zk配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /opt/servers/zookeeper-3.4.14/conf</span><br><span class="line"><span class="comment">#文件改名</span></span><br><span class="line"><span class="built_in">mv</span> zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg</span><br><span class="line"><span class="comment">#更新datadir</span></span><br><span class="line">dataDir=/opt/servers/zookeeper-3.4.14/data</span><br><span class="line"><span class="comment">#增加logdir</span></span><br><span class="line">dataLogDir=/opt/servers/zookeeper-3.4.14/data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加集群配置</span></span><br><span class="line"><span class="comment">##server.服务器ID=服务器IP地址：服务器之间通信端口：服务器之间投票选举端口</span></span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开注释</span></span><br><span class="line"><span class="comment">#ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时</span></span><br><span class="line">autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure><p><strong>添加myid配置</strong>：</p><p>在zookeeper的 data 目录下创建一个 myid 文件，内容为1，这个文件就是记录每个服务器的ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/servers/zookeeper-3.4.14/data</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; myid</span><br></pre></td></tr></table></figure><p><strong>安装包分发并修改myid的值</strong></p><p><strong>依次启动三个zk实例</strong></p><p>集群启动停止脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim zk.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start zookeeper server...&quot;</span></span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$#</span>==<span class="number">0</span>));<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;no params&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">hosts=<span class="string">&quot;node1 node2 node3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$hosts</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ssh <span class="variable">$host</span> <span class="string">&quot;source /etc/profile; /opt/servers/zookeeper-3.4.14/bin/zkServer.sh <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="zookeeper系统模型"><a href="#zookeeper系统模型" class="headerlink" title="zookeeper系统模型"></a>zookeeper系统模型</h1><p>zookeeper数据模型ZNode</p><p>在zookeeper中，数据模型被保存到一个个数据节点上，这些节点被称为Znode。Znode是zookeeper中最小树单位。，在 ZNode 下面又可以再挂 ZNode，这样一层层下去就形成了一个层次化命名空间 ZNode 树，我们称为 ZNode Tree，它采用了类似文件系统的层级树状结构进行管理。见下图示例：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210519162222.png" alt=""></p><h2 id="ZNode类型"><a href="#ZNode类型" class="headerlink" title="ZNode类型"></a>ZNode类型</h2><p>Zookeeper 节点类型可以分为三大类：</p><ul><li>持久性节点（Persistent）</li><li>临时性节点（Ephemeral）</li><li>顺序性节点（Sequential）</li></ul><p>在开发中在创建节点的时候通过组合可以生成以下四种节点类型：持久节点、持久顺序节点、临时节点、临时顺序节点。不同类型的节点则会有不同的生命周期</p><ul><li><strong>持久节点</strong>：是Zookeeper中最常见的一种节点类型，所谓持久节点，就是指节点被创建后会一直存在服务器，直到删除操作主动清除。</li><li><strong>持久顺序节点</strong>：就是有顺序的持久节点，节点特性和持久节点是一样的，只是额外特性表现在顺序上。顺序特性实质是在创建节点的时候，会在节点名后面加上一个数字后缀，来表示其顺序。</li><li><strong>临时节点</strong>：就是会被自动清理掉的节点，它的生命周期和客户端会话绑在一起，客户端会话结束，节点会被删除掉。与持久性节点不同的是，临时节点不能创建子节点。</li><li><strong>临时顺序节点</strong>：就是有顺序的临时节点，和持久顺序节点相同，在其创建的时候会在名字后面加上数字后缀。</li></ul><p><strong>事务ID</strong>：</p><p>在ZooKeeper中，事务是指能够改变ZooKeeper服务器状态的操作，我们也称之为事务操作或更新 操作，一般包括数据节点创建与删除、数据节点内容更新等操作。对于每一个事务请求，ZooKeeper都会为其分配一个全局唯一的事务ID，用 ZXID 来表示，通常是一个 64 位的数字。每一个 ZXID 对应一次 更新操作，从这些ZXID中可以间接地识别出ZooKeeper处理这些更新操作请求的全局顺序</p><p>zk中的事务指的是对zk服务器状态改变的操作(create,update data,更新字节点)；zk对这些事务操作都 会编号，这个编号是自增长的被称为ZXID。</p><h2 id="ZNode的状态信息"><a href="#ZNode的状态信息" class="headerlink" title="ZNode的状态信息"></a>ZNode的状态信息</h2><p>使用bin/zkCli.sh 连接到zk集群</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210519162844.png" alt=""></p><p>整个 ZNode 节点内容包括两部分：节点数据内容和节点状态信息。数据内容是空，其他的属于状态信息：</p><ul><li>cZxid 就是 Create ZXID，表示节点被创建时的事务ID。</li><li>ctime 就是 Create Time，表示节点创建时间。</li><li>mZxid 就是 Modified ZXID，表示节点最后一次被修改时的事务ID。</li><li>mtime 就是 Modified Time，表示节点最后一次被修改的时间。</li><li>pZxid 表示该节点的子节点列表最后一次被修改时的事务 ID。只有子节点列表变更才会更新 pZxid，子节点内容变更不会更新。</li><li>cversion 表示子节点的版本号。</li><li>dataVersion 表示内容版本号。</li><li>aclVersion 标识acl版本</li><li>ephemeralOwner 表示创建该临时节点时的会话 sessionID，如果是持久性节点那么值为 0</li><li>dataLength 表示数据长度。</li><li>numChildren 表示直系子节点数。</li></ul><h2 id="Watcher-监听机制"><a href="#Watcher-监听机制" class="headerlink" title="Watcher 监听机制"></a>Watcher 监听机制</h2><p>Zookeeper使用Watcher机制实现分布式数据的发布/订阅功能</p><p>一个典型的发布/订阅模型系统定义了一种 一对多的订阅关系，能够让多个订阅者同时监听某一个主题对象，当这个主题对象自身状态变化时，会通知所有订阅者，使它们能够做出相应的处理。</p><p>在 ZooKeeper 中，引入了 Watcher 机制来实现这种分布式的通知功能。ZooKeeper 允许客户端向服务端注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，那么Zk就会向指定客户端发送一个事件通知来实现分布式的通知功能。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210519164410.png" alt=""></p><p>Zookeeper的Watcher机制主要包括客户端线程、客户端WatcherManager、Zookeeper服务器三部分。具体工作流程：</p><ul><li>客户端在向Zookeeper服务器注册的同时，会将Watcher对象存储在客户端的WatcherManager当中</li><li>当Zookeeper服务器触发Watcher事件后，会向客户端发送通知</li><li>客户端线程从WatcherManager中取出对应的Watcher对象来执行回调逻辑</li></ul><h1 id="zookeeper基本使用"><a href="#zookeeper基本使用" class="headerlink" title="zookeeper基本使用"></a>zookeeper基本使用</h1><h2 id="zookeeper的命令行操作"><a href="#zookeeper的命令行操作" class="headerlink" title="zookeeper的命令行操作"></a>zookeeper的命令行操作</h2><p>通过zkClient进入zookeeper客户端命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./zkcli.sh  <span class="comment"># 连接本地的zookeeper服务器</span></span><br><span class="line">./zkCli.sh -server ip:port(2181)  <span class="comment"># 连接指定的服务器</span></span><br></pre></td></tr></table></figure><p>连接成功之后，系统会输出Zookeeper的相关环境及配置信息等信息。输入help之后，屏幕会输出可用 的Zookeeper命令，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520112419.png" alt=""></p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>使用create命令，可以创建一个Zookeeper节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create [-s][-e] path data</span><br><span class="line"><span class="comment"># 其中，-s或-e分别指定节点特性，顺序或临时节点，若不指定，则创建持久节点</span></span><br></pre></td></tr></table></figure><p><strong>创建顺序节点：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 4] create -s /zk-test 123</span><br><span class="line">Created /zk-test0000000000</span><br></pre></td></tr></table></figure><p>执行完后，就在根节点下创建了一个叫做/zk-test的节点，该节点内容就是123，同时可以看到创建 的zk-test节点后面添加了一串数字以示区别</p><p><strong>创建临时节点：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] create -e /zk-temp 123</span><br><span class="line">Created /zk-temp</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] <span class="built_in">ls</span> /</span><br><span class="line">[zk-test0000000000, zookeeper, zk-temp]</span><br></pre></td></tr></table></figure><p>临时节点在客户端会话结束后会自动删除。</p><p><strong>创建永久节点：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] create /zk-permanent 123</span><br><span class="line">Created /zk-permanent</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] <span class="built_in">ls</span> /</span><br><span class="line">[zk-permanent, zk-test0000000000, zookeeper]</span><br></pre></td></tr></table></figure><p>可以看到永久节点不同于顺序节点，不会自动在后面添加一串数字</p><h3 id="读取节点"><a href="#读取节点" class="headerlink" title="读取节点"></a>读取节点</h3><ul><li>ls命令可以列出Zookeeper指定节点下的所有子节点，但只能查看指定节点下的第一级的所有子节点</li><li>get命令可以获取Zookeeper指定节点的数据内容和属性信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] <span class="built_in">ls</span> /</span><br><span class="line">[zk-permanent, zk-test0000000000, zookeeper]</span><br></pre></td></tr></table></figure><p>使用如下命令：get /zk-permanent，获取/zk-permanent的数据内容和属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /zk-persist</span><br><span class="line">123</span><br><span class="line">cZxid = 0x300000006</span><br><span class="line">ctime = Thu May 20 01:33:28 UTC 2021</span><br><span class="line">mZxid = 0x300000006</span><br><span class="line">mtime = Thu May 20 01:33:28 UTC 2021</span><br><span class="line">pZxid = 0x300000006</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 3</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>第一行是节点/zk-permanent 的数据内容，其他几行则是 建该节点的事务ID（cZxid）、最后一次更新该节点的事务ID（mZxid）和最后一次更新该节点的时间（mtime）等属性信息</p><h3 id="更新命令"><a href="#更新命令" class="headerlink" title="更新命令"></a>更新命令</h3><p>使用set命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] set /zk-persist 456</span><br><span class="line">cZxid = 0x300000006</span><br><span class="line">ctime = Thu May 20 01:33:28 UTC 2021</span><br><span class="line">mZxid = 0x300000009</span><br><span class="line">mtime = Thu May 20 01:38:20 UTC 2021</span><br><span class="line">pZxid = 0x300000006</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 3</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>现在dataVersion已经变为1了，表示进行了更新</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 8] delete /zk-permanent</span><br><span class="line">[zk: localhost:2181(CONNECTED) 9] <span class="built_in">ls</span> /</span><br><span class="line">[zk-test0000000000, zookeeper]</span><br></pre></td></tr></table></figure><p>可以看到，已经成功删除/zk-permanent节点</p><p>若删除节点存在子节点，那么无法删除该节点，必须先删除子节点，再删除父节点</p><h2 id="zookeeper客户端ZkClient使用"><a href="#zookeeper客户端ZkClient使用" class="headerlink" title="zookeeper客户端ZkClient使用"></a>zookeeper客户端ZkClient使用</h2><p>ZkClient是Github上一个开源的zookeeper客户端，在Zookeeper原生API接口之上进行了包装，是一个更易用的Zookeeper客户端，同时，zkClient在内部还实现了诸如Session超时重连、Watcher反复注册等功能</p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建会话"><a href="#创建会话" class="headerlink" title="创建会话"></a>创建会话</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取zkClient对象，client与zk集群通信端空是2181</span></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111:2181&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;zkClient = &quot;</span> + zkClient);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建节点-1"><a href="#创建节点-1" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取zkClient对象，client与zk集群通信端空是2181</span></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111:2181&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;zkClient = &quot;</span> + zkClient);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建节点</span></span><br><span class="line">        zkClient.createPersistent(<span class="string">&quot;/cwz-client/cwz-c1&quot;</span>, <span class="literal">true</span>);  <span class="comment">// 级联创建，第二个参数为true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;path is created&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ZkClient通过设置createParents参数为true可以递归的先创建父节点，再创建子节点</p><h3 id="删除节点-1"><a href="#删除节点-1" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取zkClient对象，client与zk集群通信端空是2181</span></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111:2181&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;zkClient = &quot;</span> + zkClient);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line"><span class="comment">//        zkClient.delete(&quot;/cwz-client&quot;);</span></span><br><span class="line">        zkClient.deleteRecursive(<span class="string">&quot;/cwz-client&quot;</span>); <span class="comment">// 递归删除非空节点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;delete path is success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听节点变化"><a href="#监听节点变化" class="headerlink" title="监听节点变化"></a>监听节点变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkChildListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetChange</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// zkClient对指定目录监听，指定收到通知之后的逻辑</span></span><br><span class="line">        <span class="comment">// 对/cwz-client注册了监听器</span></span><br><span class="line">        zkClient.subscribeChildChanges(<span class="string">&quot;/cwz-client&quot;</span>, <span class="keyword">new</span> <span class="title class_">IZkChildListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleChildChange</span><span class="params">(String path, List&lt;String&gt; childs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(path + <span class="string">&quot;childs changes, current childs &quot;</span> + childs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用zkClient创建、更新、删除节点，验证监听器运行情况</span></span><br><span class="line">        zkClient.createPersistent(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 只是为了方便观察</span></span><br><span class="line">        zkClient.createPersistent(<span class="string">&quot;/cwz-client/c1&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        zkClient.delete(<span class="string">&quot;/cwz-client/c1&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        zkClient.delete(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/cwz-clientchilds changes, current childs []</span><br><span class="line">/cwz-clientchilds changes, current childs [c1]</span><br><span class="line">/cwz-clientchilds changes, current childs []</span><br><span class="line">/cwz-clientchilds changes, current childs null</span><br></pre></td></tr></table></figure><p>由此可知：</p><ul><li>监听器可以对不存在的目录进行监听</li><li>监听目录下 子节点发生改变，服务端都会通知客户端，并将最新的子节点列表发送给客户端</li><li>监听目录创建和删除本身也会被监听到</li></ul><h3 id="监听数据变化"><a href="#监听数据变化" class="headerlink" title="监听数据变化"></a>监听数据变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenDataChange</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义序列化类型</span></span><br><span class="line">        zkClient.setZkSerializer(<span class="keyword">new</span> <span class="title class_">ZkStrSerializer</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断节点是否存在，不存在就创建节点并且赋值</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> zkClient.exists(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            zkClient.createEphemeral(<span class="string">&quot;/cwz-client&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册监听器，节点数据的改变，接收通知后的处理逻辑定义</span></span><br><span class="line">        zkClient.subscribeDataChanges(<span class="string">&quot;/cwz-client&quot;</span>, <span class="keyword">new</span> <span class="title class_">IZkDataListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataChange</span><span class="params">(String path, Object data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 定义接收通知之后的处理逻辑</span></span><br><span class="line">                System.out.println(path + <span class="string">&quot; data is changed, new data &quot;</span> + data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 数据删除</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataDeleted</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(path + <span class="string">&quot; is deleted!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新节点的数据，删除节点，验证监听器是否正常运行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> zkClient.readData(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;data = &quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        zkClient.writeData(<span class="string">&quot;/cwz-client&quot;</span>, <span class="string">&quot;new data&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line">        zkClient.delete(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义序列化类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.exception.ZkMarshallingError;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.serialize.ZkSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkStrSerializer</span> <span class="keyword">implements</span> <span class="title class_">ZkSerializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> ZkMarshallingError &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(o).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> ZkMarshallingError &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = 123</span><br><span class="line">/cwz-client data is changed, new data new data</span><br><span class="line">/cwz-client is deleted!</span><br></pre></td></tr></table></figure><h1 id="zookeeper内部机制"><a href="#zookeeper内部机制" class="headerlink" title="zookeeper内部机制"></a>zookeeper内部机制</h1><h2 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h2><ul><li>集群中半数以上机器存活，集群就可用。所以Zookeeper适合安装奇数台服务器。</li><li>Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其它为Follower，Leader是通过内部的选举机制产生的</li></ul><h3 id="集群首次启动"><a href="#集群首次启动" class="headerlink" title="集群首次启动"></a>集群首次启动</h3><p>假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520151553.png" alt=""></p><p>zookeeper的选举机制</p><ul><li>服务器1启动，此时只有它一台服务器启动了，它发出去的报文没有任何响应，所以它的选举状态一直是LOOKING状态</li><li>服务器2启动，它与最开始启动的服务器1进行通信，互相交换自己的选举结果，由于两者都没有历史数据，所以id值较大的服务器2胜出，但是由于没有达到超过半数以上的服务器都同意选举它(这个例子中的半数以上是3)，所以服务器1、2还是继续保持LOOKING状态</li><li>服务器3启动，根据前面的理论分析，服务器3成为服务器1、2、3中的老大，而与上面不同的是，此时有三台服务器选举了它，所以它成为了这次选举的Leader</li><li>服务器4启动，根据前面的分析，理论上服务器4应该是服务器1、2、3、4中最大的，但是由于前面已经有半数以上的服务器选举了服务器3，所以它只能接收当小弟的命了</li><li>服务器5启动，同4一样称为follower</li></ul><h3 id="集群非首次启动"><a href="#集群非首次启动" class="headerlink" title="集群非首次启动"></a>集群非首次启动</h3><ul><li>每个节点在选举时都会参考自身节点的zxid值（事务ID）</li><li>优先选择zxid值大的节点称为Leader</li></ul><h2 id="ZAB一致性协议"><a href="#ZAB一致性协议" class="headerlink" title="ZAB一致性协议"></a>ZAB一致性协议</h2><h3 id="分布式数据一致性问题"><a href="#分布式数据一致性问题" class="headerlink" title="分布式数据一致性问题"></a>分布式数据一致性问题</h3><ul><li>将数据复制到分布式部署的多台机器中，可以消除单点故障，防止系统由于某台（些）机器宕机导致的不可用</li><li>通过负载均衡技术，能够让分布在不同地方的数据副本全都对外提供服务。有效提高系统性能</li></ul><p>在分布式系统中引入数据复制机制后，多台数据节点之间由于网络等原因很容易产生数据不一致的情况</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152019.png" alt=""></p><p>当客户端Client1将系统中的一个值K1由V1更新为V2，但是客户端Client2读取的是一个还没有同步更新的副本，K1的值依然是V1,这就导致了数据的不一致性。其中，常见的就是主从数据库之间的复制延时问题</p><h2 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h2><p>zookeeper就是分布式一致性问题的工业解决方案，paxos是其底层理论算法，其中zab，raft和众多开源算法是对paxos的工业级实现。ZK没有完全采用paxos算法，而是使用了一种称为Zookeeper Atomic Broadcast（ZAB，Zookeeper原子消息广播协议）的协议作为其数据一致性的核心算法</p><ul><li>ZAB 协议是为分布式协调服务 Zookeeper 专门设计的一种支持崩溃恢复和原子广播协议</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152200.png" alt=""></p><p>ZK怎么处理集群中的数据？所有客户端写入数据都是写入Leader中，然后，由 Leader 复制到Follower中。ZAB会将服务器数据的状态变更以事务Proposal的形式广播到所有的副本进程上，ZAB协议能够保证了事务操作的一个全局的变更序号(ZXID)。</p><h3 id="广播消息"><a href="#广播消息" class="headerlink" title="广播消息"></a>广播消息</h3><p>ZAB 协议的消息广播过程类似于 二阶段提交过程。对于客户端发送的写请求，全部由 Leader 接收，Leader 将请求封装成一个事务 Proposal(提议)，将其发送给所有 Follwer ，如果收到超过半数反馈ACK，则执行 Commit 操作（先提交自己，再发送 Commit 给所有 Follwer）。</p><ul><li>发送Proposal到Follower</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152429.png" alt=""></p><ul><li>Leader接收Follower的ACK</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152500.png" alt=""></p><ul><li>超过半数ACK则Commit</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152520.png" alt=""></p><p>不能正常反馈Follower恢复正常后会进入数据同步阶段最终与Leader保持一致</p><p>说明：</p><ul><li>Leader接收到Client请求之后，会将这个请求封装成一个事务，并给这个事务分配一个全局递增的唯一 ID，称为事务ID（ZXID），ZAB 协议要求保证事务的顺序，因此必须将每一个事务按照 ZXID进行先后排序然后处理</li><li>ZK集群为了保证任何事务操作能够有序的顺序执行，只能是 Leader 服务器接受写请求，即使是Follower 服务器接受到客户端的请求，也会转发到 Leader 服务器进行处理</li><li>ZK提供的应该是最终一致性的标准。ZK所有节点接收写请求之后可以在一定时间内保证所有节点都能看到该条数据</li></ul><h3 id="Leader崩溃问题"><a href="#Leader崩溃问题" class="headerlink" title="Leader崩溃问题"></a>Leader崩溃问题</h3><p>Leader宕机后，ZK集群无法正常工作，ZAB协议提供了一个高效且可靠的leader选举算法</p><p>Leader宕机后，被选举的新Leader需要解决的问题：</p><ul><li>ZAB 协议确保那些已经在 Leader 提交的事务最终会被所有服务器提交</li><li>ZAB 协议确保丢弃那些只在 Leader 提出/复制，但没有提交的事务</li></ul><p>基于上面的目的，ZAB协议设计了一个选举算法：能够确保已经被Leader提交的事务被集群接受，丢弃还没有提交的事务</p><p>这个选举算法的关键点：保证选举出的新Leader拥有集群中所有节点最大编号(ZXID)的事务</p><h1 id="zookeeper应用实践"><a href="#zookeeper应用实践" class="headerlink" title="zookeeper应用实践"></a>zookeeper应用实践</h1><p>ZooKeeper是一个典型的发布/订阅模式的分布式数据管理与协调框架。</p><p>通过对ZooKeeper中丰富的数据节点类型进行交叉使用，配合Watcher事件通知机制，可以非常方便地构建一系列分布式应用中都会涉及的核心功能：</p><ul><li>数据发布/订阅</li><li>命名服务</li><li>集群管理</li><li>Master选举</li><li>分布式锁</li><li>分布式队列</li></ul><p>zookeeper两大特性：</p><ul><li>客户端如果对Zookeeper的数据节点注册Watcher监听，那么当该数据节点的内容或是其子节点列表发生变更时，Zookeeper服务器就会向订阅的客户端发送变更通知</li><li>对在Zookeeper上创建的临时节点，一旦客户端与服务器之间的会话失效，那么临时节点也会被自动删除</li></ul><p>利用其两大特性，可以实现集群机器存活监控系统，若监控系统在/clusterServers节点上注册一个Watcher监听，那么但凡进行动态添加机器的操作，就会在/clusterServers节点下创建一个临时节 点：/clusterServers/[Hostname]，这样，监控系统就能够实时监测机器的变动情况</p><h2 id="服务器上下线动态监听"><a href="#服务器上下线动态监听" class="headerlink" title="服务器上下线动态监听"></a>服务器上下线动态监听</h2><p>分布式系统中，主节点会有多台，主节点可能因为任何原因出现宕机或者下线，而任意一台客户端都要能实时感知到主节点服务器的上下线</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525140447.png" alt=""></p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.onoffline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端主要提供了client需要的一个时间查询服务，服务端向zk建立临时节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="comment">//获取zkclient</span></span><br><span class="line">    <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">connectInfo</span> <span class="operator">=</span> <span class="string">&quot;192.168.33.111:2181,192.168.33.112:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connectZk</span><span class="params">()</span> &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZkClient</span>(connectInfo);</span><br><span class="line">        <span class="comment">// 创建服务端建立临时节点目录</span></span><br><span class="line">        <span class="keyword">if</span> (!zkClient.exists(<span class="string">&quot;/servers&quot;</span>)) &#123;</span><br><span class="line">            zkClient.createPersistent(<span class="string">&quot;/servers&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告知zk服务器相关信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveServerInfo</span><span class="params">(String ip, String port)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sequencePath</span> <span class="operator">=</span> zkClient.createEphemeralSequential(<span class="string">&quot;/servers/server&quot;</span>, ip + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器：&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;，向zk保存信息成功，成功上线可以接受client查询&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备两个服务端启动上线(多线程模拟)</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">        server.connectZk();</span><br><span class="line">        server.saveServerInfo(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 听过时间服务的线程没有启动，创建一个线程类，可以接收socket请求</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TimeService</span>(Integer.parseInt(args[<span class="number">1</span>])).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端提供时间查询的线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.onoffline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供时间查询服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeService</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeService</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过socket与client进行交流，启动serversocket监听请求</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 指定监听的端口</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取client发送的内容</span></span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                out.write(<span class="keyword">new</span> <span class="title class_">Date</span>().toString().getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.onoffline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkChildListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册监听zk指定目录</span></span><br><span class="line"><span class="comment"> * 维护自己本地一个servers信息，收到通知要进行更新</span></span><br><span class="line"><span class="comment"> * 发送时间擦查询请求并接受服务端返回的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="comment">//获取zkclient</span></span><br><span class="line">    <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">connectInfo</span> <span class="operator">=</span> <span class="string">&quot;192.168.33.111:2181,192.168.33.112:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护一个servers信息集合</span></span><br><span class="line">    ArrayList&lt;String&gt; infos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connectZk</span><span class="params">()</span> &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZkClient</span>(connectInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一次获取服务器信息 所有子节点</span></span><br><span class="line">        List&lt;String&gt; childs = zkClient.getChildren(<span class="string">&quot;/servers&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String child : childs) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> zkClient.readData(<span class="string">&quot;/servers/&quot;</span> + child);</span><br><span class="line">            infos.add(String.valueOf(data));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对servers目录进行监听</span></span><br><span class="line">        zkClient.subscribeChildChanges(<span class="string">&quot;/servers&quot;</span>, <span class="keyword">new</span> <span class="title class_">IZkChildListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleChildChange</span><span class="params">(String s, List&lt;String&gt; children)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 接收到通知，说明节点发生了变化，client需要更新infos集合中的数据</span></span><br><span class="line">                ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历更新过后所有节点信息</span></span><br><span class="line">                <span class="keyword">for</span> (String path : children) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> zkClient.readData(<span class="string">&quot;/servers/&quot;</span> + path);</span><br><span class="line">                    list.add(String.valueOf(data));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 最新数据覆盖旧数据</span></span><br><span class="line">                infos = list;</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到通知，最新服务器信息为：&quot;</span> + infos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送时间查询的请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 目标服务器地址</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(infos.size());</span><br><span class="line">        <span class="type">String</span> <span class="variable">ipPort</span> <span class="operator">=</span> infos.get(i);</span><br><span class="line">        String[] arr = ipPort.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立socket连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(arr[<span class="number">0</span>], Integer.parseInt(arr[<span class="number">1</span>]));</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        out.write(<span class="string">&quot;query time&quot;</span>.getBytes());</span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收返回结果</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        in.read(bytes); <span class="comment">// 读取服务端返回数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;client端接收到server：&quot;</span> + ipPort + <span class="string">&quot;返回结果：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Client</span>();</span><br><span class="line">        client.connectZk();  <span class="comment">// 监听器逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            client.sendRequest(); <span class="comment">// 发送请求</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每隔几秒钟发送一次请求到服务端</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动多个服务端线程</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>锁的概念：</p><ul><li>在单机程序中，当存在多个线程可以同时改变某个变量（可变共享变量）时，为了保证线程安全(数据不能出现脏数据)就需要对变量或代码块做同步，使其在修改这种变量时能够串行执行消除并发修改变量。</li><li>对变量或者堆代码码块做同步本质上就是加锁。目的就是实现多个线程在一个时刻同一个代码块只能有一个线程可执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525141544.png" alt=""></p><p>上面的设计存在线程安全问题：</p><ul><li>假设Redis 里面的某个商品库存为 1；此时两个用户同时下单，其中一个下单请求执行到第3 步，更新数据库的库存为 0，但是第 4 步还没有执行。</li><li>而另外一个用户下单执行到了第 2 步，发现库存还是 1，就继续执行第 3 步。但是商品库存已经为0，所以如果数据库没有限制就会出现超卖的问题。</li></ul><p>解决办法：</p><ul><li>用锁把 2、3、4 步锁住，让他们执行完之后，另一个线程才能进来执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525141717.png" alt=""></p><p>公司业务发展迅速，系统应对并发不断提高，解决方案是要增加一台机器，结果会出现更大的问题</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525141754.png" alt=""></p><p>假设有两个下单请求同时到来，分别由两个机器执行，那么这两个请求是可以同时执行了，依然存在超卖的问题。</p><p>如图所示系统是运行在两个不同的 JVM 里面，不同的机器上，增加的锁只对自己当前 JVM 里面的线程有效，对于其他 JVM 的线程是无效的。所以现在已经不是线程安全问题。需要保证两台机器加的锁是同一个锁，此时分布式锁就能解决该问题。</p><p>分布式锁的作用：在整个系统提供一个全局、唯一的锁，在分布式系统中每个系统在进行相关操作的时候需要获取到该锁，才能执行相应操作</p><h3 id="使用zk实现分布式锁"><a href="#使用zk实现分布式锁" class="headerlink" title="使用zk实现分布式锁"></a>使用zk实现分布式锁</h3><p>利用Zookeeper可以创建临时带序号节点的特性来实现一个分布式锁</p><p>实现思路：</p><ul><li>锁就是zk指定目录下序号最小的临时序列节点，多个系统的多个线程都要在此目录下创建临时的顺序节点，因为zk会为我们保证节点的顺序性，所以可以利用节点的顺序进行锁的判断</li><li>每个线程都是先创建临时顺序节点，然后获取当前目录下最小的节点(序号)，判断最小节点是不是当前节点，如果是那么获取锁成功，如果不是那么获取锁失败</li><li>获取锁失败的线程获取当前节点上一个临时顺序节点，并对此节点进行监听，当该节点删除的时候(上一个线程执行结束删除或者是掉线zk删除临时节点)这个线程会获取到通知，代表获取到了锁</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525142043.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525142122.png" alt=""></p><p>main方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.dislock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用10个线程模拟分布式环境</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DisLockRunnable</span>()).start();   <span class="comment">// 启动线程</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DisLockRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每个线程的任务, 抢锁</span></span><br><span class="line">            <span class="type">DisClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisClient</span>();</span><br><span class="line">            client.getDisLock();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟获取锁之后的其他动作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            client.deleteLock();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.dislock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抢锁</span></span><br><span class="line"><span class="comment"> * 1、去zk创建临时序列节点，并获取到序号</span></span><br><span class="line"><span class="comment"> * 2、判断自己创建节点序号是否是当前节点最小序号，如果是则获取锁，执行相关操作，最后释放锁</span></span><br><span class="line"><span class="comment"> * 3、如果不是最小节点，当前线程需要等待，等待前一个序号的节点被删除，然后再次判断自己是否是最小节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DisClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化zk的 distrilock节点</span></span><br><span class="line">        <span class="keyword">synchronized</span> (DisClient.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!zkClient.exists(<span class="string">&quot;/distrilock&quot;</span>)) &#123;</span><br><span class="line">                zkClient.createPersistent(<span class="string">&quot;/distrilock&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前一个节点</span></span><br><span class="line">    String beforeNodePath;</span><br><span class="line">    String currentNodePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取zkClient</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111,192.168.33.112&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把抢锁过程分为两部分，一部分是创建节点，比较序号；另一部分是等待锁</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完整获取锁方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDisLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取到当前线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="comment">// 首先调用tryGetLock</span></span><br><span class="line">        <span class="keyword">if</span> (tryGetLock()) &#123;</span><br><span class="line">            <span class="comment">// 说明获取到锁了</span></span><br><span class="line">            System.out.println(threadName + <span class="string">&quot;: 获取到了锁&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有获取到锁</span></span><br><span class="line">            System.out.println(threadName + <span class="string">&quot;: 获取锁失败，进入等待状态&quot;</span>);</span><br><span class="line">            waitForLock();</span><br><span class="line">            <span class="comment">// 递归获取锁</span></span><br><span class="line">            getDisLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试获取锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryGetLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建临时顺序节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentNodePath == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(currentNodePath)) &#123;</span><br><span class="line">            currentNodePath = zkClient.createEphemeralSequential(<span class="string">&quot;/distrilock/&quot;</span>, <span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; childs = zkClient.getChildren(<span class="string">&quot;/distrilock&quot;</span>);</span><br><span class="line">        <span class="comment">// 对节点信息进行排序</span></span><br><span class="line">        Collections.sort(childs);</span><br><span class="line">        <span class="type">String</span> <span class="variable">minNode</span> <span class="operator">=</span> childs.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 判断自己创建节点是否与最小序号一致</span></span><br><span class="line">        <span class="keyword">if</span> (currentNodePath.equals(<span class="string">&quot;/distrilock/&quot;</span> + minNode)) &#123;</span><br><span class="line">            <span class="comment">// 说明当前线程创建的就是序号最小节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说明最小节点不是自己创建，需要监控自己当前节点序号前一个节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Collections.binarySearch(childs, currentNodePath.substring(<span class="string">&quot;/distrilock/&quot;</span>.length()));</span><br><span class="line">            <span class="comment">// lastNodeChild是不包括父节点</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">lastNodeChild</span> <span class="operator">=</span> childs.get(i - <span class="number">1</span>);</span><br><span class="line">            beforeNodePath = <span class="string">&quot;/distrilock/&quot;</span> + lastNodeChild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待之前节点释放锁，如何判断锁被释放，需要唤醒线程继续尝试tryGetLock</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">waitForLock</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备一个监听器</span></span><br><span class="line">        <span class="type">IZkDataListener</span> <span class="variable">iZkDataListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IZkDataListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataChange</span><span class="params">(String s, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataDeleted</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 提醒当前线程再次获取锁</span></span><br><span class="line"></span><br><span class="line">                countDownLatch.countDown(); <span class="comment">// 把值减1变为0，唤醒之前await线程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监控前一个节点</span></span><br><span class="line">        zkClient.subscribeDataChanges(beforeNodePath, iZkDataListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在监听的通知没来之前，该线程应该是等待状态，先判断一次上一个节点是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient.exists(beforeNodePath)) &#123;</span><br><span class="line">            <span class="comment">// 开始等待  countDownLatch:线程同步计数器</span></span><br><span class="line">            countDownLatch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                countDownLatch.await();   <span class="comment">// 阻塞，直到countDownLatch值变为0</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解除监听</span></span><br><span class="line">        zkClient.unsubscribeDataChanges(beforeNodePath, iZkDataListener);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (zkClient != <span class="literal">null</span>) &#123;</span><br><span class="line">            zkClient.delete(currentNodePath);</span><br><span class="line">            zkClient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分布式锁的实现可以是 Redis、Zookeeper，相对来说生产环境如果使用分布式锁可以考虑使用Redis实现而非zk</p><h1 id="Hadoop-HA"><a href="#Hadoop-HA" class="headerlink" title="Hadoop HA"></a>Hadoop HA</h1><h2 id="HA概述"><a href="#HA概述" class="headerlink" title="HA概述"></a>HA概述</h2><ul><li>HA（High Available），即高可用（7*24小时不中断服务）</li><li>实现高可用最关键的策略是消除单点故障。Hadoop-HA严格来说应该分成各个组件的HA机制：HDFS的HA和YARN的HA</li><li>Hadoop2.0之前，在HDFS集群中NameNode存在单点故障（SPOF）</li><li>NameNode主要在以下两个方面影响HDFS集群：<ul><li>NameNode机器发生意外，如宕机，集群将无法使用，直到重启</li><li>NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用</li></ul></li></ul><p>HDFS HA功能通过配置Active/Standby两个NameNodes实现在集群中对NameNode的热备来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器</p><h2 id="HDFS-HA"><a href="#HDFS-HA" class="headerlink" title="HDFS-HA"></a>HDFS-HA</h2><p>通过双NameNode消除单点故障（Active/Standby）</p><h3 id="HDFS-HA工作要点"><a href="#HDFS-HA工作要点" class="headerlink" title="HDFS-HA工作要点"></a>HDFS-HA工作要点</h3><ul><li>元数据管理方式需要改变<ul><li>内存中各自保存一份元数据</li><li>Edits日志只有Active状态的NameNode节点可以做写操作</li><li>两个NameNode都可以读取Edits</li><li>共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）</li></ul></li><li>需要一个状态管理功能模块<ul><li>实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在namenode节点，利用zk进行状态标识，当需要进行状态切换，由zkfailover负责，切换时需要防止脑裂（brain split）现象发生（集群中出现两个Active的Namenode）</li></ul></li><li>同一时刻仅仅有一个NameNode对外提供服务</li></ul><h3 id="HDFS-HA工作机制"><a href="#HDFS-HA工作机制" class="headerlink" title="HDFS-HA工作机制"></a>HDFS-HA工作机制</h3><p>配置部署HDFS-HA进行自动故障转移。自动故障转移为HDFS部署增加了两个新组件：ZooKeepe和 ZKFailoverController（ZKFC）进程，ZooKeeper是维护少量协调数据，通知客户端这些数据的改变和监视客户端故障的高可用服务。HA的自动故障转移依赖于ZooKeeper的以下功能：</p><ul><li>故障检测<ul><li>集群中的每个NameNode在ZooKeeper中维护了一个临时会话，如果机器崩溃，ZooKeeper中的 会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移</li></ul></li><li>现役NameNode选择<ul><li>ZooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的排外锁以表明它应该成为现役NameNode</li></ul></li></ul><p>ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：</p><ul><li>健康检查    ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。</li><li>ZooKeeper会话管理    当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个特殊的znode锁，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除</li><li>基于ZooKeeper的选择   如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为 Active。故障转移进程与前面描述的手动故障转移相似，首先如果必要保护之前的现役NameNode，然后本地NameNode转换为Active状态</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525162651.png" alt=""></p><h3 id="HDFS-HA集群配置"><a href="#HDFS-HA集群配置" class="headerlink" title="HDFS-HA集群配置"></a>HDFS-HA集群配置</h3><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html">Apache Hadoop 3.2.2 – HDFS High Availability Using the Quorum Journal Manager</a></p><h4 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h4><div class="table-container"><table><thead><tr><th>hadoop-node1</th><th>hadoop-node2</th><th>hadoop-node3</th></tr></thead><tbody><tr><td>NameNode</td><td>NameNode</td><td></td></tr><tr><td>JournalNode</td><td>JournalNode</td><td>JournalNode</td></tr><tr><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td>ZK</td><td>ZK</td><td>ZK</td></tr><tr><td></td><td>ResourceManager</td><td></td></tr><tr><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table></div><h4 id="启动zookeeper集群："><a href="#启动zookeeper集群：" class="headerlink" title="启动zookeeper集群："></a>启动zookeeper集群：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zk.sh start</span><br></pre></td></tr></table></figure><h4 id="配置HDFS-HA集群"><a href="#配置HDFS-HA集群" class="headerlink" title="配置HDFS-HA集群"></a>配置HDFS-HA集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止原先的hdfs集群</span></span><br><span class="line">stop-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有节点，创建ha文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/servers/ha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将/opt/servers/目录下的 hadoop-2.9.2拷贝到ha目录下</span></span><br><span class="line"><span class="built_in">cp</span> -r hadoop-2.9.2 ha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原集群data目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf /opt/servers/ha/hadoop-2.9.2/data</span><br></pre></td></tr></table></figure><p>配置hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hacluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.hacluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.hacluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.hacluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node2:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.hacluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.hacluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop-node1:8485;hadoop-node2:8485;hadoop-node3:8485/ha<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.hacluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/journalnode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hacluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/servers/ha/hadoop-2.9.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:2181,hadoop-node2:2181,hadoop-node3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拷贝配置好的hadoop环境到其他节点</p><h4 id="启动HDFS-HA集群"><a href="#启动HDFS-HA集群" class="headerlink" title="启动HDFS-HA集群"></a>启动HDFS-HA集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在各个JournalNode节点上，输入以下命令启动journalnode服务(去往HA安装目录，不要使用环境变量中命令</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/sbin/hadoop-daemon.sh start journalnode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn1]上，对其进行格式化，并启动</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/bin/hdfs namenode -format</span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/sbin/hadoop-daemon.sh start namenode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn2]上，同步nn1的元数据信息</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/bin/hdfs namenode -bootstrapStandby</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn1]上初始化zkfc</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/bin/hdfs zkfc -formatZK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn1]上，启动集群</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/sbin/start-dfs.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="YARN-HA配置"><a href="#YARN-HA配置" class="headerlink" title="YARN-HA配置"></a>YARN-HA配置</h3><p>官方文档：<a href="https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/ResourceManagerHA.html">Apache Hadoop 3.2.2 – ResourceManager High Availability</a></p><p>YARN-HA工作机制，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525164053.png" alt=""></p><h4 id="配置YARN-HA集群"><a href="#配置YARN-HA集群" class="headerlink" title="配置YARN-HA集群"></a>配置YARN-HA集群</h4><div class="table-container"><table><thead><tr><th>hadoop-node1</th><th>hadoop-node2</th><th>hadoop-node3</th></tr></thead><tbody><tr><td>NameNode</td><td>NameNode</td><td></td></tr><tr><td>JournalNode</td><td>JournalNode</td><td>JournalNode</td></tr><tr><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td>ZK</td><td>ZK</td><td>ZK</td></tr><tr><td></td><td>ResourceManager</td><td>ResourceManager</td></tr><tr><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table></div><p>yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--启用resourcemanager ha--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--声明两台resourcemanager的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>cluster-yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--指定zookeeper集群的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:2181,hadoop-node2:2181,hadoop-node3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--启用自动恢复--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--指定resourcemanager的状态信息存储在zookeeper集群--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同步更新其他节点的配置信息，启动hdfs</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zookeeper简介&quot;&gt;&lt;a href=&quot;#zookeeper简介&quot; class=&quot;headerlink&quot; title=&quot;zookeeper简介&quot;&gt;&lt;/a&gt;zookeeper简介&lt;/h1&gt;&lt;h2 id=&quot;zookeeper是什么&quot;&gt;&lt;a href=&quot;#zooke</summary>
      
    
    
    
    <category term="zookeeper" scheme="https://setcreed.github.io/categories/zookeeper/"/>
    
    
    <category term="zookeeper" scheme="https://setcreed.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>02-HBase基础</title>
    <link href="https://setcreed.github.io/posts/4c42ac43/"/>
    <id>https://setcreed.github.io/posts/4c42ac43/</id>
    <published>2022-03-04T14:19:31.000Z</published>
    <updated>2024-03-04T14:47:21.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HBase基础"><a href="#HBase基础" class="headerlink" title="HBase基础"></a>HBase基础</h1><h2 id="HBase简介"><a href="#HBase简介" class="headerlink" title="HBase简介"></a>HBase简介</h2><h3 id="HBase的概念"><a href="#HBase的概念" class="headerlink" title="HBase的概念"></a>HBase的概念</h3><p>HBase是⼀个分布式海量列式⾮关系型数据库系统，可以提供超⼤规模数据集的实时随机读写。    </p><p>什么是列式存储？举个例子：</p><p>MySQL是行式存储，需要存储如下数据：</p><div class="table-container"><table><thead><tr><th>id</th><th>name</th><th>age</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>21</td><td></td></tr><tr><td>2</td><td>小红</td><td></td><td>12k</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><p>这样存储信息，空值字段会浪费存储空间</p><p>但如果是列式存储：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rowkey: 1 name: 小明</span><br><span class="line">rowkey: 1 age: 21</span><br><span class="line">rowkey: 2 name: 小红</span><br><span class="line">rowkey: 2 salary: 12k</span><br></pre></td></tr></table></figure><h3 id="HBase的优点"><a href="#HBase的优点" class="headerlink" title="HBase的优点"></a>HBase的优点</h3><ul><li>海量存储： 底层基于HDFS存储海量数据</li><li>列式存储：HBase表的数据是基于列族进⾏存储的，⼀个列族包含若⼲列</li><li>极易扩展：底层依赖HDFS，当磁盘空间不⾜的时候，只需要动态增加DataNode服务节点就可以</li><li>⾼并发：⽀持⾼并发的读写请求</li><li>稀疏：稀疏主要是针对HBase列的灵活性，在列族中，你可以指定任意多的列，在列数据为空的情况下，是不会占⽤存储空间的</li><li>数据的多版本：HBase表中的数据可以有多个版本值，默认情况下是根据版本号去区分，版本号就是插⼊数据的时间戳</li><li>数据类型单⼀：所有的数据在HBase中是以字节数组进⾏存储</li></ul><h2 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h2><p>一些概念：</p><ul><li><strong>NameSpace</strong>，命名空间，类似于关系型数据库的database概念，每个命名空间下有多个表。HBase两个⾃带的命名空间，分别是hbase和default，hbase中存放的是HBase内置的表，default表是⽤户默认使⽤的命名空间。⼀个表可以⾃由选择是否有命名空间，如果创建表的时候加上了命名空间后，这个表名字以<code>:</code>作为区分</li><li><strong>Table</strong>，类似于关系型数据库的表概念。不同的是，HBase定义表时只需要声明列族即可，数据属性，⽐如超时时间（TTL），压缩算法（COMPRESSION）等，都在列族的定义中定义，不需要声明具体的列。</li><li><strong>Row（一行逻辑数据）</strong>，HBase表中的每⾏数据都由⼀个RowKey和多个Column（列）组成。⼀个⾏包含了多个列，这些列通过列族来分类，⾏中的数据所属列族只能从该表所定义的列族中选取，不能定义这个表中不存在的列族，否则报错NoSuchColumnFamilyException。</li><li><strong>RowKey（每行数据主键）</strong>，Rowkey由⽤户指定的⼀串不重复的字符串定义，是⼀⾏的唯⼀标识。数据是按照RowKey的字典顺序存储的，并且查询数据时只能根据RowKey进⾏检索，所以RowKey的设计⼗分重要。如果使⽤了之前已经定义的RowKey，那么会将之前的数据更新掉。</li><li><strong>Column Family（列族）</strong>，列族是多个列的集合。⼀个列族可以动态地灵活定义多个列。表的相关属性⼤部分都定义在列族上，同⼀个表⾥的不同列族可以有完全不同的属性配置，但是同⼀个列族内的所有列都会有相同的属性。列族存在的意义是HBase会把相同列族的列尽量放在同⼀台机器上，所以说，如果想让某⼏个列被放到⼀起，你就给他们定义相同的列族。</li><li><strong>Column Qualifier（列）</strong>，Hbase中的列是可以随意定义的，⼀个⾏中的列不限名字、不限数量，只限定列族。因此列必须依赖于列族存在！列的名称前必须带着其所属的列族！例如info：name，info：age</li><li><strong>TimeStamp（时间戳=&gt;版本）</strong>，⽤于标识数据的不同版本（version）。时间戳默认由系统指定，也可以由⽤户显式指定。在读取单元格的数据时，版本号可以省略，如果不指定，Hbase默认会获取最后⼀个版本的数据返回！</li><li><strong>Cell</strong>，⼀个列中可以存储多个版本的数据。⽽每个版本就称为⼀个单元格（Cell）。</li><li><strong>Region（表的分区）</strong>，Region由⼀个表的若⼲⾏组成！在Region中⾏的排序按照⾏键（rowkey）字典排序。Region不能跨RegionSever，且当数据量⼤的时候， HBase会拆分Region。</li></ul><p>HBase的逻辑架构：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210526122306.png" alt=""></p><p>HBase物理存储：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210526132153.png" alt=""></p><h2 id="HBase整体架构"><a href="#HBase整体架构" class="headerlink" title="HBase整体架构"></a>HBase整体架构</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210526133433.png" alt=""></p><p>各组件的作用：</p><ul><li>zookeeper<ul><li>实现了HMaster的⾼可⽤</li><li>保存了HBase的元数据信息，是所有HBase表的寻址⼊⼝</li><li>对HMaster和HRegionServer实现了监控</li></ul></li><li>HMaster（Master）<ul><li>为HRegionServer分配Region</li><li>维护整个集群的负载均衡</li><li>维护集群的元数据信息</li><li>发现失效的Region，并将失效的Region分配到正常的HRegionServer上</li></ul></li><li>HRegionServer（RegionServer）<ul><li>负责管理Region</li><li>接受客户端的读写数据请求</li><li>切分在运⾏过程中变⼤的Region</li></ul></li><li>Region<ul><li>每个HRegion由多个Store构成</li><li>每个Store保存⼀个列族（Columns Family），表有⼏个列族，则有⼏个Store</li><li>每个Store由⼀个MemStore和多个StoreFile组成，MemStore是Store在内存中的内容，写到⽂件后就是StoreFile。StoreFile底层是以HFile的格式保存</li></ul></li></ul><h2 id="HBase的安装部署"><a href="#HBase的安装部署" class="headerlink" title="HBase的安装部署"></a>HBase的安装部署</h2><p>下载安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">tar -zxvf hbase-1.3.1-bin.tar.gz -C /opt/servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置hbase的环境变量</span></span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/opt/servers/hbase-1.3.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HBASE_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要把hadoop中的配置core-site.xml 、hdfs-site.xml拷⻉到hbase安装⽬录下的conf⽂件夹中</span></span><br><span class="line"><span class="built_in">ln</span> -s /opt/servers/hadoop-2.9.2/etc/hadoop/core-site.xml /opt/servers/hbase-1.3.1/conf/core-site.xml</span><br><span class="line"><span class="built_in">ln</span> -s /opt/servers/hadoop-2.9.2/etc/hadoop/hdfs-site.xml /opt/servers/hbase-1.3.1/conf/hdfs-site.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 hbase-env.sh</span></span><br><span class="line"><span class="comment">#添加java环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/servers/jdk1.8.0_231</span><br><span class="line"><span class="comment">#指定使⽤外部的zk集群</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=FALSE</span><br></pre></td></tr></table></figure><p>修改 hbase-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定hbase在HDFS上存储的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定hbase是分布式的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定zk的地址，多个⽤“,”分割 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改regionservers⽂件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim regionservers</span><br><span class="line"></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line"><span class="comment"># hbase的conf⽬录下创建⽂件backup-masters (Standby Master)</span></span><br><span class="line">vim backup-masters</span><br><span class="line"></span><br><span class="line">hadoop-node2</span><br></pre></td></tr></table></figure><p>将hbase目录分发到其他节点</p><p>HBase集群的启动和停⽌：</p><ul><li>前提条件：先启动hadoop和zk集群</li><li>启动HBase：start-hbase.sh</li><li>停⽌HBase：stop-hbase.sh</li><li>启动好HBase集群之后，可以访问地址：HMaster的主机名:16010，查看HBase集群的web管理界面</li></ul><h2 id="HBase-shell的基本操作"><a href="#HBase-shell的基本操作" class="headerlink" title="HBase shell的基本操作"></a>HBase shell的基本操作</h2><p>进⼊Hbase客户端命令操作界⾯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure><p>查看帮助命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):001:0&gt; <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>查看当前数据库中有哪些表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; list</span><br></pre></td></tr></table></figure><p>创建⼀张student表， 包含base_info、extra_info两个列族</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):004:0&gt; create <span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;base_info&#x27;</span>,<span class="string">&#x27;extra_info&#x27;</span></span><br><span class="line">或者</span><br><span class="line">create <span class="string">&#x27;student&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;base_info&#x27;</span>, VERSIONS =&gt; <span class="string">&#x27;3&#x27;</span>&#125;,&#123;NAME =&gt; <span class="string">&#x27;extra_info&#x27;</span>,VERSIONS =&gt; <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># VERSIONS 是指此单元格内的数据可以保留最近的 3 个版本</span></span><br></pre></td></tr></table></figure><h3 id="添加数据操作"><a href="#添加数据操作" class="headerlink" title="添加数据操作"></a>添加数据操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向student表插入信息，row key为 rk1，列族base_info中添加name列标示符，值为wang</span></span><br><span class="line">hbase(main):006:0&gt; put <span class="string">&quot;student&quot;</span>, <span class="string">&quot;rk1&quot;</span>, <span class="string">&quot;base_info:name&quot;</span>, <span class="string">&quot;wang&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向student表中插⼊信息，row key为rk1，列族base_info中添加age列标示符，值为30</span></span><br><span class="line">hbase(main):008:0&gt; put <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info:age&#x27;</span>, 30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向student表中插⼊信息，row key为rk1，列族extra_info中添加address列标示符，值为shanghai</span></span><br><span class="line">hbase(main):010:0&gt; put <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;extra_info:address&#x27;</span>, <span class="string">&#x27;shanghai&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>通过rowkey进⾏查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1的所有信息</span></span><br><span class="line">hbase(main):012:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span></span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> base_info:age         timestamp=1622014015143, value=30                               </span><br><span class="line"> base_info:name        timestamp=1622013932351, value=wang                             </span><br><span class="line"> extra_info:address    timestamp=1622014075602, value=shanghai                         </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0270 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看rowkey下⾯的某个列族的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取student表中row key为rk1，base_info列族的所有信息</span></span><br><span class="line">hbase(main):013:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info&#x27;</span></span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> base_info:age         timestamp=1622014015143, value=30                               </span><br><span class="line"> base_info:name        timestamp=1622013932351, value=wang                             </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0080 seconds</span><br></pre></td></tr></table></figure><p>查看rowkey指定列族指定字段的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1，base_info列族的name、age列标示符的信息</span></span><br><span class="line">hbase(main):014:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info:name&#x27;</span>, <span class="string">&#x27;base_info:age&#x27;</span></span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> base_info:age         timestamp=1622014015143, value=30                               </span><br><span class="line"> base_info:name        timestamp=1622013932351, value=wang                             </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0040 seconds</span><br></pre></td></tr></table></figure><p>查看rowkey指定多个列族的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1，base_info、extra_info列族的信息</span></span><br><span class="line">hbase(main):010:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info&#x27;</span>, <span class="string">&#x27;extra_info&#x27;</span></span><br><span class="line">或者</span><br><span class="line">hbase(main):011:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, &#123;COLUMN =&gt; [<span class="string">&#x27;base_info&#x27;</span>, <span class="string">&#x27;extra_info&#x27;</span>]&#125;</span><br><span class="line">或者</span><br><span class="line">hbase(main):012:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, &#123;COLUMN =&gt; [<span class="string">&#x27;base_info:name&#x27;</span>, <span class="string">&#x27;extra_info:address&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><p>指定rowkey与列值查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1，cell的值为wang的信息</span></span><br><span class="line">hbase(main):029:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, &#123;FILTER =&gt; <span class="string">&quot;ValueFilter(=, &#x27;binary:wang&#x27;)&quot;</span>&#125;</span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> base_info:name        timestamp=1622013932351, value=wang                             </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0030 second</span><br></pre></td></tr></table></figure><p>指定rowkey与列值模糊查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1，列标示符中含有d的信息</span></span><br><span class="line">hbase(main):033:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, &#123;FILTER =&gt; <span class="string">&quot;(QualifierFilter(=,&#x27;substring:d&#x27;))&quot;</span>&#125;</span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> extra_info:address    timestamp=1622014075602, value=shanghai                         </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0030 second</span><br></pre></td></tr></table></figure><p>查询所有数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):034:0&gt; scan <span class="string">&#x27;student&#x27;</span></span><br><span class="line">ROW                    COLUMN+CELL                                                     </span><br><span class="line"> rk1                   column=base_info:age, timestamp=1622014015143, value=30         </span><br><span class="line"> rk1                   column=base_info:name, timestamp=1622013932351, value=wang      </span><br><span class="line"> rk1                   column=extra_info:address, timestamp=1622014075602, value=shangh</span><br><span class="line">                       ai                                                              </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0190 seconds</span><br></pre></td></tr></table></figure><p>列族查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询表中列族为 base_info 的信息</span></span><br><span class="line">hbase(main):001:0&gt; scan <span class="string">&#x27;student&#x27;</span>, &#123;COLUMNS =&gt; <span class="string">&#x27;base_info&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">hbase(main):002:0&gt; scan <span class="string">&#x27;student&#x27;</span>, &#123;COLUMNS =&gt; <span class="string">&#x27;base_info&#x27;</span>, RAW =&gt; <span class="literal">true</span>, VERSIONS =&gt; 3&#125;</span><br><span class="line"><span class="comment">## Scan时可以设置是否开启Raw模式,开启Raw模式会返回包括已添加删除标记但是未实际删除的数据</span></span><br><span class="line"><span class="comment">## VERSIONS指定查询的最⼤版本数</span></span><br></pre></td></tr></table></figure><p>指定多个列族与按照数据值模糊查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询表中列族为 base_info 和 extra_info且列标示符中含有a字符的信息</span></span><br><span class="line">hbase(main):039:0&gt; scan <span class="string">&#x27;student&#x27;</span>, &#123;COLUMNS =&gt; [<span class="string">&#x27;base_info&#x27;</span>, <span class="string">&#x27;extra_info&#x27;</span>], FILTER =&gt; <span class="string">&quot;(QualifierFilter(=,&#x27;substring:a&#x27;))&quot;</span>&#125;</span><br><span class="line">ROW                                              COLUMN+CELL                                                                                                                                   </span><br><span class="line"> rk1                                             column=base_info:age, timestamp=1622014015143, value=30                                                                                       </span><br><span class="line"> rk1                                             column=base_info:name, timestamp=1622013932351, value=wang                                                                                    </span><br><span class="line"> rk1                                             column=extra_info:address, timestamp=1622014075602, value=shanghai                                                                            </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0070 seconds</span><br></pre></td></tr></table></figure><p> rowkey的范围值查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询表中列族为base_info，rk范围是[rk1, rk3)的数据（rowkey底层存储是字典序）</span></span><br><span class="line">hbase(main):043:0&gt; scan <span class="string">&#x27;student&#x27;</span>, &#123;COLUMNS =&gt; <span class="string">&#x27;base_info&#x27;</span>, STARTROW =&gt; <span class="string">&#x27;rk1&#x27;</span>, ENDROW =&gt; <span class="string">&#x27;rk3&#x27;</span>&#125;</span><br><span class="line">ROW                                              COLUMN+CELL                                                                                                                                   </span><br><span class="line"> rk1                                             column=base_info:age, timestamp=1622014015143, value=30                                                                                       </span><br><span class="line"> rk1                                             column=base_info:name, timestamp=1622013932351, value=wang                                                                                    </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0040 seconds</span><br></pre></td></tr></table></figure><p>指定rowkey模糊查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询student表中row key以rk字符开头的</span></span><br><span class="line">hbase(main):045:0&gt; scan <span class="string">&#x27;student&#x27;</span>,&#123;FILTER=&gt;<span class="string">&quot;PrefixFilter(&#x27;rk&#x27;)&quot;</span>&#125;</span><br><span class="line">ROW                    COLUMN+CELL                                                     </span><br><span class="line"> rk1                   column=base_info:age, timestamp=1622014015143, value=30         </span><br><span class="line"> rk1                   column=base_info:name, timestamp=1622013932351, value=wang      </span><br><span class="line"> rk1                   column=extra_info:address, timestamp=1622014075602, value=shangh</span><br><span class="line">                       ai                                                              </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0070 seconds</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新操作同插⼊操作⼀模⼀样，只不过有数据就更新，没数据就添加</p><p>把student表中rowkey为rk1的base_info列族下的列name修改为zhangsan</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):046:0&gt; put <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info:name&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除数据和表"><a href="#删除数据和表" class="headerlink" title="删除数据和表"></a>删除数据和表</h3><p>指定rowkey以及列名进⾏删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除student表row key为rk1，列标示符为 base_info:name 的数据</span></span><br><span class="line">hbase(main):048:0&gt; delete <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info:name&#x27;</span></span><br></pre></td></tr></table></figure><p>删除 base_info 列族</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):050:0&gt; alter <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;delete&#x27;</span> =&gt; <span class="string">&#x27;base_info&#x27;</span></span><br><span class="line">Updating all regions with the new schema...</span><br><span class="line">1/1 regions updated.</span><br><span class="line">Done.</span><br><span class="line">0 row(s) <span class="keyword">in</span> 2.1990 seconds</span><br></pre></td></tr></table></figure><p>清空表数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):052:0&gt; <span class="built_in">truncate</span> <span class="string">&#x27;student&#x27;</span></span><br><span class="line">Truncating <span class="string">&#x27;student&#x27;</span> table (it may take a <span class="keyword">while</span>):</span><br><span class="line"> - Disabling table...</span><br><span class="line"> - Truncating table...</span><br><span class="line">0 row(s) <span class="keyword">in</span> 3.3660 seconds</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先disable 再drop</span></span><br><span class="line">hbase(main):054:0&gt; <span class="built_in">disable</span> <span class="string">&#x27;student&#x27;</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 2.2270 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):055:0&gt; drop <span class="string">&#x27;student&#x27;</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 1.2350 seconds</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不进⾏disable，直接drop会报错</span></span><br></pre></td></tr></table></figure><h1 id="HBase内部原理"><a href="#HBase内部原理" class="headerlink" title="HBase内部原理"></a>HBase内部原理</h1><h2 id="HBase读数据流程"><a href="#HBase读数据流程" class="headerlink" title="HBase读数据流程"></a>HBase读数据流程</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210527083954.png" alt=""></p><ul><li>client⾸先访问zookeeper找到meta表的region位置，然后读取meta表中的数据，meta表中存储了⽤户表的region信息</li><li>根据要查询的namespace、表名和rowkey信息。找到写⼊数据对应的region信息</li><li>找到这个region对应的regionServer，然后发送请求</li><li>查找对应的region</li><li>先从MemStore查找数据，如果没有，再从BlockCache上读取</li><li>如果BlockCache中也没有找到，再到StoreFile上进⾏读取</li><li>从storeFile中读取到数据之后，不是直接把结果数据返回给客户端， ⽽是把数据先写⼊到BlockCache中，⽬的是为了加快后续的查询；然后在返回结果给客户端</li></ul><p>HBase上Regionserver的内存分为两个部分：</p><ul><li>⼀部分作为Memstore，主要⽤来写</li><li>另外⼀部分作为BlockCache，主要⽤于读数据</li></ul><h2 id="HBase写数据流程"><a href="#HBase写数据流程" class="headerlink" title="HBase写数据流程"></a>HBase写数据流程</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210527090244.png" alt=""></p><ul><li>client⾸先访问zookeeper找到meta表的region位置，然后读取meta表中的数据，meta表中存储了⽤户表的region信息</li><li>根据要查询的namespace、表名和rowkey信息。找到写⼊数据对应的region信息</li><li>找到这个region对应的regionServer，然后发送请求</li><li>把数据分别写到HLog（write ahead log）和memstore各⼀份</li><li>memstore达到阈值后把数据刷到磁盘，⽣成storeFile⽂件</li><li>删除HLog中的历史数据</li></ul><h2 id="HBase的flush机制"><a href="#HBase的flush机制" class="headerlink" title="HBase的flush机制"></a>HBase的flush机制</h2><h3 id="flush机制"><a href="#flush机制" class="headerlink" title="flush机制"></a>flush机制</h3><ul><li>当memstore的⼤⼩超过这个值的时候，会flush到磁盘，默认为128M</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hregion.memstore.flush.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当memstore中的数据时间超过1⼩时，会flush到磁</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.optionalcacheflushinterval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3600000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HregionServer的全局memstore的⼤⼩，超过该⼤⼩会触发flush到磁盘的操作，默认是堆⼤⼩的 <code>40% * 0.95</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.global.memstore.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.global.memstore.size.lower.limit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.95<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>⼿动flush</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush tableName</span><br></pre></td></tr></table></figure><h3 id="阻塞机制"><a href="#阻塞机制" class="headerlink" title="阻塞机制"></a>阻塞机制</h3><p>上面说的是Store中memstore数据刷写磁盘的标准，但是Hbase会进行周期性检查，看是否满⾜以上标准，满⾜就会进⾏刷写。</p><p>但是如果在下次检查到来之前，数据疯狂写⼊Memstore中，会触发阻塞机制，此时⽆法写⼊数据到Memstore，数据⽆法写⼊Hbase集群。</p><ul><li>当memstore达到128M时，没有检查会继续往里写，刷写磁盘不会阻塞，但是数据量远远大于128M时，hbase为了保证集群的安全，会停止写入数据。这个停止写入数据的数据量大小默认是512M</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memstore数据达到一定值的计算公式：hbase.hregion.memstore.flush.size * hbase.hregion.memstore..block.multiplier</span><br><span class="line">hbase.hregion.memstore.flush.size刷写的阀值，默认是134217728，即128MB</span><br><span class="line">hbase.hregion.memstore.block.multiplier是⼀个倍数，默认是4</span><br></pre></td></tr></table></figure><ul><li>regionserver全部的memstore达到规定值，这个规定值是可以配置的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase.regionserver.global.memstore.size.lower.limit是0.95，</span><br><span class="line">hbase.regionserver.global.memstore.size是0.4，</span><br><span class="line">堆内存总共是 16G，</span><br><span class="line">触发刷写的阈值是：16*0.95*0.4=6.08GB </span><br><span class="line">触发阻塞的阈值是：16*0.4=6.4GB</span><br></pre></td></tr></table></figure><p>hbase阻塞了是无法写入数据的，就无法使用了。缓解阻塞机制：可以尽可能的调大内存</p><h2 id="Compact合并机制"><a href="#Compact合并机制" class="headerlink" title="Compact合并机制"></a>Compact合并机制</h2><p>在hbase中主要存在两种类型的compact合并</p><h3 id="minor-compact-小合并"><a href="#minor-compact-小合并" class="headerlink" title="minor compact 小合并"></a>minor compact 小合并</h3><ul><li>在将Store中多个HFile(StoreFile)合并为⼀个HFile。这个过程中，删除和更新的数据仅仅只是做了标记，并没有物理移除，这种合并的触发频率很⾼。</li><li>minor compact⽂件选择标准 由以下⼏个参数共同决定：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--待合并⽂件数据必须⼤于等于下⾯这个值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hstore.compaction.min<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--待合并⽂件数据必须⼩于等于下⾯这个值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hstore.compaction.max<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--默认值为128m,</span></span><br><span class="line"><span class="comment">表示⽂件⼤⼩⼩于该值的store file ⼀定会加⼊到minor compaction的store file中</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hstore.compaction.min.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--默认值为LONG.MAX_VALUE，</span></span><br><span class="line"><span class="comment">表示⽂件⼤⼩⼤于该值的store file ⼀定会被minor compaction排除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hstore.compaction.max.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>9223372036854775807<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据上面的配置来看，一次minor compact最少3个文件最多10个文件</p><p>触发minor compact的条件：</p><ul><li><strong>memstore flush</strong>，在进⾏memstore flush前后都会进⾏判断是否触发compact</li><li><strong>定期检查线程</strong>，周期性检查是否需要进⾏compaction操作，由参数：hbase.server.thread.wakefrequency决定，默认值是10000 millseconds</li></ul><h3 id="major-compact-大合并"><a href="#major-compact-大合并" class="headerlink" title="major compact 大合并"></a>major compact 大合并</h3><p>合并Store中所有的HFile为⼀个HFile</p><p>这个过程有删除标记的数据会被真正移除，同时超过单元格maxVersion的版本记录也会被删除。合并频率⽐较低，默认7天执⾏⼀次，并且性能消耗⾮常大，建议⽣产关闭(设置为0)，在应⽤空闲时间⼿动触发。⼀般可以是⼿动控制进⾏合并，防⽌出现在业务⾼峰期</p><p>major compact触发时间条件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认值为7天进⾏⼀次⼤合并，--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hregion.majorcompaction<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⼿动触发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使⽤major_compact命令</span></span><br><span class="line">major_compact tableName</span><br></pre></td></tr></table></figure><h2 id="Region-拆分机制"><a href="#Region-拆分机制" class="headerlink" title="Region 拆分机制"></a>Region 拆分机制</h2><p>Region中存储的是⼤量的rowkey数据，当Region中的数据条数过多的时候，直接影响查询效率。</p><p>当Region过⼤的时候，HBase会拆分Region，这也是Hbase的⼀个优点。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210527102402.png" alt=""></p><h3 id="拆分策略"><a href="#拆分策略" class="headerlink" title="拆分策略"></a>拆分策略</h3><p>HBase的Region Split策略⼀共有以下⼏种：</p><ul><li><strong>ConstantSizeRegionSplitPolicy</strong></li></ul><p>这是0.94版本前默认切分策略。</p><p>当region大小大于某个阈值(hbase.hregion.max.filesize=10G)之后就会触发切分，⼀个region等分为2个region。</p><p>但是在⽣产线上这种切分策略却有相当的弊端：切分策略对于大表和小表没有明显的区分。阈值(hbase.hregion.max.filesize)设置较大对大表比较友好，但是小表就有可能不会触发分裂，极端情况下可能就1个，这对业务来说并不是什么好事。如果设置较小则对小表友好，但⼀个大表就会在整个集群产生大量 的region，这对于集群的管理、资源使⽤、failover来说都不是⼀件好事。</p><ul><li><strong>IncreasingToUpperBoundRegionSplitPolicy</strong></li></ul><p>是0.94版本~2.0版本默认切分策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">切分策略稍微有点复杂，总体看和ConstantSizeRegionSplitPolicy思路相同，⼀个region⼤⼩⼤于设置阈值就会触发切分。但是这个阈值并不像ConstantSizeRegionSplitPolicy是⼀个固定的值，⽽是会在⼀定条件下不断调整，调整规则和region所属表在当前regionserver上的region个数有关系。</span><br><span class="line"></span><br><span class="line">region split的计算公式是：</span><br><span class="line">regioncount^3 * 128M * 2，当region达到该size的时候进⾏split</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">第⼀次split：1^3 * 256 = 256MB</span><br><span class="line">第⼆次split：2^3 * 256 = 2048MB</span><br><span class="line">第三次split：3^3 * 256 = 6912MB</span><br><span class="line">第四次split：4^3 * 256 = 16384MB &gt; 10GB，因此取较⼩的值10GB</span><br><span class="line">后⾯每次split的size都是10GB了</span><br></pre></td></tr></table></figure><ul><li><strong>SteppingSplitPolicy</strong></li></ul><p>2.0版本默认切分策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这种切分策略的切分阈值⼜发⽣了变化，相比 IncreasingToUpperBoundRegionSplitPolicy 简单了⼀些，依然和待分裂region所属表在当前regionserver上的region个数有关系，如果region个数等于1，切分阈值为flush size * 2，否则为MaxRegionFileSize。</span><br><span class="line"></span><br><span class="line">这种切分策略对于⼤集群中的⼤表、⼩表会⽐ncreasingToUpperBoundRegionSplitPolicy 更加友好，⼩表不会再产⽣⼤量的⼩region，⽽是适可⽽⽌</span><br></pre></td></tr></table></figure><ul><li><strong>KeyPrefixRegionSplitPolicy</strong></li></ul><p>根据rowKey的前缀对数据进行分组，这⾥是指定rowKey的前多少位作为前缀，⽐如rowKey都是16位的，指定前5位是前缀，那么前5位相同的rowKey在进行region split的时候会分到相同的region中。</p><ul><li><strong>DelimitedKeyPrefixRegionSplitPolicy</strong></li></ul><p>保证相同前缀的数据在同⼀个region中，例如rowKey的格式为：userid<em>eventtype_eventid，指定的delimiter为 </em> ，则split的的时候会确保userid 相同的数据在同⼀个region中。</p><ul><li>DisabledRegionSplitPolicy</li></ul><p>不启用自动拆分，需要指定⼿动拆分。不建议！</p><h3 id="RegionSplitPolicy的应用"><a href="#RegionSplitPolicy的应用" class="headerlink" title="RegionSplitPolicy的应用"></a>RegionSplitPolicy的应用</h3><p>Region拆分策略可以全局统⼀配置，也可以为单独的表指定拆分策略。</p><ul><li>通过hbase-site.xml全局统⼀配置(对hbase所有表⽣效)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.region.split.policy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hbase.regionserver.IncreasingToUpperBoundRegionSplitPolicy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过Java API为单独的表指定Region拆分策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HTableDescriptor</span> <span class="variable">tableDesc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTableDescriptor</span>(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">tableDesc.setValue(HTableDescriptor.SPLIT_POLICY, IncreasingToUpperBoundRegionSplitPolicy.class.getName());</span><br><span class="line">tableDesc.addFamily(<span class="keyword">new</span> <span class="title class_">HColumnDescriptor</span>(Bytes.toBytes(<span class="string">&quot;cf1&quot;</span>)));</span><br><span class="line">admin.createTable(tableDesc);</span><br></pre></td></tr></table></figure><ul><li>通过HBase Shell为单个表指定Region拆分策略</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase&gt; create &#x27;test2&#x27;, &#123;METADATA =&gt; &#123;&#x27;SPLIT_POLICY&#x27; =&gt; &#x27;org.apache.hadoop.hbase.regionserver.IncreasingToUpperBoundRegionSplitPolicy&#x27;&#125;&#125;,&#123;NAME =&gt; &#x27;cf1&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="HBase表的预分区（region）"><a href="#HBase表的预分区（region）" class="headerlink" title="HBase表的预分区（region）"></a>HBase表的预分区（region）</h2><p>当⼀个table刚被创建的时候，Hbase默认的分配⼀个region给table。也就是说这个时候，所有的读写请求都会访问到同⼀个regionServer的同⼀个region中，这个时候就达不到负载均衡的效果了，集群中的其他regionServer就可能会处于⽐较空闲的状态。解决这个问题可以⽤pre-splitting，在创建table的时候就配置好，⽣成多个region。</p><p>这样的好处：</p><ul><li>增加数据读写效率</li><li>负载均衡，防⽌数据倾斜</li><li>⽅便集群容灾调度region</li><li>每⼀个region维护着startRow与endRowKey，如果加入的数据符合某个region维护的rowKey范围，则该数据交给这个region维护</li></ul><p>⼿动指定预分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;person&#x27;,&#x27;info1&#x27;,&#x27;info2&#x27;,SPLITS =&gt; [&#x27;1000&#x27;,&#x27;2000&#x27;,&#x27;3000&#x27;]</span><br></pre></td></tr></table></figure><p>也可以把分区规则创建于⽂件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim split.txt</span><br><span class="line"><span class="comment"># 文件内容：</span></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br></pre></td></tr></table></figure><p>执行：<code>create &#39;student&#39;,&#39;info&#39;,SPLITS_FILE =&gt; &#39;/root/hbase/split.txt&#39;</code></p><h2 id="HBase表Region合并"><a href="#HBase表Region合并" class="headerlink" title="HBase表Region合并"></a>HBase表Region合并</h2><p>Region的合并不是为了性能，⽽是出于维护的目的</p><h3 id="通过Merge类冷合并Region"><a href="#通过Merge类冷合并Region" class="headerlink" title="通过Merge类冷合并Region"></a>通过Merge类冷合并Region</h3><ul><li>需要先关闭hbase集群</li><li>需求：需要把student表中的2个region数据进⾏合并：student, ,1593244870695.10c2df60e567e73523a633f20866b4b5和student,1000,1593244870695.0a4c3ff30a98f79ff6c1e4cc927b3d0d</li></ul><p>这里通过org.apache.hadoop.hbase.util.Merge类来实现，不需要进⼊hbase shell，直接执⾏（需要先关闭hbase集群）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase org.apache.hadoop.hbase.util.Merge student \</span><br><span class="line">student,,1595256696737.fc3eff4765709e66a8524d3c3ab42d59. \</span><br><span class="line">student,aaa,1595256696737.1d53d6c1ce0c1bed269b16b6514131d0.</span><br></pre></td></tr></table></figure><h3 id="通过online-merge热合并Region"><a href="#通过online-merge热合并Region" class="headerlink" title="通过online_merge热合并Region"></a>通过online_merge热合并Region</h3><p>不需要关闭hbase集群，在线进行合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">与冷合并不同的是，online_merge的传参是Region的hash值，⽽Region的hash值就是Region名称的最后那段在两个.之间的字符串部分。</span><br><span class="line"></span><br><span class="line">需求：需要把student表2个region数据进⾏合并：</span><br><span class="line">student,,1587392159085.9ca8689901008946793b8d5fa5898e06. \</span><br><span class="line">student,aaa,1587392159085.601d5741608cedb677634f8f7257e000.</span><br><span class="line"></span><br><span class="line">需要进⼊hbase shell：</span><br><span class="line">merge_region &#x27;c8bc666507d9e45523aebaffa88ffdd6&#x27;,&#x27;02a9dfdf6ff42ae9f0524a3d8f4c7777&#x27;</span><br></pre></td></tr></table></figure><h2 id="HBase-API应用和优化"><a href="#HBase-API应用和优化" class="headerlink" title="HBase API应用和优化"></a>HBase API应用和优化</h2><h3 id="Hbase-客户端API操作"><a href="#Hbase-客户端API操作" class="headerlink" title="Hbase 客户端API操作"></a>Hbase 客户端API操作</h3><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.14.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.javaboy.hbase.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HbaseClientDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取一个配置文件对象</span></span><br><span class="line">        conf = HBaseConfiguration.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过conf获取到hbase集群的连接</span></span><br><span class="line">        conf.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;192.168.33.111,192.168.33.112&quot;</span>);</span><br><span class="line">        conf.set(<span class="string">&quot;hbase.zookeeper.property.clientPort&quot;</span>, <span class="string">&quot;2181&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过conf获取到hbase集群的连接</span></span><br><span class="line">        conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一张hbase表</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTable</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取hbaseadmin对象来创建表</span></span><br><span class="line">        <span class="type">HBaseAdmin</span> <span class="variable">admin</span> <span class="operator">=</span> (HBaseAdmin) conn.getAdmin();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建表描述器</span></span><br><span class="line">        <span class="type">HTableDescriptor</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTableDescriptor</span>(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定列族</span></span><br><span class="line">        student.addFamily(<span class="keyword">new</span> <span class="title class_">HColumnDescriptor</span>(<span class="string">&quot;info&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行创建的操作</span></span><br><span class="line">        admin.createTable(student);</span><br><span class="line">        System.out.println(<span class="string">&quot;student表创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入一条数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 需要获取一个table对象</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备put对象</span></span><br><span class="line">        <span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(Bytes.toBytes(<span class="string">&quot;110&quot;</span>));<span class="comment">// 指定rowkey</span></span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">&quot;info&quot;</span>), Bytes.toBytes(<span class="string">&quot;addr&quot;</span>), Bytes.toBytes(<span class="string">&quot;beijing&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入数据，参数类型是put</span></span><br><span class="line">        student.put(put);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭table对象</span></span><br><span class="line">        student.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;插入数据到student表成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备delete对象</span></span><br><span class="line">        <span class="type">Delete</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Delete</span>(Bytes.toBytes(<span class="string">&quot;110&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行删除</span></span><br><span class="line">        student.delete(delete);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除数据成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 准备table对象</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备get对象</span></span><br><span class="line">        <span class="type">Get</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Get</span>(Bytes.toBytes(<span class="string">&quot;110&quot;</span>));</span><br><span class="line">        <span class="comment">// 指定查询的列族</span></span><br><span class="line">        get.addFamily(Bytes.toBytes(<span class="string">&quot;info&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> student.get(get);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到result中所有cell对象</span></span><br><span class="line">        Cell[] cells = result.rawCells();</span><br><span class="line">        <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rowKey</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneRow(cell));</span><br><span class="line">            <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneFamily(cell));</span><br><span class="line">            <span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneQualifier(cell));</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneValue(cell));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;rowKey = &quot;</span> + rowKey + <span class="string">&quot;, f = &quot;</span> + f + <span class="string">&quot;, column = &quot;</span> + column + <span class="string">&quot;, value = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        student.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全表扫描</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 准备table对象</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备scan对象</span></span><br><span class="line">        <span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行扫描</span></span><br><span class="line">        <span class="type">ResultScanner</span> <span class="variable">resultScanner</span> <span class="operator">=</span> student.getScanner(scan);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Result result : resultScanner) &#123;</span><br><span class="line">            Cell[] cells = result.rawCells();</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">rowKey</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneRow(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneFamily(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneQualifier(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneValue(cell));</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;rowKey = &quot;</span> + rowKey + <span class="string">&quot;, f = &quot;</span> + f + <span class="string">&quot;, column = &quot;</span> + column + <span class="string">&quot;, value = &quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        student.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定scan开始rowkey和结束rowkey</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanStartEndData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 准备table对象</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备scan对象</span></span><br><span class="line">        <span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定查询的rowkey区间</span></span><br><span class="line">        scan.setStartRow(Bytes.toBytes(<span class="string">&quot;001&quot;</span>));</span><br><span class="line">        scan.setStopRow(Bytes.toBytes(<span class="string">&quot;2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行扫描</span></span><br><span class="line">        <span class="type">ResultScanner</span> <span class="variable">resultScanner</span> <span class="operator">=</span> student.getScanner(scan);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Result result : resultScanner) &#123;</span><br><span class="line">            Cell[] cells = result.rawCells();</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">rowKey</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneRow(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneFamily(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneQualifier(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneValue(cell));</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;rowKey = &quot;</span> + rowKey + <span class="string">&quot;, f = &quot;</span> + f + <span class="string">&quot;, column = &quot;</span> + column + <span class="string">&quot;, value = &quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        student.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放连接</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="协处理器"><a href="#协处理器" class="headerlink" title="协处理器"></a>协处理器</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HBase基础&quot;&gt;&lt;a href=&quot;#HBase基础&quot; class=&quot;headerlink&quot; title=&quot;HBase基础&quot;&gt;&lt;/a&gt;HBase基础&lt;/h1&gt;&lt;h2 id=&quot;HBase简介&quot;&gt;&lt;a href=&quot;#HBase简介&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="HBase" scheme="https://setcreed.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>01-hadoop安装配置</title>
    <link href="https://setcreed.github.io/posts/1816c0d/"/>
    <id>https://setcreed.github.io/posts/1816c0d/</id>
    <published>2022-03-04T14:13:52.000Z</published>
    <updated>2024-03-04T14:47:21.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hadoop安装配置"><a href="#hadoop安装配置" class="headerlink" title="hadoop安装配置"></a>hadoop安装配置</h1><p>Linux安装使用vagrant</p><p>vagrantfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">(1..3).each do |i|</span><br><span class="line">config.vm.define &quot;hadoop-node#&#123;i&#125;&quot; do |node|</span><br><span class="line">node.vm.box=&quot;centos7&quot;</span><br><span class="line"></span><br><span class="line">node.vm.hostname=&quot;hadoop-node#&#123;i&#125;&quot;</span><br><span class="line"></span><br><span class="line">node.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.#&#123;110+i&#125;&quot;, netmask: &quot;255.255.255.0&quot;</span><br><span class="line"></span><br><span class="line">node.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">v.name = &quot;hadoop-node#&#123;i&#125;&quot;</span><br><span class="line">v.memory = 4096</span><br><span class="line">v.cpus = 4</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><div class="table-container"><table><thead><tr><th>框架</th><th>hadoop-node1</th><th>hadoop-node2</th><th>hadoop-node3</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode、DataNode</td><td>DataNode</td><td>SecondaryNameNode、DataNode</td></tr><tr><td>YARN</td><td>NodeManager</td><td>NodeManager</td><td>NodeManager、ResourceManager</td></tr></tbody></table></div><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p>Hadoop集群配置 = HDFS集群配置 + MapReduce集群配置 + Yarn集群配置</p><p>HDFS集群配置</p><ul><li>将JDK路径明确配置给HDFS（修改hadoop-env.sh</li><li>指定NameNode节点以及数据存储目录（修改core-site.xml）</li><li>指定SecondaryNameNode节点（修改hdfs-site.xml）</li><li>指定DataNode从节点（修改etc/hadoop/slaves文件，每个节点配置信息占一行）</li></ul><p>MapReduce集群配置</p><ul><li>将JDK路径明确配置给MapReduce（修改mapred-env.sh）</li><li>指定MapReduce计算框架运行Yarn资源调度框架（修改mapred-site.xml）</li></ul><p>Yarn集群配置</p><ul><li>将JDK路径明确配置给Yarn（修改yarn-env.sh）</li><li>指定ResourceManager老大节点所在计算机节点（修改yarn-site.xml）</li><li>指定NodeManager节点（会通过slaves文件内容确定）</li></ul><h3 id="HDFS集群配置"><a href="#HDFS集群配置" class="headerlink" title="HDFS集群配置"></a>HDFS集群配置</h3><ul><li>配置：hadoop-env.sh，将JDK路径明确配置给HDFS</li><li>指定NameNode节点以及数据存储目录（修改core-site.xml）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop-node1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/servers/hadoop-2.9.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>指定secondarynamenode节点(修改hdfs-site.xml)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node3:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--副本数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>指定datanode从节点(修改slaves文件，每个节点配置信息占一行)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop-node1</span><br><span class="line">hadoop-node2</span><br><span class="line">hadoop-node3</span><br></pre></td></tr></table></figure><h3 id="MapReduce集群配置"><a href="#MapReduce集群配置" class="headerlink" title="MapReduce集群配置"></a>MapReduce集群配置</h3><ul><li>指定MapReduce使用的jdk路径（修改mapred-env.sh）</li><li>指定MapReduce计算框架运行Yarn资源调度框架(修改mapred-site.xml)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Yarn集群配置"><a href="#Yarn集群配置" class="headerlink" title="Yarn集群配置"></a>Yarn集群配置</h3><ul><li>指定JDK路径</li><li>指定ResourceMnager的master节点信息(修改yarn-site.xml)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>指定NodeManager节点（slaves文件已修改）</li></ul><h3 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h3><ul><li>配置mapred-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>启动历史服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure><h3 id="配置日志的聚集"><a href="#配置日志的聚集" class="headerlink" title="配置日志的聚集"></a>配置日志的聚集</h3><p>日志聚集：应用(Job)运行完成以后，将应用运行日志信息从各个task汇总上传到HDFS系统上。</p><p>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。</p><p>注意：开启日志聚集功能，需要重新启动NodeManager 、ResourceManager和 HistoryManager。</p><ul><li>配置yarn-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志聚集功能使能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间设置7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="hive配置"><a href="#hive配置" class="headerlink" title="hive配置"></a>hive配置</h1><p>先安装mysql</p><p>创建hive用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户设置口令、授权、刷新</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;12345678&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>hive配置：</p><p>vim hive-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- hive元数据的存储位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop-node3:3306/hivemetadata?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指定驱动程序 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 连接数据库的用户名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 连接数据库的口令 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 数据默认的存储位置(HDFS) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>location of default database for the warehouse<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在命令行中，显示当前操作的数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether to include the current database in the Hive prompt.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在命令行中，显示数据的表头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 操作小规模数据时，使用本地模式，提高效率 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Let Hive determine whether to run in local mode automatically<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将MySQL jdbc驱动拷贝到hive的lib下</p><p>初始化元数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p>安装hue</p><p>编译安装</p><p>到官方网站下载 hue-release-4.3.0.zip；上传至服务器，并解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install unzip</span><br><span class="line">unzip hue-release-4.3.0.zip</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要Python支持(Python 2.7+ / Python 3.5+)</span></span><br><span class="line">python --version</span><br><span class="line"><span class="comment"># 在 CentOS 系统中安装编译 Hue 需要的依赖库</span></span><br><span class="line">yum install ant asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libxml2-devel libxslt-devel make mysql mysql-devel openldap-devel python-devel sqlite-devel gmp-devel</span><br><span class="line"></span><br><span class="line">yum install -y rsync</span><br></pre></td></tr></table></figure><p>备注： </p><p>以上依赖仅适用CentOS/RHEL 7.X，其他情况请参考<a href="https://docs.gethue.com/administrator/installation/dependencies/">https://docs.gethue.com/administrator/installation/dependencies/</a> 安装Hue的节点上最好没有安装过MySQL，否则可能有版本冲突 安装过程中需要联网，网络不好会有各种奇怪的问题</p><p>编译 Hue 还需要 Maven 环境，因此在编译前需要安装 Maven。 下载 apache-maven-3.6.3-bin.tar.gz，上传虚拟机解压缩，添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/opt/lagou/servers/apache-maven-3.6.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">mvn --version</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 hue 源码目录，进行编译。 使用 PREFIX 指定安装 Hue 的路径</span></span><br><span class="line"><span class="built_in">cd</span> /opt/software/hue-release-4.3.0</span><br><span class="line">PREFIX=/opt/lagou/servers make install</span><br><span class="line"><span class="built_in">cd</span> /opt/lagou/servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想把HUE从移动到另外一个地方，由于HUE使用了Python包的一些绝对路径,移动之后则必须执行以下命令：</span></span><br><span class="line"><span class="comment"># 这里不要执行</span></span><br><span class="line"><span class="built_in">rm</span> app.reg</span><br><span class="line"><span class="built_in">rm</span> -r build</span><br><span class="line">make apps</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改hadoop配置</p><p>在hdfs-site.xml增加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HUE --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在core-site.xml增加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HUE --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hue.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hue.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hdfs.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hdfs.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑httpfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HUE --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>httpfs.proxyuser.hue.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>httpfs.proxyuser.hue.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hue配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 Hue 安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/servers/hue</span><br><span class="line"><span class="comment"># 进入配置目录</span></span><br><span class="line"><span class="built_in">cd</span> desktop/conf</span><br><span class="line"><span class="comment"># 复制一份HUE的配置文件，并修改复制的配置文件</span></span><br><span class="line"><span class="built_in">cp</span> pseudo-distributed.ini.tmpl pseudo-distributed.ini</span><br><span class="line">vim pseudo-distributed.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># [desktop]</span></span><br><span class="line">http_host=hadoop-node2</span><br><span class="line">http_port=8000</span><br><span class="line">is_hue_4=<span class="literal">true</span></span><br><span class="line">time_zone=Asia/Shanghai</span><br><span class="line">dev=<span class="literal">true</span></span><br><span class="line">server_user=hue</span><br><span class="line">server_group=hue</span><br><span class="line">default_user=hue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 211行左右。禁用solr，规避报错</span></span><br><span class="line">app_blacklist=search</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[database]]。Hue默认使用SQLite数据库记录相关元数据，替换为mysql</span></span><br><span class="line">engine=mysql</span><br><span class="line">host=hadoop-node3</span><br><span class="line">port=3306</span><br><span class="line">user=hive</span><br><span class="line">password=123456</span><br><span class="line">name=hue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1003行左右，Hadoop配置文件的路径</span></span><br><span class="line">hadoop_conf_dir=/opt/servers/hadoop-2.9.2/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在mysql中创建数据库hue，用来存放元数据</span></span><br><span class="line">mysql -uhive -p12345678</span><br><span class="line">mysql&gt; create database hue;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">build/env/bin/hue syncdb</span><br><span class="line">build/env/bin/hue migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查数据</span></span><br></pre></td></tr></table></figure><p>启动hue服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加 hue 用户和用户组</span></span><br><span class="line">groupadd hue</span><br><span class="line">useradd -g hue hue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在hue安装路径下执行</span></span><br><span class="line">build/env/bin/supervisor</span><br></pre></td></tr></table></figure><p>web地址：hadoop-node2:8000</p><p>Hue整合Hadoop、Hive</p><p>修改参数文件 /opt/servers/hue/desktop/conf/pseudo-distributed.ini</p><p>集成HDFS、YARN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 211 行。 没有安装 Solr，禁用，否则一直报错</span></span><br><span class="line">app_blacklist=search</span><br><span class="line"></span><br><span class="line"><span class="comment"># [hadoop] -- [[hdfs_clusters]] -- [[[default]]]</span></span><br><span class="line"><span class="comment"># 注意端口号。下面语句只要一个</span></span><br><span class="line"><span class="comment"># fs_defaultfs=hdfs://hadoop-node1:8020</span></span><br><span class="line">fs_defaultfs=hdfs://hadoop-node1:9000</span><br><span class="line"></span><br><span class="line">webhdfs_url=http://hadoop-node1:50070/webhdfs/v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 211 行</span></span><br><span class="line">hadoop_conf_dir=/opt/servers/hadoop-2.9.2/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># [hadoop] -- [[yarn_clusters]] -- [[[default]]]</span></span><br><span class="line">resourcemanager_host=hadoop-node3</span><br><span class="line">resourcemanager_port=8032</span><br><span class="line">submit_to=True</span><br><span class="line">resourcemanager_api_url=http://hadoop-node3:8088</span><br><span class="line">proxy_api_url=http://hadoop-node3:8088</span><br><span class="line">history_server_api_url=http://hadoop-node3:19888</span><br></pre></td></tr></table></figure><p>集成Hive</p><p>集成Hive需要启动 Hiveserver2 服务，在linux123节点上启动 Hiveserver2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [beeswax]</span></span><br><span class="line">hive_server_host=hadoop-node3</span><br><span class="line">hive_server_port=10000</span><br><span class="line">hive_conf_dir=/opt/lagou/hive-2.3.7/conf</span><br></pre></td></tr></table></figure><p>集成MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [librdbms] -- [[databases]] -- [[[mysql]]]；1639行</span></span><br><span class="line"><span class="comment"># 注意：1639行原文： ##[[mysql]] =&gt; [[mysql]]；两个##要去掉!</span></span><br><span class="line">[[[mysql]]]</span><br><span class="line">nice_name=<span class="string">&quot;My SQL DB&quot;</span></span><br><span class="line">name=hue</span><br><span class="line">engine=mysql</span><br><span class="line">host=hadoop-node3</span><br><span class="line">port=3306</span><br><span class="line">user=hive</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure><p>备注：name是数据库名，即 database 的名称</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hadoop安装配置&quot;&gt;&lt;a href=&quot;#hadoop安装配置&quot; class=&quot;headerlink&quot; title=&quot;hadoop安装配置&quot;&gt;&lt;/a&gt;hadoop安装配置&lt;/h1&gt;&lt;p&gt;Linux安装使用vagrant&lt;/p&gt;
&lt;p&gt;vagrantfile&lt;/p</summary>
      
    
    
    
    <category term="hadoop" scheme="https://setcreed.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop" scheme="https://setcreed.github.io/tags/hadoop/"/>
    
  </entry>
  
</feed>
