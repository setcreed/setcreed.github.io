<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伊甸园</title>
  
  
  <link href="https://setcreed.github.io/atom.xml" rel="self"/>
  
  <link href="https://setcreed.github.io/"/>
  <updated>2023-11-14T23:51:51.713Z</updated>
  <id>https://setcreed.github.io/</id>
  
  <author>
    <name>SetCreed</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>运维开发所需要知道的Linux基本知识</title>
    <link href="https://setcreed.github.io/posts/c9fd1d24/"/>
    <id>https://setcreed.github.io/posts/c9fd1d24/</id>
    <published>2023-11-04T14:27:22.000Z</published>
    <updated>2023-11-14T23:51:51.713Z</updated>
    
    <content type="html"><![CDATA[<p>目录：</p><ul><li><a href="https://setcreed.github.io/posts/b2fa1aad">Linux的Namespace和CGroup</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://setcreed.github.io/posts/b2fa1aad&quot;&gt;Linux的Namespace和CGroup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux的Namespace和CGroup</title>
    <link href="https://setcreed.github.io/posts/b2fa1aad/"/>
    <id>https://setcreed.github.io/posts/b2fa1aad/</id>
    <published>2023-11-04T12:39:28.000Z</published>
    <updated>2023-11-14T23:51:51.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这段时间继续学习kubernetes，了解Kubernetes的pod和容器的区别，期间不断深入挖掘，发现需要了解Linux的Namespace、CGroup以及容器运行时等知识。以下内容就当复习一下Linux Namespace和CGroup了。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前我们提到的虚拟化技术、容器技术都能做到资源层面上的隔离和限制。</p><p>而我们关心的容器技术，它实现资源层面上的隔离和限制，依赖于Linux的Namespace和CGroup技术，这是容器技术的基石。下面就重点介绍一下。</p><h1 id="Linux的Namespace"><a href="#Linux的Namespace" class="headerlink" title="Linux的Namespace"></a>Linux的Namespace</h1><p>linux Namespace提供了一种内核级别隔离系统资源的方法，通过将系统的全局资源放在不同的Namespace中，来实现资源隔离的目的。不同Namespace的程序，拥有独立系统资源。</p><p>常见的隔离有</p><ul><li><p>Mount：隔离文件系统挂载点</p></li><li><p>UTS：隔离主机名和域名信息</p></li><li><p>IPC：隔离进程间通信</p></li><li><p>PID：隔离进程的ID</p></li><li><p>Network：隔离网络资源</p></li><li><p>User：隔离用户和用户组的ID</p></li></ul><p>当然后面内核更新，又增加了一些Namespace的种类</p><div class="table-container"><table><thead><tr><th style="text-align:center">Namespace类型</th><th style="text-align:center">隔离资源</th><th style="text-align:center">kernel版本</th></tr></thead><tbody><tr><td style="text-align:center">IPC</td><td style="text-align:center">System V IPC和POSIX消息队列</td><td style="text-align:center">2.6.19</td></tr><tr><td style="text-align:center">Network</td><td style="text-align:center">网络设备、网络协议栈、网络端口</td><td style="text-align:center">2.6.29</td></tr><tr><td style="text-align:center">PID</td><td style="text-align:center">进程</td><td style="text-align:center">2.6.14</td></tr><tr><td style="text-align:center">Mount</td><td style="text-align:center">挂载点</td><td style="text-align:center">2.4.19</td></tr><tr><td style="text-align:center">UTS</td><td style="text-align:center">主机名和域名</td><td style="text-align:center">2.6.19</td></tr><tr><td style="text-align:center">USR</td><td style="text-align:center">用户和用户组</td><td style="text-align:center">3.8</td></tr></tbody></table></div><p>查看Linux下的Namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /proc/$$/ns  </span><br><span class="line"><span class="comment">## $$ 代表当前的shell进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式为</span></span><br><span class="line"><span class="comment"># namespace类型:[inode number]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个进程的某个namespace文件指向同一个链接文件，说明其相关资源在同一个namespace中</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051325985.png" alt=""></p><h2 id="Network-Namespace-网络命名空间"><a href="#Network-Namespace-网络命名空间" class="headerlink" title="Network Namespace 网络命名空间"></a>Network Namespace 网络命名空间</h2><p>介绍 一下 <code>ip netns</code> 命令</p><p>用来管理网络命名空间 实现网络隔离</p><p>每个网络命名空间都提供了一个完全独立的网络协议栈，包括网络接口设备、IPV4和IPV6协议栈、路由表、sockets等</p><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip netns list  <span class="comment"># 列出网络命名空间 /var/run/netns</span></span><br><span class="line">ip netns add NAME   <span class="comment">#添加网络命名空间</span></span><br><span class="line">ip netns delete <span class="comment">#删除指定命名空间</span></span><br><span class="line">ip netns <span class="built_in">exec</span> NAME cmd <span class="comment">#在指定ns中执行命令</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051431600.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051433576.png" alt=""></p><h3 id="Namespace网络隔离"><a href="#Namespace网络隔离" class="headerlink" title="Namespace网络隔离"></a>Namespace网络隔离</h3><p>准备实际操作一番。</p><p>使用命令行 创建两个网络命名空间，通过veth对连接在一起，使得两个网络命名空间互通</p><h4 id="veth对"><a href="#veth对" class="headerlink" title="veth对"></a>veth对</h4><p>解释：VETH（Virtual Ethernet）设备是Linux内核中的一种虚拟网络设备，通常以成对的方式出现。VETH设备通过一个虚拟的以太网链路连接起来，可以用于各种网络相关的任务，如网络命名空间隔离、容器网络等。通过VETH设备，可以在不同的网络命名空间之间建立通信。</p><p>主要特点：</p><ul><li>成对出现</li><li>一端数据会发送给另一端</li></ul><h4 id="预计的效果"><a href="#预计的效果" class="headerlink" title="预计的效果"></a>预计的效果</h4><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051449762.png" alt=""></p><p>这样两者可以相互ping通</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、在宿主机上创建veth对</span></span><br><span class="line">ip <span class="built_in">link</span> add name veth1 <span class="built_in">type</span> veth peer name veth2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、创建两个net ns</span></span><br><span class="line">ip netns add ns1 &amp;&amp; ip netns add ns2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、在宿主机上把veth设备 设置到ns上</span></span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> veth1 netns ns1 &amp;&amp; ip <span class="built_in">link</span> <span class="built_in">set</span> veth2 netns ns2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、利用exec命令 设置ip</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip addr add <span class="built_in">local</span> 10.12.0.2/24 dev veth1</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip addr add <span class="built_in">local</span> 10.12.0.3/24 dev veth2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、启用设备</span></span><br><span class="line">ip netns <span class="built_in">exec</span> ns1 ip <span class="built_in">link</span> <span class="built_in">set</span> veth1 up</span><br><span class="line">ip netns <span class="built_in">exec</span> ns2 ip <span class="built_in">link</span> <span class="built_in">set</span> veth2 up</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231105145833.png" alt=""></p><div class="note warning simple"><p>这只是基本联通了，数据也没有，没什么用的。。。</p></div><h2 id="UTS-Namespace-主机名隔离"><a href="#UTS-Namespace-主机名隔离" class="headerlink" title="UTS Namespace 主机名隔离"></a>UTS Namespace 主机名隔离</h2><p>这里使用<code>unshare</code> 命令演示，unshare是Linux 集成工具，使用它可以创建不同的namespace</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unshare --fork --uts /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># --fork fork出一个进程</span></span><br><span class="line"><span class="comment"># --uts 针对的是主机名隔离</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051521629.png" alt=""></p><h2 id="Mount-Namespace-隔离文件挂载"><a href="#Mount-Namespace-隔离文件挂载" class="headerlink" title="Mount Namespace  隔离文件挂载"></a>Mount Namespace  隔离文件挂载</h2><p>挂载的进程可以查看 /proc/[pid]/mounts、/proc/[pid]/mountinfo、/proc/[pid]/mountstats等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/mytemp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户隔离、挂载隔离</span></span><br><span class="line">unshare --fork --uts --mount /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载文件</span></span><br><span class="line">mount -t tmpfs myfs /mnt/mytemp/</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051553539.png" alt=""></p><p>执行<code>ls -l /proc/self/ns</code></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311051557020.png" alt=""></p><p>由于开了主机名隔离和挂载隔离，这两个 namespace的id 不一致</p><h2 id="USR-Namespace-用户隔离"><a href="#USR-Namespace-用户隔离" class="headerlink" title="USR Namespace 用户隔离"></a>USR Namespace 用户隔离</h2><p>使用的是centos7.9系统</p><ul><li>用户隔离，用来隔离user权限</li><li>使用unshare命令在linux上创建不同的namespace</li></ul><p>我们使用alpine来模拟 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先要切换到非root用户</span></span><br><span class="line">https://dl-cdn.alpinelinux.org/alpine/v3.12/releases/x86_64/alpine-minirootfs-3.12.6-x86_64.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> alpine </span><br><span class="line">tar -zxvf alpine-minirootfs-3.12.6-x86_64.tar.gz -C alpine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安装一些库</span></span><br><span class="line">curl https://forensics.cert.org/cert-forensics-tools-release-el7.rpm -o cert-forensics-tools-release-el7.rpm</span><br><span class="line">rpm -Uvh cert-forensics-tools-release-el7.rpm</span><br><span class="line">yum --enablerepo=forensics install -y musl-libc-static</span><br></pre></td></tr></table></figure><p>开始用户隔离</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unshare --fork --user /home/cwz/alpine/bin/busybox sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能会不成功，报参数异常</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果要创建出用户空间，<code>/proc/sys/user/max_user_namespaces</code> 这个值需要更改，默认是0</li><li><code>echo 65535 &gt; /proc/sys/user/max_user_namespaces</code>  需要切换成root</li></ul><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111104157.png" alt=""></p><p>此时切换回普通用户，执行 用户隔离命令</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111104659.png" alt=""></p><p>默认情况下会映射 <code>/proc/sys/kernel/overflowuid</code></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111105207.png" alt=""></p><p>而我们使用docker 进入到容器内部查看 用户id，发现是0</p><p>其实我们宿主机普通用户1000  映射到容器中id（对应0），而没有任何设置的情况下，这个容器的root其实就是宿主机的1000，并不是一个真正的root用户。 但是容器内显示的uid是0，其实是被我们进行用户隔离了且映射了，所以就造成了我们看到uid是0的情况。</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111105043.png" alt=""></p><p>接下来我们在alpine上操作，也要显示uid是0的效果</p><p>我们需要做一些权限处理</p><p>为busybox设置capability</p><ul><li>Linux内核 2.2 之后引入了capabilities机制，来对root权限进行更加细颗粒度的划分。如果进程不是特权进程，而且也没有root的有效id，系统就会去检查进程的capabilities，来确认该进程是否有执行特权操作的权限</li></ul><p>给我们执行的进程设置特权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> cap_setgid,cap_setuid+ep /home/cwz/alpine/bin/busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">getcap</span> /home/cwz/alpine/bin/busybox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消</span></span><br><span class="line">sudo <span class="built_in">setcap</span> cap_setgid,cap_setuid-ep /home/cwz/alpine/bin/busybox</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/20231111111242.png" alt=""></p><p>在busybox下执行</p><ul><li>echo $$  查看当前进程id（此时我们还没做进程隔离，所以显示的是宿主机上的进程id） 下图id是 16263</li><li>映射用户的方法是，添加映射信息到 <code>/proc/16263/uid_map</code>和<code>/proc/16263/gid_map</code>中</li><li>一共三个数字，譬如： 0、1000、256<ul><li>0 就是进程起始id</li><li>第二个数字是父namespace（可以嵌套）</li><li>第二、三个数字代表：父namespace中的 1000～1256 映射到 新namespace 的0～256</li></ul></li></ul><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311111115066.png" alt=""></p><p>继续操作，进行映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;0 1000 256&#x27;</span>  &gt; /proc/16263/uid_map</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;0 1000 256&#x27;</span>  &gt; /proc/16263/gid_map</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311111130129.png" alt=""></p><p>参考文档：</p><p><a href="https://man7.org/linux/man-pages/man7/user_namespaces.7.html">https://man7.org/linux/man-pages/man7/user_namespaces.7.html</a></p><h2 id="使用go代码实现隔离Namespace"><a href="#使用go代码实现隔离Namespace" class="headerlink" title="使用go代码实现隔离Namespace"></a>使用go代码实现隔离Namespace</h2><h3 id="实现主机名隔离"><a href="#实现主机名隔离" class="headerlink" title="实现主机名隔离"></a>实现主机名隔离</h3><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── cmds</span><br><span class="line">│   ├── exec.go</span><br><span class="line">│   ├── root.go</span><br><span class="line">│   └── run.go</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>exec.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> execCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;error args&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">runArgs := []<span class="type">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">runArgs = args[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runCmd := exec.Command(ALPINE+args[<span class="number">0</span>], runArgs...)</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>run.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">SELF   = <span class="string">&quot;/proc/self/exe&quot;</span>   <span class="comment">// Linux中代表当前的程序</span></span><br><span class="line">ALPINE = <span class="string">&quot;/root/alpine&quot;</span> <span class="comment">// 写死的路径，便于测试</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> runCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">runCmd := exec.Command(SELF, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/bin/busybox&quot;</span>, <span class="string">&quot;sh&quot;</span>)</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行入口main.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;gons/cmds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmds.Execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Linux终端执行 go run main.go run 发现没有实现主机名隔离，需要修改一下</p><p>先熟悉一下几个宏定义：</p><ul><li>IPC                CLONE_NEWIPC    进程通信相关</li><li>Network      CLONE_NEWNET    网络</li><li>Mount          CLONE_NEWNS      挂载</li><li>PID                CLONE_NEWPID     进程</li><li>User              CLONE_NEWUSER   用户</li><li>UTS               CLONE_NEWUTS      主机名</li></ul><p>相应的结果内核API定义：</p><ul><li>clone：创建新进程，并放入新的namespace中</li><li>setns：当前进程加入已有的namespace中</li><li>unshare：移除进程（从现有的namespace中）</li></ul><p>在run.go文件中修改：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> runCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">runCmd := exec.Command(SELF, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/bin/busybox&quot;</span>, <span class="string">&quot;sh&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    # 加入的代码：</span><br><span class="line">runCmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class="line">Cloneflags: syscall.CLONE_NEWUTS,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">.....</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新准备环境"><a href="#重新准备环境" class="headerlink" title="重新准备环境"></a>重新准备环境</h3><p>之前下载的alpine可能有些兼容性问题，所以这次使用docker 克隆一个镜像文件出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull alpine:3.12</span><br><span class="line">docker run -d alpine:3.12 top -b</span><br><span class="line">docker <span class="built_in">export</span> -o alpine.tar 容器<span class="built_in">id</span></span><br><span class="line"><span class="built_in">mkdir</span> alpine &amp;&amp; tar xf alpine.tar -C alpine</span><br></pre></td></tr></table></figure><p>当我们使用docker exec 进入容器  显示的是根目录，而之前我们使用代码测试的是当前目录，显然不合理，所以我们需要修改代码，使得也进入根目录。</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132155057.png" alt=""></p><p>只需要修改两点：</p><ul><li>syscall.Chroot  可以用来在指定根目录下运行（chroot）</li><li>os.Chdir 可以来替换当前的工作目录</li></ul><p>修改exec.go文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> execCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;error args&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">runArgs := []<span class="type">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">runArgs = args[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := syscall.Chroot(alpine) <span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">err = os.Chdir(<span class="string">&quot;/&quot;</span>)  <span class="comment">// 替换</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runCmd := exec.Command(args[<span class="number">0</span>], runArgs...)</span><br><span class="line">......</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132157244.png" alt=""></p><h3 id="用户隔离"><a href="#用户隔离" class="headerlink" title="用户隔离"></a>用户隔离</h3><p>run.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">SELF   = <span class="string">&quot;/proc/self/exe&quot;</span> <span class="comment">// Linux中代表当前的程序</span></span><br><span class="line">ALPINE = <span class="string">&quot;/root/alpine&quot;</span>   <span class="comment">// 写死的路径，便于测试</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> runCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">runCmd := exec.Command(SELF, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">fmt.Println(runCmd.Args)</span><br><span class="line">runCmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class="line">Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWUSER,</span><br><span class="line">UidMappings: []syscall.SysProcIDMap&#123;</span><br><span class="line">&#123;</span><br><span class="line">ContainerID: <span class="number">0</span>,</span><br><span class="line">HostID:      os.Getuid(),</span><br><span class="line">Size:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">GidMappings: []syscall.SysProcIDMap&#123;</span><br><span class="line">&#123;</span><br><span class="line">ContainerID: <span class="number">0</span>,</span><br><span class="line">HostID:      os.Getgid(),</span><br><span class="line">Size:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>如果执行用户隔离程序时出现错误：<code>fork/exec /proc/self/exe: invalid argument</code>，需要修改<code>/proc/sys/user/max_user_namespaces</code>的默认值</li></ul><h3 id="进程隔离"><a href="#进程隔离" class="headerlink" title="进程隔离"></a>进程隔离</h3><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unshare --fork /root/alpine/bin/busybox sh</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132231993.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行隔离</span></span><br><span class="line"><span class="comment"># 需要挂载隔离，因为需要把 /proc 挂载进来，ps命令依赖这个文件夹</span></span><br><span class="line">unshare --fork --pid --mount /root/alpine/bin/busybox sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line">mount -t proc proc /proc</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132234513.png" alt=""></p><p>此时就实现了进程隔离，busybox进程id为1</p><p>代码实现：</p><p>run.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">SELF   = <span class="string">&quot;/proc/self/exe&quot;</span> <span class="comment">// Linux中代表当前的程序</span></span><br><span class="line">ALPINE = <span class="string">&quot;/root/alpine&quot;</span>   <span class="comment">// 写死的路径，便于测试</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> runCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;run&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">runCmd := exec.Command(SELF, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">fmt.Println(runCmd.Args)</span><br><span class="line">runCmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class="line"><span class="comment">// 用户隔离</span></span><br><span class="line">Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWUSER | syscall.CLONE_NEWNS | syscall.CLONE_NEWPID,</span><br><span class="line">UidMappings: []syscall.SysProcIDMap&#123;</span><br><span class="line">&#123;</span><br><span class="line">ContainerID: <span class="number">0</span>,</span><br><span class="line">HostID:      os.Getuid(),</span><br><span class="line">Size:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">GidMappings: []syscall.SysProcIDMap&#123;</span><br><span class="line">&#123;</span><br><span class="line">ContainerID: <span class="number">0</span>,</span><br><span class="line">HostID:      os.Getgid(),</span><br><span class="line">Size:        <span class="number">1</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>exec.go:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/cobra&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ENV = <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> execCommand = &amp;cobra.Command&#123;</span><br><span class="line">Use: <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) == <span class="number">0</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;error args&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">runArgs := []<span class="type">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">runArgs = args[<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := syscall.Chroot(ALPINE) <span class="comment">// 设置根目录</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err = os.Chdir(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">syscall.Mount(<span class="string">&quot;proc&quot;</span>, <span class="string">&quot;/proc&quot;</span>, <span class="string">&quot;proc&quot;</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>)  <span class="comment">// 挂载</span></span><br><span class="line">runCmd := exec.Command(args[<span class="number">0</span>], runArgs...)</span><br><span class="line">runCmd.Stdin = os.Stdin</span><br><span class="line">runCmd.Stdout = os.Stdout</span><br><span class="line">runCmd.Stderr = os.Stderr</span><br><span class="line">runCmd.Env = []<span class="type">string</span>&#123;ENV&#125; <span class="comment">// 设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> err := runCmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">runCmd.Wait()</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311132301867.png" alt=""></p><h1 id="Linux的CGroups"><a href="#Linux的CGroups" class="headerlink" title="Linux的CGroups"></a>Linux的CGroups</h1><p>CGroups (Control Groups) 是Linux下用于对一个或一组进程进行资源控制和监控的机制。利用CGroups可以对诸如CPU使用时间、内存、磁盘I/O等进程所需资源进行限制。kubernetes允许用户为pod的容器申请资源，当容器在计算节点上运行起来时，可以通过CGroups来完成资源的分配和限制。</p><p>CGroups为每种可以控制的资源定义了一个子系统。</p><p>文档：<a href="https://man7.org/linux/man-pages/man7/cgroups.7.html">https://man7.org/linux/man-pages/man7/cgroups.7.html</a></p><p>任务（task）：理解为进程</p><ul><li><p>控制组（cgroup）：用来设定资源的配额。任务（进程）可以加入到某个组，也可以迁移。可以包含多个子系统</p></li><li><p>层级（hierarchy）：控制组有层级关系，类似树的结构，子节点的控制组继承父控制组的属性（资源配额、限制等）</p></li><li><p>子系统（subsystem）：也叫资源控制器，比如memory子系统可以控制进程内的使用。子系统需要加入到某个层级，然后该层级的所有控制组，均受到这个子系统的控制</p><ul><li><p>cpu：限制进程的使用率</p></li><li><p>cpuacct：统计cgroups中的进程的cpu的实验报告</p></li><li><p>cpuset：为cgroups中的进程分配单独的cpu节点或者内存节点</p></li><li><p>memory：限制进程的memory使用量</p></li><li><p>blkio：限制进程的块设备io</p></li><li><p>devices：控制进程能够访问某些设备</p></li><li><p>net_cls：标记cgroups中进程的网络数据包，然后可以使用tc模块（traffic control）对数据包进行控制</p></li><li><p>net_prio：限制进程网络流量的优先级</p></li><li><p>huge_tlb：限制hugeTLB的使用</p></li><li><p>freezer ：挂起或者恢复cgroups中的进程</p></li><li><p>ns：控制cgrouops中的进程使用不同的namespace</p></li></ul></li></ul><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142135713.png" alt=""></p><p>还是直接演练一番来的实在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y libcgroup-tools.x86_64</span><br><span class="line"><span class="comment"># 用来操作cgroup相关的命令</span></span><br></pre></td></tr></table></figure><p>cgroups以文件挂载的方式存在，其中 <code>/sys/fs/cgroup</code> 这个文件夹 是挂载到tmpfs(临时内存文件夹)的</p><h2 id="限制CPU使用率"><a href="#限制CPU使用率" class="headerlink" title="限制CPU使用率"></a>限制CPU使用率</h2><p>进入<code>/sys/fs/cgroup/cpu</code>，创建一个文件夹myapp，进入myapp，发现会自动生成对应的配置文件</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142142595.png" alt=""></p><p>首先先解释一下这几个文件是干啥的</p><ul><li>cpu.shares  是在该cgroup能获得CPU使用时间的相对值，最小值为2。如果两个cgroup的cpu.shares都为100，那么他们可以得到相同的CPU时间。如果另外一个cgroup的cpu.shares是200，那么他可以得到两倍于cpu.shares=100的cgroup获取的CPU时间。但是如果一个cgroup中的任务处在空闲状态，不使用任何的CPU时间，则该CPU时间就可以被其他的cgroup所借用。也就是说 cpu.shares 主要表示当系统繁忙时，给该cgroup分配的CPU时间份额。</li><li>cpu.cfs_period_us和cpu.cfs_quota_us   cpu.cfs_period_us用于配置时间周期长度，单位为us（微秒）。cpu.cfs_quota_us用来配置当前cgroup在cpu.cfs_period_us 时间内最多使用的CPU时间数，单位为us（微秒）。这两个参数被用来设置该cgroup能使用的CPU的时间上限。如果不想对进程使用的CPU设置限制，可以将cpu.cfs_quota_us 设置为-1。</li><li>cpu.stat  cgroup内的进程使用的CPU时间统计</li><li>cpuacct.usage    包含该cgroup及其子cgroup下进程使用CPU的时间，单位是ns（纳秒）</li></ul><p>具体操作：</p><ul><li>随便写个死循环程序，然后编译上传到服务器</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  i:=<span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    i++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142225430.png" alt=""></p><p>可以看到，如果不限制，直接cpu打满</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd 进入这个myapp</span></span><br><span class="line"><span class="built_in">cd</span> /sys/fs/cgroup/cpu/myapp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 100000 &gt; cpu.cfs_period_us  <span class="comment"># 一个CFS调度时间周期长度，默认100000微妙</span></span><br><span class="line"><span class="built_in">echo</span> 10000 &gt; cpu.cfs_quota_us <span class="comment"># 在上面一个周期内，允许运行的时间是10000微秒，默认 -1 不限制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cpu.cfs_quota_us / cpu.cfs_period_us = 0.1  就好比只能使用0.1个cpu 10%</span></span><br></pre></td></tr></table></figure><p>CFS 表示 Completely Fair Scheduler 完全公平调度器（Linux内核功能，负责进程调度）</p><p>有关文档：<a href="https://kernel.org/doc/Documentation/scheduler/sched-bwc.txt">https://kernel.org/doc/Documentation/scheduler/sched-bwc.txt</a></p><p>接下来操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cgexec -g cpu:myapp ./myapp</span><br><span class="line"><span class="comment"># 该命令的作用是：在制定的cgroup中运行任务</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142238564.png" alt=""></p><p>还可以 把 当前运行程序的进程id放入 cgroup.procs 中来限制</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142243008.png" alt=""></p><h2 id="限制内存使用"><a href="#限制内存使用" class="headerlink" title="限制内存使用"></a>限制内存使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /sys/fs/cgroup/memory</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> myapp  <span class="comment"># 创建一个文件夹，不影响系统原来的memory</span></span><br></pre></td></tr></table></figure><p>随便写一个程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mem</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++ &#123;</span><br><span class="line">list = <span class="built_in">append</span>(list, rand.Int())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">go</span> mem()</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的程序 不断创建协程，协程 使用 <code>select &#123;&#125;</code> 卡住，协程不能退出，无法释放后内存，内存最终会用爆掉。</p><p>这是个内存泄漏的程序</p><p>需要修改两个文件：</p><ul><li><p>memory.limit_in_bytes  设定用户的内存（包括文件缓存）的最大用量。默认单位是字节。可加后缀代表更大的单位—— k</p><p>、m、g等</p></li><li><p>memory.swappiness  设置如何使用swap分区。swappiness=0 时 表示最大限度使用物理内存，然后才是swap空间</p><ul><li>假设swappiness=30，表示当内存使用到70%，就会开始swap交换</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1g &gt; memory.limit_in_bytes</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; memory.swappiness</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制程序运行</span></span><br><span class="line">cgexec -g memory:myapp ./mymem</span><br></pre></td></tr></table></figure><p>看效果：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142305002.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202311142305024.png" alt=""></p><p>当内存超过一定限制，这个程序就自动杀死了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这段时间继续学习kubernetes，了解Kubernetes的pod和容器的区别，期间不断深入挖掘，发现需要了解Linux的Namespace、CGroup以及容器运行时等知识。以下内容就当复习一下Linux Namespace和CGroup了。</summary>
      
    
    
    
    <category term="Namespace" scheme="https://setcreed.github.io/categories/Namespace/"/>
    
    <category term="CGroup" scheme="https://setcreed.github.io/categories/Namespace/CGroup/"/>
    
    
    <category term="Namespace" scheme="https://setcreed.github.io/tags/Namespace/"/>
    
    <category term="CGroup" scheme="https://setcreed.github.io/tags/CGroup/"/>
    
  </entry>
  
  <entry>
    <title>家用服务器搭建使用指南</title>
    <link href="https://setcreed.github.io/posts/afe9ffa9/"/>
    <id>https://setcreed.github.io/posts/afe9ffa9/</id>
    <published>2023-11-03T14:02:36.000Z</published>
    <updated>2023-11-14T23:51:51.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>现在有很多厂商推出自己的云服务器，我也用过不少，其中以阿里云、腾讯云、华为云的服务器较为好用，但是也非常贵。</p><p>我主要在云服务器上部署一些k8s集群，学习云原生用。但是我又不是时时刻刻在用，虽然可以按时付费，但总归是不方便的，所以我萌生了自己组装家用服务器的想法。</p><p>首先既然是家用服务器，那就要考虑经济性和噪音等方面的因素，所以我在网上找了一些资料，逛了一下图吧，综合一下，搞出如下配置：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242109148.png" alt=""></p><p>总共不到两千。</p><h2 id="安装PVE"><a href="#安装PVE" class="headerlink" title="安装PVE"></a>安装PVE</h2><p>考虑使用虚拟化技术，分出多个节点来使用。主要两种选择：</p><ul><li>Proxmox VE。<a href="https://pve.proxmox.com/">https://pve.proxmox.com/</a></li><li>VMware vSphere  <a href="https://docs.vmware.com/cn/VMware-vSphere/index.html">https://docs.vmware.com/cn/VMware-vSphere/index.html</a></li></ul><p>综合下来选择了 PVE（Proxmox VE）。 网上有很多它们之间的比较区别的文章</p><p>接下来我就要开始安装PVE了，其实也很简单，PVE就是基于debian之上使用KVM等虚拟化技术构建的系统，所以就和安装普通的linux系统一样。</p><p>首先下载镜像：<a href="https://www.proxmox.com/en/downloads">https://www.proxmox.com/en/downloads</a>     下载最新的镜像就好了。</p><p>这里推荐使用Ventoy制作U盘启动盘 <a href="https://www.ventoy.net/cn/">https://www.ventoy.net/cn/</a></p><p>安装过程就很稀松平常了。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li><p>安装PVE需要主板BIOS开启虚拟化支持，网上搜一下就知道了</p></li><li><p>安装过程中可能会出现卡住的现象，如果卡住的时间很长，直接强制重启。在启动的时候按e进入grub引导，在 <code>linux /boot/vmxxxxx ro</code> 后面加入 <code>quiet splash nomodeset</code> ，然后F10启动，应该就会进入安装界面</p><ul><li>这是因为 显卡驱动问题导致的，很多独立显卡驱动linux是有问题的，所以我们干脆禁用</li><li>nomodeset 就表示 系统启动过程中，暂时不运行图像驱动程序</li></ul></li><li><p>安装完成之后，如果独立显卡有问题 就需要修改下面参数：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub</span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_TIMEOUT_STYLE=hidden</span><br><span class="line">GRUB_TIMEOUT=10</span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash nomodest&quot;  # splash后加上nomodeset</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存</span></span><br><span class="line">update-grub # 更新引导</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样重启就好了</span></span><br></pre></td></tr></table></figure><h2 id="使用PVE"><a href="#使用PVE" class="headerlink" title="使用PVE"></a>使用PVE</h2><p>pve的web页面</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242141036.png" alt=""></p><h3 id="安装pve-tools"><a href="#安装pve-tools" class="headerlink" title="安装pve-tools"></a>安装pve-tools</h3><p>为了更好的使用pve，我们可以使用pve-tools工具对pve做一些个性化修改。</p><p><a href="https://github.com/ivanhao/pvetools">https://github.com/ivanhao/pvetools</a> 根据文档操作即可。</p><h3 id="删除pve的local-lvm"><a href="#删除pve的local-lvm" class="headerlink" title="删除pve的local-lvm"></a>删除pve的local-lvm</h3><p>参考文章：<a href="https://foxi.buduanwang.vip/virtualization/1434.html/">https://foxi.buduanwang.vip/virtualization/1434.html/</a></p><p>这里就不详细叙说了</p><h3 id="制作ubuntu模版"><a href="#制作ubuntu模版" class="headerlink" title="制作ubuntu模版"></a>制作ubuntu模版</h3><p>这里使用cloud-images来安装ubuntu，可以使用到cloud-init，能非常方便的修改网络ip等。</p><p>下载好 ubuntu的镜像</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242150080.png" alt=""></p><p>然后创建虚拟机</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242151088.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242152216.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242152228.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242153242.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242154569.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242156809.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242156182.png" alt=""></p><p>创建好虚拟机，回到pve终端</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242158294.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qm disk import 999 ubuntu-22.04-server-cloudimg-amd64.img local --format qcow2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将镜像转为 qcow2格式的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">999 是虚拟机的<span class="built_in">id</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span> 是存储的名称</span></span><br></pre></td></tr></table></figure><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242200456.png" alt=""></p><p>使用磁盘：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242200100.png" alt=""></p><p>添加串口、cloud-init设备</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242202829.png" alt=""></p><p>在cloud-init中，修改相应的信息，修改完 一定要点重生成映像</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242203048.png" alt=""></p><p>在选项中 把引导顺序改一下，磁盘放在第一位：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242205142.png" alt=""></p><p>然后直接启动，安装你想要安装的软件，做成模版</p><p>我的初始化安装如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置时区</span></span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置仓库源</span></span><br><span class="line">sed -i &#x27;s/http:\/\/security.ubuntu.com/https:\/\/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span><br><span class="line">sed -i &#x27;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装常用软件</span></span><br><span class="line">apt update &amp;&amp; apt upgrade -y</span><br><span class="line"></span><br><span class="line">apt install vim neofetch curl wget htop qemu-guest-agent dnsutils net-tools bash-completion -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改SSH配置</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p>之后关机，转化成模版：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242207002.png" alt=""></p><p>后续就可以基于模版快速创建虚拟机节点了</p><h2 id="网络方案"><a href="#网络方案" class="headerlink" title="网络方案"></a>网络方案</h2><p>方案简图：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242212255.png" alt=""></p><ul><li>使用openwrt作为pve旁路由，pve上所有节点虚拟机的网关都指向openwrt的地址</li><li>使用tailscale 做 full mesh VPN，效果就是 只要在我的电脑上安装了tailscale，就能和pve上的虚拟机通信，原理就是所有安装了tailscale的电脑都被打通了（相当于一个隧道，是一个wireguard）</li></ul><h3 id="安装openwrt"><a href="#安装openwrt" class="headerlink" title="安装openwrt"></a>安装openwrt</h3><p>推荐使用别人封装好的镜像，这样就不需要自己手动加各种插件了</p><p><a href="https://lidrive.vip/OpenWrt">https://lidrive.vip/OpenWrt</a></p><p>下载链接：<strong><a href="https://lidrive.vip/d/OpenWrt/OpenWrt%20X86/6.1%E5%86%85%E6%A0%B8/%E7%B2%BE%E5%93%81%E5%B0%8F%E5%8C%85/openwrt6.1-jpxb-20231014-x86-64-generic-squashfs-combined-efi.img.gz?sign=A8AAu7OttEc0K2biRZTzhnBxfTBvwUCVZulCK_Ct4jk=:0">https://lidrive.vip/d/OpenWrt/OpenWrt%20X86/6.1%E5%86%85%E6%A0%B8/%E7%B2%BE%E5%93%81%E5%B0%8F%E5%8C%85/openwrt6.1-jpxb-20231014-x86-64-generic-squashfs-combined-efi.img.gz?sign=A8AAu7OttEc0K2biRZTzhnBxfTBvwUCVZulCK_Ct4jk=:0</a></strong></p><p>安装openwrt就和上面安装ubuntu步骤类似</p><p>附上我安装的openwrt的信息：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242224964.png" alt=""></p><p>安装好之后 按照提示修改你的ip地址，然后进入web页面：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242225721.png" alt=""></p><p>然后：</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242227972.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242228503.png" alt=""></p><p>设置完，网络应该就通了</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242230484.png" alt=""></p><p>openwrt安装了一些可以插件，可以支持科学上网，这样openwrt作为pve其他节点的网关，可以使得网络会更加通畅</p><h3 id="安装tailscale"><a href="#安装tailscale" class="headerlink" title="安装tailscale"></a>安装tailscale</h3><h4 id="在openwrt上安装tailscale"><a href="#在openwrt上安装tailscale" class="headerlink" title="在openwrt上安装tailscale"></a>在openwrt上安装tailscale</h4><p>打开终端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line">opkg install tailscale iptables-nft</span><br><span class="line">service tailscale restart</span><br><span class="line"></span><br><span class="line">tailscale up --accept-routes=true --accept-dns=false --advertise-routes=192.168.12.0/24</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时会跳出一个url，去浏览器登录就行了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启路由--accept-routes=<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭下发dns--accept-dns=<span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定本地局域网段路由转发--advertise-routes=192.168.12.0/24</span></span><br></pre></td></tr></table></figure><p>然后在openwrt的web上修改</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242303486.png" alt=""></p><p>添加新接口，这里我已经添加好了一个接口 tailscale</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242306427.png" alt=""></p><p>接着修改tailscale接口，这里的ipv4地址填写tailscale上面给的地址</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242307144.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242309034.png" alt=""></p><p>点击防火墙设置，这里防火墙自己新建一个</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242311517.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242317021.png" alt=""></p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242317537.png" alt=""></p><p>到此就基本完成了</p><h4 id="在其他设备上安装tailscale"><a href="#在其他设备上安装tailscale" class="headerlink" title="在其他设备上安装tailscale"></a>在其他设备上安装tailscale</h4><p>tailscale官方文档：<a href="https://tailscale.com/kb/">https://tailscale.com/kb/</a></p><p>在一台windows上安装tailscale，wifi使用手机热点，模拟不在同一网段下</p><p>安装步骤很快就可以安装完成，然后在<a href="https://login.tailscale.com/admin/machines">https://login.tailscale.com/admin/machines</a> 这个页面上就可以看到你安装了taiscale的设备了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">常用的tailscale命令</span></span><br><span class="line">tailscale status  # 可以看到是否直连</span><br><span class="line">tailscale ping 100.64.1.242 # 看一下延迟</span><br></pre></td></tr></table></figure><p>简单使用一下，发现延迟比较高，这我不能忍啊，得想一个办法解决延迟问题。</p><h4 id="tailscale的开源解决方案"><a href="#tailscale的开源解决方案" class="headerlink" title="tailscale的开源解决方案"></a>tailscale的开源解决方案</h4><p>tailscale的控制服务器是不开源的，免费用户限制100台节点，一般也就够了</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242232441.png" alt=""></p><p>目前有一款开源的实现叫 <a href="https://github.com/juanfont/headscale">Headscale</a>，这也是唯一的一款。</p><p>headscale的部署网上有很多方案了，这里就不多说了</p><h4 id="部署私有DERP中继服务"><a href="#部署私有DERP中继服务" class="headerlink" title="部署私有DERP中继服务"></a>部署私有DERP中继服务</h4><p>Tailscale 官方内置了很多 DERP 服务器，分步在全球各地，<strong>惟独不包含中国大陆</strong>，原因你懂得。这就导致了一旦流量通过 DERP 服务器进行中继，延时就会非常高。而且官方提供的 DERP 服务器是万人骑，存在安全隐患。</p><p>为了实现低延迟、高安全性，我们可以参考 <a href="https://tailscale.com/kb/1118/custom-derp-servers/">Tailscale 官方文档</a>自建私有的 DERP 服务器。有两种部署模式，一种是基于域名，另外一种不需要域名，可以直接使用 IP，不过需要一点黑科技。我们先来看最简单的使用域名的方案。</p><p>参考文档：<a href="https://icloudnative.io/posts/custom-derp-servers/#derp">https://icloudnative.io/posts/custom-derp-servers/#derp</a></p><h4 id="使用国内的一些方案"><a href="#使用国内的一些方案" class="headerlink" title="使用国内的一些方案"></a>使用国内的一些方案</h4><p>上面的一些方案都太折腾了，又没有一些比较好的方案呢。</p><p>我翻遍全网，还真找到了一个国内的方案：xEdge，这是一个国内大佬兼容tailscale的方案，中继节点是部署在国内的，所以延迟这一块完全不成问题。</p><p>文档：<a href="https://xedge.cc/doc/quickstart">https://xedge.cc/doc/quickstart</a></p><p>使用相当简单，在之前我们安装的openwrt上执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tailscale up --accept-dns=false --advertise-routes=192.168.34.0/24 --login-server=https://login.xedge.cc</span><br></pre></td></tr></table></figure><p>然后会有一个url地址，用浏览器打开，微信/GitHub注册登录即可</p><p><img src="https://setcreed.oss-cn-shanghai.aliyuncs.com/images/202310242339141.png" alt=""></p><p>其他设备使用参考文档</p><p>以上就是我目前使用家用服务器的一些方案</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>pve使用指南：<ul><li><a href="https://thiscute.world/posts/proxmox-virtual-environment-instruction">https://thiscute.world/posts/proxmox-virtual-environment-instruction</a></li><li><a href="https://foxi.buduanwang.vip/virtualization/1434.html/">https://foxi.buduanwang.vip/virtualization/1434.html/</a></li></ul></li><li>pve换源<ul><li><a href="https://mirrors.ustc.edu.cn/help/proxmox.html">https://mirrors.ustc.edu.cn/help/proxmox.html</a></li></ul></li><li><p>taiscale部署私有DERP中继服务</p><ul><li><a href="https://icloudnative.io/posts/custom-derp-servers/">https://icloudnative.io/posts/custom-derp-servers/</a></li></ul></li><li><p>tailscale原理相关介绍</p><ul><li><a href="https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/">https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/</a></li><li><a href="https://arthurchiao.art/blog/how-nat-traversal-works-zh/">https://arthurchiao.art/blog/how-nat-traversal-works-zh/</a></li><li><a href="https://arthurchiao.art/blog/nat-zh/">https://arthurchiao.art/blog/nat-zh/</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;现在有很多厂商推出自己的云服务器，我也用过不少，其中以阿里云、腾讯云、华为云的服务器较为好用，但是也非常贵。&lt;/p&gt;
&lt;p&gt;我主要在云服务器</summary>
      
    
    
    
    <category term="pve" scheme="https://setcreed.github.io/categories/pve/"/>
    
    
    <category term="pre" scheme="https://setcreed.github.io/tags/pre/"/>
    
  </entry>
  
  <entry>
    <title>k8s-informer深入学习</title>
    <link href="https://setcreed.github.io/posts/7ac9a020/"/>
    <id>https://setcreed.github.io/posts/7ac9a020/</id>
    <published>2022-12-01T09:56:52.000Z</published>
    <updated>2023-11-14T23:51:51.713Z</updated>
    
    <content type="html"><![CDATA[<p>informer</p><p>基本点：</p><ul><li><p>FIFO：先入先出队列，拥有队列的基本方法（add、update、delete、list、pop、close等）</p></li><li><p>Delta：存储对象的行为（变化）类型：Added、Updated、Deleted、Sync</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;informer&lt;/p&gt;
&lt;p&gt;基本点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FIFO：先入先出队列，拥有队列的基本方法（add、update、delete、list、pop、close等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delta：存储对象的行为（变化）类型：Added、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go刷题基础篇</title>
    <link href="https://setcreed.github.io/posts/89a3df7f/"/>
    <id>https://setcreed.github.io/posts/89a3df7f/</id>
    <published>2022-09-18T22:21:26.000Z</published>
    <updated>2023-11-14T23:51:51.709Z</updated>
    
    <content type="html"><![CDATA[<p>反转int切片的两种写法</p><p>方法1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    ret := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(ints))</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(ints) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        ret[<span class="built_in">len</span>(ints)-i<span class="number">-1</span>] = ints[i]</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ret)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(ints)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">        ints[i], ints[j] = ints[j], ints[i]</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(ints)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计切片中 两个数之和=给定值的组合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []<span class="type">int</span>&#123;<span class="number">4</span>, <span class="number">18</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">42</span>, <span class="number">60</span>, <span class="number">12</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">0</span>, <span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">    hash := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>) <span class="comment">//key 存具体数字， value存索引</span></span><br><span class="line">    ret := [][<span class="number">2</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    sum := <span class="number">40</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := hash[sum-arr[i]]; ok &#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, [<span class="number">2</span>]<span class="type">int</span>&#123;hash[sum-arr[i]], i&#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash[arr[i]] = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> ret &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d+%d=40\n&quot;</span>, arr[item[<span class="number">0</span>]], arr[item[<span class="number">1</span>]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;反转int切片的两种写法&lt;/p&gt;
&lt;p&gt;方法1：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>istio基础</title>
    <link href="https://setcreed.github.io/posts/d36c6e2c/"/>
    <id>https://setcreed.github.io/posts/d36c6e2c/</id>
    <published>2022-08-04T14:42:19.000Z</published>
    <updated>2023-11-14T23:51:51.713Z</updated>
    
    <content type="html"><![CDATA[<p>istio基础</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;istio基础&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rust基础</title>
    <link href="https://setcreed.github.io/posts/e385a1/"/>
    <id>https://setcreed.github.io/posts/e385a1/</id>
    <published>2022-07-26T00:01:34.000Z</published>
    <updated>2023-11-14T23:51:51.713Z</updated>
    
    <content type="html"><![CDATA[<p>简单跑起来</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;hi, hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rustc main.rs 编译</p><p>使用cargo创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new mypro</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">myname</span> = <span class="string">&quot;cwz&quot;</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, myname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单跑起来&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go刷题</title>
    <link href="https://setcreed.github.io/posts/419e63b4/"/>
    <id>https://setcreed.github.io/posts/419e63b4/</id>
    <published>2022-07-18T23:53:36.000Z</published>
    <updated>2023-11-14T23:51:51.709Z</updated>
    
    <content type="html"><![CDATA[<p>go刷题专场</p><ul><li><a href="https://setcreed.github.io/posts/9a889b79/">专场一</a></li></ul><h2 id="多协程执行后使用channel收集结果"><a href="#多协程执行后使用channel收集结果" class="headerlink" title="多协程执行后使用channel收集结果"></a>多协程执行后使用channel收集结果</h2><p>low逼写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">(index <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    num := <span class="number">5</span></span><br><span class="line">    retCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="comment">//wg := sync.WaitGroup&#123;&#125;</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">        <span class="comment">//wg.Add(1)</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(param <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">//defer wg.Done()</span></span><br><span class="line">            retCh &lt;- job(param)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//wg.Wait()</span></span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> retCh &#123;</span><br><span class="line">        count++</span><br><span class="line">        fmt.Println(<span class="string">&quot;收到结果：&quot;</span>, item)</span><br><span class="line">        <span class="keyword">if</span> count == num &#123;</span><br><span class="line">            <span class="built_in">close</span>(retCh)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end := time.Since(start)</span><br><span class="line">    fmt.Println(<span class="string">&quot;耗时：&quot;</span>, end.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优雅版本：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">(index <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    num := <span class="number">5</span></span><br><span class="line">    retCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(param <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            retCh &lt;- job(param)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="built_in">close</span>(retCh)</span><br><span class="line">        wg.Wait()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> retCh &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;收到结果：&quot;</span>, item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end := time.Since(start)</span><br><span class="line">    fmt.Println(<span class="string">&quot;耗时：&quot;</span>, end.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现一个简易的切片迭代器"><a href="#实现一个简易的切片迭代器" class="headerlink" title="实现一个简易的切片迭代器"></a>实现一个简易的切片迭代器</h2><p>简易版：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Iterator <span class="keyword">struct</span> &#123;</span><br><span class="line">    data  []<span class="type">int</span></span><br><span class="line">    index <span class="type">int</span> <span class="comment">// 索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(data []<span class="type">int</span>)</span></span> *Iterator &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Iterator&#123;data: data&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Iterator)</span></span> HasNext() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i.data == <span class="literal">nil</span> || <span class="built_in">len</span>(i.data) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i.index &lt; <span class="built_in">len</span>(i.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Iterator)</span></span> Next() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i.index++</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> i.data[i.index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    iter := New(ints)</span><br><span class="line">    <span class="keyword">for</span> iter.HasNext() &#123;</span><br><span class="line">        fmt.Println(iter.Next())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持多类型和封装的切片迭代器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Iterator <span class="keyword">struct</span> &#123;</span><br><span class="line">    index <span class="type">int</span></span><br><span class="line">    <span class="built_in">len</span>   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Iterator)</span></span> HasNext() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i.index &lt; i.<span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IntIterator <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Iterator</span><br><span class="line">    data []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IterForInt</span><span class="params">(data []<span class="type">int</span>)</span></span> *IntIterator &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;IntIterator&#123;data: data, Iterator: &amp;Iterator&#123;<span class="built_in">len</span>: <span class="built_in">len</span>(data)&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *IntIterator)</span></span> Next() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i.index++</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> i.data[i.index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StringIterator <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Iterator</span><br><span class="line">    data []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IterForString</span><span class="params">(data []<span class="type">string</span>)</span></span> *StringIterator &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;StringIterator&#123;data: data, Iterator: &amp;Iterator&#123;<span class="built_in">len</span>: <span class="built_in">len</span>(data)&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *StringIterator)</span></span> Next() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i.index++</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> i.data[i.index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    iter := IterForInt(ints)</span><br><span class="line">    <span class="keyword">for</span> iter.HasNext() &#123;</span><br><span class="line">        fmt.Println(iter.Next())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    strs := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">    iterStr := IterForString(strs)</span><br><span class="line">    <span class="keyword">for</span> iterStr.HasNext() &#123;</span><br><span class="line">        fmt.Println(iterStr.Next())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟js的promise写法"><a href="#模拟js的promise写法" class="headerlink" title="模拟js的promise写法"></a>模拟js的promise写法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resolve <span class="function"><span class="keyword">func</span><span class="params">(rsp <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reject <span class="function"><span class="keyword">func</span><span class="params">(err <span class="type">error</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PromiseFunc <span class="function"><span class="keyword">func</span><span class="params">(resolve Resolve, reject Reject)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Promise <span class="keyword">struct</span> &#123;</span><br><span class="line">    f       PromiseFunc</span><br><span class="line">    resolve Resolve</span><br><span class="line">    reject  Reject</span><br><span class="line">    wg      sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPromise</span><span class="params">(f PromiseFunc)</span></span> *Promise &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Promise&#123;f: f&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Then(resolve Resolve) *Promise &#123;</span><br><span class="line">    p.resolve = resolve</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Catch(reject Reject) *Promise &#123;</span><br><span class="line">    p.reject = reject</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Done() &#123;</span><br><span class="line">    p.wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> p.wg.Done()</span><br><span class="line">        p.f(p.resolve, p.reject)</span><br><span class="line">    &#125;()</span><br><span class="line">    p.wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    NewPromise(<span class="function"><span class="keyword">func</span><span class="params">(resolve Resolve, reject Reject)</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> time.Now().Unix()%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            resolve(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(fmt.Errorf(<span class="string">&quot;error&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).Then(<span class="function"><span class="keyword">func</span><span class="params">(rsp <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        fmt.Println(rsp)</span><br><span class="line">    &#125;).Catch(<span class="function"><span class="keyword">func</span><span class="params">(err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;).Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持超时控制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resolve <span class="function"><span class="keyword">func</span><span class="params">(rsp <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reject <span class="function"><span class="keyword">func</span><span class="params">(err <span class="type">error</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PromiseFunc <span class="function"><span class="keyword">func</span><span class="params">(resolve Resolve, reject Reject)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PromiseOpt <span class="function"><span class="keyword">func</span><span class="params">(promise *Promise)</span></span></span><br><span class="line"><span class="keyword">type</span> PromiseOpts []PromiseOpt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(prom PromiseOpts)</span></span> apply(p *Promise) &#123;</span><br><span class="line">    <span class="keyword">for</span> _, opt := <span class="keyword">range</span> prom &#123;</span><br><span class="line">        opt(p)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(t time.Duration)</span></span> PromiseOpt &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(promise *Promise)</span></span> &#123;</span><br><span class="line">        promise.timeout = t</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Promise <span class="keyword">struct</span> &#123;</span><br><span class="line">    f       PromiseFunc</span><br><span class="line">    resolve Resolve</span><br><span class="line">    reject  Reject</span><br><span class="line">    wg      sync.WaitGroup</span><br><span class="line">    timeout time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPromise</span><span class="params">(f PromiseFunc)</span></span> *Promise &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Promise&#123;f: f, timeout: time.Second * <span class="number">10</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Then(resolve Resolve) *Promise &#123;</span><br><span class="line">    p.resolve = resolve</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Catch(reject Reject) *Promise &#123;</span><br><span class="line">    p.reject = reject</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Promise)</span></span> Done(opts ...PromiseOpt) &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> e := <span class="built_in">recover</span>(); e != <span class="literal">nil</span> &#123;</span><br><span class="line">            p.reject(fmt.Errorf(e.(<span class="type">string</span>))) <span class="comment">// 这里的panic error不一定是string，这里是随便写写的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    PromiseOpts(opts).apply(p) <span class="comment">// 参数设置</span></span><br><span class="line">    p.wg.Add(<span class="number">1</span>)</span><br><span class="line">    timeoutCtx, _ := context.WithTimeout(context.Background(), p.timeout)</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> p.wg.Done()</span><br><span class="line">        p.f(p.resolve, p.reject)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;()</span><br><span class="line">        p.wg.Wait()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-timeoutCtx.Done():</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;超时&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        fmt.Println(<span class="string">&quot;正常执行&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    NewPromise(<span class="function"><span class="keyword">func</span><span class="params">(resolve Resolve, reject Reject)</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> time.Now().Unix()%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            resolve(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(fmt.Errorf(<span class="string">&quot;error&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).Then(<span class="function"><span class="keyword">func</span><span class="params">(rsp <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        fmt.Println(rsp)</span><br><span class="line">    &#125;).Catch(<span class="function"><span class="keyword">func</span><span class="params">(err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;catch: &quot;</span>, err)</span><br><span class="line">    &#125;).Done(WithTimeout(time.Second * <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用http分块发送实现网页倒计时"><a href="#使用http分块发送实现网页倒计时" class="headerlink" title="使用http分块发送实现网页倒计时"></a>使用http分块发送实现网页倒计时</h2><p>分块传输编码（Chunked transfer encoding）允许http由网页服务器发送给客户端应用（浏览器）的数据可以分成多个部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    UpdateScript = <span class="string">`&lt;script&gt;document.getElementById(&quot;msg&quot;).innerHTML=&#x27;%d&#x27;;&lt;/script&gt;`</span></span><br><span class="line">    Redirect     = <span class="string">`&lt;script&gt;self.location=&#x27;https://setcreed.top&#x27;&lt;/script&gt;`</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        h1 := []<span class="type">byte</span>(<span class="string">&quot;&lt;h1 id=&#x27;msg&#x27;&gt;&lt;/h1&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        writer.Header().Set(<span class="string">&quot;Transfer-Encoding&quot;</span>, <span class="string">&quot;Chunked&quot;</span>)</span><br><span class="line">        writer.Write(h1)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">            writer.Write([]<span class="type">byte</span>(fmt.Sprintf(UpdateScript, i)))</span><br><span class="line">            writer.(http.Flusher).Flush()</span><br><span class="line">            time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        writer.Write([]<span class="type">byte</span>(Redirect))</span><br><span class="line">        writer.(http.Flusher).Flush()</span><br><span class="line">    &#125;)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go中Struct的指针方法和非指针方法到底有啥区别"><a href="#Go中Struct的指针方法和非指针方法到底有啥区别" class="headerlink" title="Go中Struct的指针方法和非指针方法到底有啥区别"></a>Go中Struct的指针方法和非指针方法到底有啥区别</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> Print1() &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;print1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Print2() &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;print2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, User.Print1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, User.Print2)</span><br><span class="line">    u := User&#123;&#125;</span><br><span class="line">    User.Print1(u)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ go run method.go</span><br><span class="line"># command-line-arguments</span><br><span class="line">./method.go:19:25: invalid method expression User.Print2 (needs pointer receiver: (*User).Print2)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> Print1() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;u)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;print1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span></span> Print2() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, u)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;print2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//fmt.Printf(&quot;%T\n&quot;, User.Print1)</span></span><br><span class="line">    <span class="comment">//fmt.Printf(&quot;%T\n&quot;, (*User).Print2)</span></span><br><span class="line">    u := User&#123;&#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;u)</span><br><span class="line">    User.Print1(u)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> u2 *User</span><br><span class="line">    (*User).Print2(u2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❯ go run method.go</span><br><span class="line">0xc000010230</span><br><span class="line">0xc000010240</span><br><span class="line">print1</span><br><span class="line">0x0</span><br><span class="line">print2</span><br></pre></td></tr></table></figure><h2 id="使用channel读取文件时在控制台显示进度"><a href="#使用channel读取文件时在控制台显示进度" class="headerlink" title="使用channel读取文件时在控制台显示进度"></a>使用channel读取文件时在控制台显示进度</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Format1 = <span class="string">&quot;\b\b%d%%&quot;</span></span><br><span class="line">    Format2 = <span class="string">&quot;\b\b\b%d%%&quot;</span></span><br><span class="line">    Format3 = <span class="string">&quot;\b\b\b%d%%\b&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">progress</span><span class="params">(ch <span class="keyword">chan</span> <span class="type">int64</span>)</span></span> &#123;</span><br><span class="line">    format := Format1</span><br><span class="line">    <span class="keyword">var</span> lastNum <span class="type">int64</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> rate := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        <span class="keyword">if</span> lastNum &gt; <span class="number">10</span> &amp;&amp; rate &gt; <span class="number">10</span> &amp;&amp; rate &lt; <span class="number">100</span> &#123;</span><br><span class="line">            format = Format2</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> rate &gt;= <span class="number">100</span> &#123;</span><br><span class="line">            rate = <span class="number">100</span></span><br><span class="line">            format = Format3</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(format, rate)</span><br><span class="line">        lastNum = rate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rateCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int64</span>)</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(rateCh)</span><br><span class="line">    f, _ := os.Open(<span class="string">&quot;./html/img.jpg&quot;</span>)</span><br><span class="line">    fInfo, _ := f.Stat()</span><br><span class="line">    fmt.Print(<span class="string">&quot;rate:0%&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> progress(rateCh) <span class="comment">//显示进度</span></span><br><span class="line"></span><br><span class="line">    ret := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>*<span class="number">5</span>)</span><br><span class="line">        n, err := f.Read(buf)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        ret = <span class="built_in">append</span>(ret, buf...)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            rateCh &lt;- <span class="type">int64</span>(<span class="built_in">len</span>(ret)*<span class="number">100</span>) / fInfo.Size()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    ioutil.WriteFile(<span class="string">&quot;./ret.png&quot;</span>, ret, <span class="number">0600</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Gin模拟大文件上传、分片存储和分块显示"><a href="#使用Gin模拟大文件上传、分片存储和分块显示" class="headerlink" title="使用Gin模拟大文件上传、分片存储和分块显示"></a>使用Gin模拟大文件上传、分片存储和分块显示</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveBlock</span><span class="params">(name <span class="type">string</span>, buf []<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">    save, _ := os.OpenFile(<span class="string">&quot;./file/&quot;</span>+name, os.O_CREATE|os.O_RDWR, <span class="number">0600</span>)</span><br><span class="line">    <span class="keyword">defer</span> save.Close()</span><br><span class="line">    save.Write(buf)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.New()</span><br><span class="line">    r.Use(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> e := <span class="built_in">recover</span>(); e != <span class="literal">nil</span> &#123;</span><br><span class="line">                c.AbortWithStatusJSON(<span class="number">400</span>, gin.H&#123;<span class="string">&quot;err&quot;</span>: e&#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">        c.Next()</span><br><span class="line">    &#125;)</span><br><span class="line">    r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.Writer.Header().Set(<span class="string">&quot;Transfer-Encoding&quot;</span>, <span class="string">&quot;chunked&quot;</span>)</span><br><span class="line">        c.Writer.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/png&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">            f, _ := os.Open(fmt.Sprintf(<span class="string">&quot;./file/img_%d.png&quot;</span>, i))</span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">            b, _ := ioutil.ReadAll(f)</span><br><span class="line">            c.Writer.Write(b)</span><br><span class="line">            c.Writer.(http.Flusher).Flush()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    r.POST(<span class="string">&quot;file&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        file, head, _ := c.Request.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">        block := head.Size / <span class="number">5</span> <span class="comment">// 文件分成5快</span></span><br><span class="line">        index := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            buf := <span class="built_in">make</span>([]<span class="type">byte</span>, block)</span><br><span class="line">            n, err := file.Read(buf)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class="line">                <span class="built_in">panic</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">            saveBlock(fmt.Sprintf(<span class="string">&quot;img_%d.png&quot;</span>, index), buf)</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;OK&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String转-byte的两种方法"><a href="#String转-byte的两种方法" class="headerlink" title="String转[]byte的两种方法"></a>String转[]byte的两种方法</h2><p>第一种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;abc&quot;</span></span><br><span class="line">    fmt.Println([]<span class="type">byte</span>(str))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := <span class="string">&quot;abc&quot;</span></span><br><span class="line">    fmt.Println((*reflect.StringHeader)(unsafe.Pointer(&amp;a)).Data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pointer: 表示可以指向任意类型的指针</p><p>uintptr：无符号整型，可以用来保存一个指针地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">    <span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;adc&quot;</span></span><br><span class="line">    strHeader := (*reflect.StringHeader)(unsafe.Pointer(&amp;str))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//fmt.Println(*(*string)(unsafe.Pointer(strHeader)))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> strBytes []<span class="type">byte</span></span><br><span class="line">    bytesHeader := (*reflect.SliceHeader)(unsafe.Pointer(&amp;strBytes))</span><br><span class="line">    bytesHeader.Data = strHeader.Data</span><br><span class="line">    bytesHeader.Len = strHeader.Len</span><br><span class="line">    bytesHeader.Cap = strHeader.Len</span><br><span class="line"></span><br><span class="line">    fmt.Println(*(*[]<span class="type">byte</span>)(unsafe.Pointer(bytesHeader)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="超时控制带来的内存泄露"><a href="#超时控制带来的内存泄露" class="headerlink" title="超时控制带来的内存泄露"></a>超时控制带来的内存泄露</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    ctx, _ := context.WithTimeout(context.Background(), time.Second*<span class="number">1</span>)</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Millisecond * <span class="number">1500</span>)</span><br><span class="line">        done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;超时了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">50</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            job()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        fmt.Println(runtime.NumGoroutine())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的done &lt;- struct&#123;&#125;&#123;&#125;会阻塞住，协程无法释放</span></span><br><span class="line"><span class="comment">// 可以改为done := make(chan struct&#123;&#125;, 1)</span></span><br></pre></td></tr></table></figure><h2 id="context上手"><a href="#context上手" class="headerlink" title="context上手"></a>context上手</h2><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    fmt.Println(ctx.Value(<span class="string">&quot;begin&quot;</span>))</span><br><span class="line">    fmt.Println(<span class="string">&quot;你是猪～&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> g2(context.WithValue(ctx, <span class="string">&quot;movie&quot;</span>, <span class="string">&quot;复仇者联盟&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g2</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    fmt.Println(ctx.Value(<span class="string">&quot;movie&quot;</span>))</span><br><span class="line">    fmt.Println(<span class="string">&quot;电影很好看&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx := context.WithValue(context.Background(), <span class="string">&quot;begin&quot;</span>, <span class="string">&quot;从台词看到一句话：&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> g(ctx)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cancel取消"><a href="#cancel取消" class="headerlink" title="cancel取消"></a>cancel取消</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g1</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> g2(ctx)</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        fmt.Println(<span class="string">&quot;g1取消了&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g2</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        fmt.Println(<span class="string">&quot;g2取消了&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">    <span class="keyword">go</span> g1(ctx)</span><br><span class="line">    count := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> count &gt;= <span class="number">3</span> &#123;</span><br><span class="line">            cancel()</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="超时和取消"><a href="#超时和取消" class="headerlink" title="超时和取消"></a>超时和取消</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g1</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        done &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        fmt.Println(<span class="string">&quot;g1被取消或超时&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-done:</span><br><span class="line">        fmt.Println(<span class="string">&quot;正常执行完成&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">go</span> g1(ctx)</span><br><span class="line">    count := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> count &gt;= <span class="number">3</span> &#123;</span><br><span class="line">            log.Println(<span class="string">&quot;手动取消&quot;</span>)</span><br><span class="line">            cancel()</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span> &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;go刷题专场&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://setcreed.github.io/posts/9a889b79/&quot;&gt;专场一&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;多协程执行后使用channel收集结果&quot;&gt;&lt;a href=&quot;#多协程执行后</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>go专场刷题</title>
    <link href="https://setcreed.github.io/posts/9a889b79/"/>
    <id>https://setcreed.github.io/posts/9a889b79/</id>
    <published>2022-07-18T01:01:38.000Z</published>
    <updated>2023-11-14T23:51:51.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限制协程执行数量的基本方法："><a href="#限制协程执行数量的基本方法：" class="headerlink" title="限制协程执行数量的基本方法："></a>限制协程执行数量的基本方法：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">(index <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;执行完毕，序号:%d\n&quot;</span>, index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pool <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    maxNum := <span class="number">10</span></span><br><span class="line">    pool = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, maxNum)</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        pool &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(index <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                &lt;-pool</span><br><span class="line">            &#125;()</span><br><span class="line">            job(index)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数执行超时的控制代码怎么写"><a href="#函数执行超时的控制代码怎么写" class="headerlink" title="函数执行超时的控制代码怎么写"></a>函数执行超时的控制代码怎么写</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、业务过程放到协程</span></span><br><span class="line"><span class="comment">// 2、把业务结果塞入channel</span></span><br><span class="line"><span class="comment">// 3、控制一个time.After</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job</span><span class="params">()</span></span> <span class="keyword">chan</span> <span class="type">string</span> &#123;</span><br><span class="line">    ret := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">        ret &lt;- <span class="string">&quot;success&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">    c := job()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> r := &lt;-c:</span><br><span class="line">        <span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;time out&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(run())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nil不等于nil的问题"><a href="#nil不等于nil的问题" class="headerlink" title="nil不等于nil的问题"></a>nil不等于nil的问题</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//fmt.Println(run())</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">var</span> a *<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    list := []<span class="keyword">interface</span>&#123;&#125;&#123;f, a&#125;</span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="comment">//if v, ok := item.(func()); ok &amp;&amp;v==nil &#123;</span></span><br><span class="line">        <span class="comment">//    fmt.Println(&quot;nil func&quot;)</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//if v, ok := item.(*struct&#123;&#125;); ok &amp;&amp;v==nil &#123;</span></span><br><span class="line">        <span class="comment">//    fmt.Println(&quot;nil struct&quot;)</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">if</span> reflect.ValueOf(item).IsNil() &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interface 有两部分组成：类型和值</p><h2 id="defer定义函数时的参数问题"><a href="#defer定义函数时的参数问题" class="headerlink" title="defer定义函数时的参数问题"></a>defer定义函数时的参数问题</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(a)  <span class="comment">// 在定义是就确定了a是1，定义过程中如果有参数就会被确定下来</span></span><br><span class="line">a++</span><br><span class="line"><span class="comment">// 结果是1</span></span><br></pre></td></tr></table></figure><p>defer里链式调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTest</span><span class="params">()</span></span> *test &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;test&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *test)</span></span> do(i <span class="type">int</span>) *test &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    <span class="keyword">return</span> this</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := NewTest()</span><br><span class="line">    <span class="keyword">defer</span> t.do(<span class="number">1</span>).do(<span class="number">2</span>).do(<span class="number">5</span>)</span><br><span class="line">    t.do(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以最后一个执行单位为准放在最后执行， 结果是 1 2 3 5</span></span><br></pre></td></tr></table></figure><p>循环执行defer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 3 3</span></span><br></pre></td></tr></table></figure><p>defer和panic哪个先执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;fmt.Println(<span class="string">&quot;打印前&quot;</span>)&#125;()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;fmt.Println(<span class="string">&quot;打印中&quot;</span>)&#125;()</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;fmt.Println(<span class="string">&quot;打印后&quot;</span>)&#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;触发异常&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先执行defer，再把异常往上抛</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印前&quot;</span>) &#125;()</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印中&quot;</span>) &#125;()</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印后&quot;</span>) &#125;()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;触发异常1&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;触发异常2&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后 中 前 1，没有2</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印前&quot;</span>) &#125;()</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印中&quot;</span>) &#125;()</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;打印后&quot;</span>) &#125;()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;触发异常1&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;触发异常2&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后 中 前 2 1</span></span><br></pre></td></tr></table></figure><h2 id="n-不靠谱"><a href="#n-不靠谱" class="headerlink" title="n++不靠谱"></a>n++不靠谱</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            n++</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答案是 1000000 毫无疑问的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            n++</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>n++这个过程并不是原子的，有三个步骤：</p><ul><li>从内存读取n</li><li>执行++</li><li>再赋值结果</li></ul><p>这个过程中，其他协程也会进来读取n的值，因此不是原子的</p><p>所谓的原子，执行过程中不会发生上下文（线程的切换）的切换</p><p>两种办法解决：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">0</span></span><br><span class="line">    locker := sync.Mutex&#123;&#125;</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="keyword">defer</span> locker.Unlock()</span><br><span class="line">            locker.Lock()</span><br><span class="line">            n++</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n <span class="type">int32</span> = <span class="number">0</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            atomic.AddInt32(&amp;n, <span class="number">1</span>)</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go常见的并发模式"><a href="#go常见的并发模式" class="headerlink" title="go常见的并发模式"></a>go常见的并发模式</h2><p>go的并发模式有哪些，几个点：</p><ul><li>go有协程以及CSP调度模型，是进行并发运行的基础</li><li>可以使用协程来完成 ”并发编程“</li><li>go并发编程哲学：不要通过共享内存来通信，而应通过通信来共享内存</li><li>并发编程的重点在于：如何精准的控制 “共享数据”</li></ul><p>基本：通过协程来执行并发任务，通过channel来通信</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(input <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            fmt.Println(input * <span class="number">2</span>)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(input <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            c &lt;- input * <span class="number">2</span></span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(c); i++ &#123;</span><br><span class="line">        fmt.Println(&lt;-c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者模式</p><p>第一种写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        out &lt;- i * <span class="number">2</span></span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Consumer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> out &#123;</span><br><span class="line">        fmt.Println(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> Producer(c)</span><br><span class="line">    Consumer(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        out &lt;- i * <span class="number">2</span></span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Consumer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>, r <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> out &#123;</span><br><span class="line">        fmt.Println(item)</span><br><span class="line">    &#125;</span><br><span class="line">    r &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    r := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> Producer(c)</span><br><span class="line">    <span class="keyword">go</span> Consumer(c, r)</span><br><span class="line">    &lt;-r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(out)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        out &lt;- i * <span class="number">2</span></span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Consumer</span><span class="params">(out <span class="keyword">chan</span> <span class="type">int</span>)</span></span> (r <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;) &#123;</span><br><span class="line">    r = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            r &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> item := <span class="keyword">range</span> out &#123;</span><br><span class="line">        fmt.Println(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> Producer(c)</span><br><span class="line">    r := Consumer(c)</span><br><span class="line">    &lt;-r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优胜劣汰模式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">job2</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    rand.Seed(time.Now().Unix())</span><br><span class="line">    result := rand.Intn(<span class="number">5</span>)</span><br><span class="line">    time.Sleep(time.Second * time.Duration(result)) <span class="comment">// 模拟延迟</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            c &lt;- job2()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;最快用了:&quot;</span>, &lt;-c, <span class="string">&quot;秒&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="协程为什么总是先输出倒数第一个"><a href="#协程为什么总是先输出倒数第一个" class="headerlink" title="协程为什么总是先输出倒数第一个"></a>协程为什么总是先输出倒数第一个</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)  <span class="comment">// 单核限制</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先 runtime.GOMAXPROCS，golang默认使用所以的cpu核，runtime.GOMAXPROCS(1) 就变成单核运行了</li><li>单核情况下，所有goroutine运行在同一个线程（M）中，线程维护一个上下文（P）</li><li>在上面程序中，我们循环创建了若干线程，且是单核</li><li>在P就绪后，开始执行。默认先执行的是最后一个创建的协程</li><li>然后再继续执行其他协程，此次是按照顺序来的</li></ul><p>要想按照顺序输出，怎么解决： 再加一个协程就好了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)  <span class="comment">// 单核限制</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    wg.Add(<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            fmt.Println(i)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        fmt.Println(<span class="string">&quot;开始解决&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个带过期机制的kv-获取map"><a href="#写一个带过期机制的kv-获取map" class="headerlink" title="写一个带过期机制的kv 获取map"></a>写一个带过期机制的kv 获取map</h2><p>原始的map不是线程安全的，要使用sync.map，使用time.After 实现简单的过期机制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kv sync.Map</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Set</span><span class="params">(key <span class="type">string</span>, value <span class="keyword">interface</span>&#123;&#125;, expire time.Duration)</span></span> &#123;</span><br><span class="line">    kv.Store(key, value)</span><br><span class="line">    time.AfterFunc(expire, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        kv.Delete(key)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Set(<span class="string">&quot;id&quot;</span>, <span class="number">101</span>, time.Second*<span class="number">5</span>)</span><br><span class="line">    Set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, time.Second*<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(kv.Load(<span class="string">&quot;id&quot;</span>))</span><br><span class="line">        fmt.Println(kv.Load(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="谈一谈Go的链表操作"><a href="#谈一谈Go的链表操作" class="headerlink" title="谈一谈Go的链表操作"></a>谈一谈Go的链表操作</h2><p>谈一下双向链表和单向链表的区别</p><p>go自带一个双向链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;container/list&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := list.New()</span><br><span class="line">    e8 := data.PushBack(<span class="number">8</span>)</span><br><span class="line">    data.PushBack(<span class="number">9</span>)</span><br><span class="line">    data.PushBack(<span class="number">10</span>)</span><br><span class="line">    data.PushFront(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    data.InsertAfter(<span class="number">8.5</span>, e8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> e := data.Front(); e != <span class="literal">nil</span>; e = e.Next() &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v &quot;</span>, e.Value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使用golang定义枚举"><a href="#如何使用golang定义枚举" class="headerlink" title="如何使用golang定义枚举"></a>如何使用golang定义枚举</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserType <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u UserType)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> u &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;老师&quot;</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;领导&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Student UserType = <span class="literal">iota</span></span><br><span class="line">    Teacher</span><br><span class="line">    Leader</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(Student, Teacher, Leader)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go的struct能不能比较"><a href="#go的struct能不能比较" class="headerlink" title="go的struct能不能比较"></a>go的struct能不能比较</h2><p>struct中包含了 map slice func 是不能比较的</p><p>结论：</p><ul><li>相同结构，只要成员类型都可以比较，就能比较</li><li>不相同的结构，如果能互相转化，也能比较。前提是成员都是可以比较的</li></ul><h2 id="用go实现一个简单的set"><a href="#用go实现一个简单的set" class="headerlink" title="用go实现一个简单的set"></a>用go实现一个简单的set</h2><p>目前go的标准库里没有set</p><p>所谓的set 简单来说就是一个集合，里面的内容不能重复</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Set <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]Empty</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this Set)</span></span> Add(vs ...<span class="keyword">interface</span>&#123;&#125;) Set &#123;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> vs &#123;</span><br><span class="line">        this[v] = Empty&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> this</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this Set)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    <span class="keyword">for</span> k, _ := <span class="keyword">range</span> this &#123;</span><br><span class="line">        <span class="keyword">if</span> buf.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">            buf.WriteString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        buf.WriteString(fmt.Sprintf(<span class="string">&quot;%v&quot;</span>, k))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSet</span><span class="params">()</span></span> Set &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]Empty)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    set := NewSet().Add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">    fmt.Println(set)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="go的切片浅拷贝和深拷贝的写法和区别"><a href="#go的切片浅拷贝和深拷贝的写法和区别" class="headerlink" title="go的切片浅拷贝和深拷贝的写法和区别"></a>go的切片浅拷贝和深拷贝的写法和区别</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    b := a</span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这种属于浅拷贝，共享同一层数组空间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line">    <span class="built_in">copy</span>(b, a)</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">    b[<span class="number">1</span>] = <span class="number">90</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深拷贝</span></span><br></pre></td></tr></table></figure><h2 id="说一说go的内存逃逸分析"><a href="#说一说go的内存逃逸分析" class="headerlink" title="说一说go的内存逃逸分析"></a>说一说go的内存逃逸分析</h2><p>逃逸分析：go在编译阶段确定内存是分配在栈上还是堆上的一种行为</p><ul><li>栈内存分配和释放非常快</li><li>堆内存需要依靠Go垃圾回收（GC 占用CPU）</li><li>通过逃逸分析，可以尽量把那些不需要分配到堆上的变量直接分配到栈上</li></ul><p>Go的主要目的并不希望程序员关注分配，而是通过编译时的代码分析自动决定</p><p>go build -gcflags=-m main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这种情况就会逃逸</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    a := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量原本应该在栈中分配，在栈中回收。由于返回时被外部引用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数为interface类型时，比如 fmt.Println(a...interface&#123;&#125;), 编译期间很难确定其参数的具体类型，也能产生逃逸</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 经典案例：</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUser</span><span class="params">()</span></span> User &#123;</span><br><span class="line">    <span class="keyword">return</span> User&#123;<span class="number">101</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u := NewUser()</span><br><span class="line">    fmt.Println(u)  <span class="comment">// u escapes to heap</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上面的函数中，如果仅仅在main中一步搞定这个u，不需要将u传出去，user这个struct不需要使用指针</span></span><br></pre></td></tr></table></figure><h2 id="说一说Go的单例模式"><a href="#说一说Go的单例模式" class="headerlink" title="说一说Go的单例模式"></a>说一说Go的单例模式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WebConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">    Port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc *WebConfig</span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetConfig</span><span class="params">()</span></span> *WebConfig &#123;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">    <span class="keyword">if</span> cc == <span class="literal">nil</span> &#123;</span><br><span class="line">        cc = &amp;WebConfig&#123;Port: <span class="number">8080</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := GetConfig()</span><br><span class="line">    <span class="comment">// 模拟很多模块都在调用这个函数</span></span><br><span class="line">    c2 := GetConfig()</span><br><span class="line">    c3 := GetConfig()</span><br><span class="line">    fmt.Println(c, c2, c3)</span><br><span class="line">    fmt.Println(c == c2, c2 == c3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上go提供了内置方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WebConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">    Port <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc *WebConfig</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetConfig</span><span class="params">()</span></span> *WebConfig &#123;</span><br><span class="line">    once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        cc = &amp;WebConfig&#123;Port: <span class="number">8080</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> cc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := GetConfig()</span><br><span class="line">    <span class="comment">// 模拟很多模块都在调用这个函数</span></span><br><span class="line">    c2 := GetConfig()</span><br><span class="line">    c3 := GetConfig()</span><br><span class="line">    fmt.Println(c, c2, c3)</span><br><span class="line">    fmt.Println(c == c2, c2 == c3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="说一说Go的简单工厂模式"><a href="#说一说Go的简单工厂模式" class="headerlink" title="说一说Go的简单工厂模式"></a>说一说Go的简单工厂模式</h2><p>可以将接口与具体实现分离，根据需要（根据参数）实例化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetRole() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Member <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Member)</span></span> GetRole() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;会员用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Admin)</span></span> GetRole() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;后台管理用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Mem = <span class="literal">iota</span></span><br><span class="line">    Adm</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateUser</span><span class="params">(t <span class="type">int</span>)</span></span> User &#123;</span><br><span class="line">    <span class="keyword">switch</span> t &#123;</span><br><span class="line">    <span class="keyword">case</span> Mem:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Member)</span><br><span class="line">    <span class="keyword">case</span> Adm:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Admin)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Member)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(CreateUser(Adm).GetRole())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go的抽象工厂方法"><a href="#Go的抽象工厂方法" class="headerlink" title="Go的抽象工厂方法"></a>Go的抽象工厂方法</h2><p>接着上面的简单工厂模式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetRole() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Member <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Member)</span></span> GetRole() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;会员用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Admin)</span></span> GetRole() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;后台管理用户&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Mem = <span class="literal">iota</span></span><br><span class="line">    Adm</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateUser</span><span class="params">(t <span class="type">int</span>)</span></span> User &#123;</span><br><span class="line">    <span class="keyword">switch</span> t &#123;</span><br><span class="line">    <span class="keyword">case</span> Mem:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Member)</span><br><span class="line">    <span class="keyword">case</span> Adm:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Admin)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(Member)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AbstractFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">    CreateUser() User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MemberFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MemberFactory)</span></span> CreateUser() User &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Member&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AdminFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *AdminFactory)</span></span> CreateUser() User &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Admin&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> fact AbstractFactory = <span class="built_in">new</span>(AdminFactory)</span><br><span class="line">    fmt.Println(fact.CreateUser().GetRole())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不动原来的代码，一旦增加了什么类别，只要增加如下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MemberFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MemberFactory)</span></span> CreateUser() User &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Member&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加一个工厂，以及一个抽象工厂的具体实现</span></span><br></pre></td></tr></table></figure><h2 id="请写一个Go的装饰器模式的例子"><a href="#请写一个Go的装饰器模式的例子" class="headerlink" title="请写一个Go的装饰器模式的例子"></a>请写一个Go的装饰器模式的例子</h2><p>允许向一个现有对象添加新的功能，同时又不改变其结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">    writer.Write([]<span class="type">byte</span>(<span class="string">&quot;index&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, index)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里访问http://localhost:8080 输出index， 但是我想输出 this is index</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decorator</span><span class="params">(f http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        writer.Write([]<span class="type">byte</span>(<span class="string">&quot;this is &quot;</span>))</span><br><span class="line">        f(writer, request)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">    writer.Write([]<span class="type">byte</span>(<span class="string">&quot;index&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, Decorator(index))</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请简述go-channel的底层机制"><a href="#请简述go-channel的底层机制" class="headerlink" title="请简述go channel的底层机制"></a>请简述go channel的底层机制</h2><p>源码在 runtime/chan.go</p><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220527144940432.png" alt="image-20220527144940432"></p><p>重点关注4个部分：</p><ul><li>buf指向一个循环队列</li><li>sendx和recvx用于记录buf发送和接收的index</li><li>lock 互斥锁</li><li>sendq和recvq 等待（阻塞）列表</li></ul><p>其他的：</p><ul><li>qcount：队列剩余数</li><li>dataqsize：缓冲区大小</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// ch 本身是一个指针，指向堆中的hchan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一开始， sendx = 0。 revcx=0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入值</span></span><br><span class="line"><span class="comment">// 执行前都要加锁</span></span><br><span class="line">ch &lt;<span class="number">-1</span> (send)</span><br><span class="line">sendx = <span class="number">1</span></span><br><span class="line">recvx = <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220527152131672.png" alt="image-20220527152131672"></p><p>一旦缓存满了……</p><p>回答的基本点：</p><ul><li>chan创建在堆中，返回指针</li><li>使用环形队列作为缓冲区</li><li>每次操作都要加锁，并更新操作（send或recv的index）</li><li>缓冲满了，进入等待队列，并让出M。等待被唤醒</li><li>被唤醒后，重新加入G队列</li></ul><h2 id="读写关闭的channel是啥后果"><a href="#读写关闭的channel是啥后果" class="headerlink" title="读写关闭的channel是啥后果"></a>读写关闭的channel是啥后果</h2><h2 id="简述Go协程调度机制"><a href="#简述Go协程调度机制" class="headerlink" title="简述Go协程调度机制"></a>简述Go协程调度机制</h2><p><a href="https://medium.com/@ankur_anand/illustrated-tales-of-go-runtime-scheduler-74809ef6d19b">https://medium.com/@ankur_anand/illustrated-tales-of-go-runtime-scheduler-74809ef6d19b</a></p><p><a href="https://lessisbetter.site/2019/03/10/golang-scheduler-1-history/">https://lessisbetter.site/2019/03/10/golang-scheduler-1-history/</a></p><p><a href="https://zhuanlan.zhihu.com/p/27056944">https://zhuanlan.zhihu.com/p/27056944</a></p><p><a href="https://www.kancloud.cn/aceld/golang/1958305">https://www.kancloud.cn/aceld/golang/1958305</a></p><p>回到要点：</p><ul><li>G、P、M是啥，基本关系</li><li>如何找G</li><li>阻塞过程</li><li>自旋</li></ul><p>Go的协程调度就是 P将G合理的分配给某个M的过程</p><h2 id="简述Raft协议：选举机制"><a href="#简述Raft协议：选举机制" class="headerlink" title="简述Raft协议：选举机制"></a>简述Raft协议：选举机制</h2><p>分布式集群：</p><ul><li>一旦单节点宕机，其他节点依然能提供服务</li><li>关键的是：数据并不会丢失。其中一个重要过程就是数据一致性</li><li>要实现一致性：一般来讲 节点中需要有个主节点来对数据日志进行统一管理（复制）</li></ul><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220601122548765.png" alt="image-20220601122548765"></p><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220601213259612.png" alt="image-20220601213259612"></p><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220601213346193.png" alt="image-20220601213346193"></p><p>正常情况下，A会赢得选举（大多数选票）</p><p>于是，它会立刻给所有节点发送心跳消息，避免其余节点触发新的选举</p><p>不正常情况，由于网络等原因，A和B也许会同时发起选举，</p><p>注意：在同一个任期内，C只能给A或B投一票。先来先得</p><p>假设A先到，此时A胜出。还是那样，A胜出后会发出心跳消息。B发现A的term比他大，则会自觉的改成follower，并更新term </p><p><img src="/Users/cwz/Library/Application Support/typora-user-images/image-20220601214401032.png" alt="image-20220601214401032"></p><h2 id="简述Raft协议：数据复制过程（初级）"><a href="#简述Raft协议：数据复制过程（初级）" class="headerlink" title="简述Raft协议：数据复制过程（初级）"></a>简述Raft协议：数据复制过程（初级）</h2><p>让这个数据同步、可恢复，将这命令持久化到日志里面</p><p>基本过程：所有日志都必须首先提交至leader节点</p><ul><li>leader加入本地日志</li><li>leader要求followers同步日志</li><li>leader等待多数节点的反馈（不是全部）</li><li>上一步成功后leader确认操作ok，并修改本地状态和存储</li><li>发出心跳要求 follower也提交并存储</li></ul><p>最终一致性</p><h2 id="框架中路由实现：手撸前缀树"><a href="#框架中路由实现：手撸前缀树" class="headerlink" title="框架中路由实现：手撸前缀树"></a>框架中路由实现：手撸前缀树</h2><p>特点：</p><ul><li>根节点不包含字符</li><li>每个节点的所有子节点包含的字符都不相同</li><li>一个节点的所有子节点都有相同的前缀</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">    root *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTrie</span><span class="params">()</span></span> *Trie &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Trie&#123;root: NewNode()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">    isEnd    <span class="type">bool</span> <span class="comment">// 是否是最后一个</span></span><br><span class="line">    children <span class="keyword">map</span>[<span class="type">string</span>]*Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewNode</span><span class="params">()</span></span> *Node &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Node&#123;children: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*Node)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Trie)</span></span> Insert(str <span class="type">string</span>) &#123;</span><br><span class="line">    current := this.root</span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> []<span class="type">rune</span>(str) &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := current.children[<span class="type">string</span>(item)]; !ok &#123;</span><br><span class="line">            current.children[<span class="type">string</span>(item)] = NewNode()</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.children[<span class="type">string</span>(item)]</span><br><span class="line">    &#125;</span><br><span class="line">    current.isEnd = <span class="literal">true</span> <span class="comment">// 最后一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Trie)</span></span> Search(str <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    current := this.root</span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> []<span class="type">rune</span>(str) &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := current.children[<span class="type">string</span>(item)]; !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        current = current.children[<span class="type">string</span>(item)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.isEnd <span class="comment">// 最后一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    strs := []<span class="type">string</span>&#123;<span class="string">&quot;go&quot;</span>, <span class="string">&quot;gin&quot;</span>, <span class="string">&quot;golang&quot;</span>, <span class="string">&quot;goapp&quot;</span>, <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">    tree := NewTrie()</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        tree.Insert(s)</span><br><span class="line">    &#125;</span><br><span class="line">    strs = <span class="built_in">append</span>(strs, <span class="string">&quot;gi&quot;</span>, <span class="string">&quot;gogo&quot;</span>, <span class="string">&quot;gia&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _, s := <span class="keyword">range</span> strs &#123;</span><br><span class="line">        fmt.Println(tree.Search(s))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读取文件：如何统计文本的行数"><a href="#读取文件：如何统计文本的行数" class="headerlink" title="读取文件：如何统计文本的行数"></a>读取文件：如何统计文本的行数</h2><p>这里用到的是bufio.scanner</p><p>好比是一个带缓冲区的迭代器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.Open(<span class="string">&quot;pkg/mylog&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(err)</span><br><span class="line">    &#125;</span><br><span class="line">    scanner := bufio.NewScanner(file)</span><br><span class="line">    count := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;一共有&quot;</span>, count, <span class="string">&quot;行&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sync-Pool的基本用法"><a href="#Sync-Pool的基本用法" class="headerlink" title="Sync.Pool的基本用法"></a>Sync.Pool的基本用法</h2><p>sync.pool ：协程安全、可伸缩的、用于存放可重用对象的容器</p><p>原始目的是：</p><ul><li>存放已分配但暂时用不到的对象，需要时直接从pool中取，然后放回 以减少GC回收的压力</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p *sync.Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p = &amp;sync.Pool&#123;</span><br><span class="line">        New: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            log.Println(<span class="string">&quot;create user&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> &amp;User&#123;Name: <span class="string">&quot;zhangsan&quot;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    u1 := p.Get().(*User)</span><br><span class="line">    fmt.Println(u1)</span><br><span class="line">    u1.Name = <span class="string">&quot;lisi&quot;</span></span><br><span class="line">    p.Put(u1)</span><br><span class="line">    u2 := p.Get()</span><br><span class="line">    fmt.Println(u2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;限制协程执行数量的基本方法：&quot;&gt;&lt;a href=&quot;#限制协程执行数量的基本方法：&quot; class=&quot;headerlink&quot; title=&quot;限制协程执行数量的基本方法：&quot;&gt;&lt;/a&gt;限制协程执行数量的基本方法：&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="golang" scheme="https://setcreed.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://setcreed.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>03-zookeeper基础</title>
    <link href="https://setcreed.github.io/posts/3fb1bcaf/"/>
    <id>https://setcreed.github.io/posts/3fb1bcaf/</id>
    <published>2022-03-04T14:22:08.000Z</published>
    <updated>2023-11-14T23:51:51.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper简介"><a href="#zookeeper简介" class="headerlink" title="zookeeper简介"></a>zookeeper简介</h1><h2 id="zookeeper是什么"><a href="#zookeeper是什么" class="headerlink" title="zookeeper是什么"></a>zookeeper是什么</h2><p>zookeeper是一个开源的分布式协调服务，其设计目标是将那些复杂的容易出错的分布式一致服务封装起来，构成一个高效可靠的集合，并提供一些简单的接口给用户使用。</p><p>zookeeper主要用来解决分布式集群中应用系统的一致性问题，例如如何避免同时操作同一数据造成脏读的问题等。</p><ul><li>zookeeper本质生是一个分布式的小文件存储系统。提供类似于文件系统的目录树方式的数据存储，并且可以对树中的节点进行有效管理。</li><li>zookeeper提供给客户端监控存储在zookeeper内部数据的功能，从而可以基于数据的集群管理。</li></ul><h2 id="zookeeper的架构组成"><a href="#zookeeper的架构组成" class="headerlink" title="zookeeper的架构组成"></a>zookeeper的架构组成</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210519105843.png" alt=""></p><p>zookeeper没有沿⽤传递的Master/Slave概念，⽽是引⼊了Leader、Follower、Observer三种⻆⾊。</p><p><strong>leader</strong>：</p><ul><li>zookeeper集群工作的核心角色</li><li>集群内部各个服务器的调度者</li><li>事务请求（写操作）的唯一调度者和处理者，保证集群事务处理的顺序；对于create、delete等有写操作的请求，则需要同意转发给leader处理，leader需要决定编号、执行操作，这个过程称为一个事务。</li></ul><p><strong>follower</strong>：</p><ul><li>处理客户端非事务请求（读操作）</li><li>转发事务给leader</li><li>参与集群leader选举投票</li></ul><p>针对访问量大的zookeeper集群，可以增加观察者角色</p><p><strong>observer</strong>：</p><ul><li>观察者角色，观察 Zookeeper 集群的最新状态变化并将这些状态同步过来，其对于非事务请求可以进行独立处理，对于事务请求，则会转发给 Leader服务器进行处理。</li><li>不会参与任何形式的投票只提供非事务服务，通常用于在不影响集群事务处理能力的前提下提升集群的非事务处理能力。增加了集群增加并发的读请求。</li></ul><h2 id="zookeeper特点"><a href="#zookeeper特点" class="headerlink" title="zookeeper特点"></a>zookeeper特点</h2><ul><li>Leader负责进行投票的发起和决议，更新系统状态</li><li>Follower用于接收客户请求并向客户端返回结果，在选举Leader过程中参与投票</li><li>集群中只要有半数以上节点存活，Zookeeper集群就能正常服务</li><li>全局数据一致：每个server保存一份相同的数据副本，Client无论连接到哪个server，数据都是一 致的</li><li>数据更新原子性，一次数据更新要么成功，要么失败</li></ul><h1 id="zookeeper环境搭建"><a href="#zookeeper环境搭建" class="headerlink" title="zookeeper环境搭建"></a>zookeeper环境搭建</h1><h2 id="zookeeper搭建方式"><a href="#zookeeper搭建方式" class="headerlink" title="zookeeper搭建方式"></a>zookeeper搭建方式</h2><p>zookeeper安装方式有三种：单机模式、伪集群模式、集群模式</p><ul><li>单机模式：Zookeeper只运⾏在⼀台服务器上，适合测试环境</li><li>伪集群模式：就是在⼀台服务器上运⾏多个Zookeeper 实例</li><li>集群模式：Zookeeper运⾏于⼀个集群上，适合⽣产环境</li></ul><h2 id="zookeeper集群搭建"><a href="#zookeeper集群搭建" class="headerlink" title="zookeeper集群搭建"></a>zookeeper集群搭建</h2><p>下载稳定版本的zookeeper <a href="http://zookeeper.apache.org/releases.html">http://zookeeper.apache.org/releases.html</a></p><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><p>将安装包上传到一台linux服务器上，然后解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><p>进⼊ zookeeper-3.4.14 ⽬录，创建 data ⽂件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper-3.4.14</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br></pre></td></tr></table></figure><p>修改配置⽂件名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="built_in">mv</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>修改zoo.cfg中的data属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim zoo.cfg</span><br><span class="line"></span><br><span class="line">dataDir=/root/zookeeper-3.4.14/data</span><br></pre></td></tr></table></figure><p>zookeeper服务启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进⼊bin⽬录，启动服务输⼊命令</span></span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="伪集群模式"><a href="#伪集群模式" class="headerlink" title="伪集群模式"></a>伪集群模式</h3><p>将不同的zookeeper实例运⾏在同⼀台机器，⽤端⼝进⾏区分。</p><p>注意事项：</p><p>⼀台机器上部署了3个server，也就是说单台机器及上运⾏多个Zookeeper实例。这种情况下，必须 证每个配置⽂档的各个端⼝号不能冲突，除clientPort不同之外，dataDir也不同。另外，还要在dataDir所对应的⽬录中创建myid⽂件来指定对应的zookeeper服务器实例。</p><p><strong>解压压缩包 创建⽬录zkcluster</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> zkcluster</span><br><span class="line">tar -zxvf zookeeper-3.4.14.tar.gz -C /zkcluster</span><br></pre></td></tr></table></figure><p><strong>重新命名文件夹</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> zookeeper-3.4.14 zookeeper01</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r zookeeper01/ zookeeper02</span><br><span class="line"><span class="built_in">cp</span> -r zookeeper01/ zookeeper03</span><br></pre></td></tr></table></figure><p><strong>分别在zookeeper01、zookeeper02、zookeeper03⽬录下创建data及logs⽬录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p data/logs</span><br></pre></td></tr></table></figure><p><strong>修改配置⽂件名称:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="built_in">mv</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p><strong>配置每⼀个zookeeper 的dataDir（zoo.cfg） clientPort 分别为2181 2182 2183:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zookeeper01</span></span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/zkcluster/zookeeper01/data</span><br><span class="line">dataLogDir=/zkcluster/zookeeper01/data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper02</span></span><br><span class="line">clientPort=2182</span><br><span class="line">dataDir=/zkcluster/zookeeper02/data</span><br><span class="line">dataLogDir=/zkcluster/zookeeper02/data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper03</span></span><br><span class="line">clientPort=2183</span><br><span class="line">dataDir=/zkcluster/zookeeper03/data</span><br><span class="line">dataLogDir=/zkcluster/zookeeper03/data/logs</span><br></pre></td></tr></table></figure><p><strong>配置集群：</strong></p><ul><li><p>在每个zookeeper的 data ⽬录下创建⼀个 myid ⽂件，内容分别是1、2、3 。这个⽂件就是记录 每个服务器的ID</p></li><li><p>在每⼀个zookeeper 的 zoo.cfg配置客户端访问端⼝（clientPort）和集群服务器IP列表</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.1=10.211.55.4:2881:3881</span><br><span class="line">server.2=10.211.55.4:2882:3882</span><br><span class="line">server.3=10.211.55.4:2883:3883</span><br><span class="line"><span class="comment"># server.服务器ID=服务器IP地址：服务器之间通信端⼝：服务器之间投票选举端⼝</span></span><br></pre></td></tr></table></figure><p><strong>启动集群 依次启动三个zk实例</strong></p><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><p><strong>修改配置文件创建data与log目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建zk存储数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/servers/zookeeper-3.4.14/data</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建zk日志文件目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/servers/zookeeper-3.4.14/data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改zk配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /opt/servers/zookeeper-3.4.14/conf</span><br><span class="line"><span class="comment">#文件改名</span></span><br><span class="line"><span class="built_in">mv</span> zoo_sample.cfg zoo.cfg</span><br><span class="line">vim zoo.cfg</span><br><span class="line"><span class="comment">#更新datadir</span></span><br><span class="line">dataDir=/opt/servers/zookeeper-3.4.14/data</span><br><span class="line"><span class="comment">#增加logdir</span></span><br><span class="line">dataLogDir=/opt/servers/zookeeper-3.4.14/data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加集群配置</span></span><br><span class="line"><span class="comment">##server.服务器ID=服务器IP地址：服务器之间通信端口：服务器之间投票选举端口</span></span><br><span class="line">server.1=node1:2888:3888</span><br><span class="line">server.2=node2:2888:3888</span><br><span class="line">server.3=node3:2888:3888</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开注释</span></span><br><span class="line"><span class="comment">#ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时</span></span><br><span class="line">autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure><p><strong>添加myid配置</strong>：</p><p>在zookeeper的 data 目录下创建一个 myid 文件，内容为1，这个文件就是记录每个服务器的ID</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/servers/zookeeper-3.4.14/data</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; myid</span><br></pre></td></tr></table></figure><p><strong>安装包分发并修改myid的值</strong></p><p><strong>依次启动三个zk实例</strong></p><p>集群启动停止脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim zk.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start zookeeper server...&quot;</span></span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$#</span>==<span class="number">0</span>));<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;no params&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">hosts=<span class="string">&quot;node1 node2 node3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$hosts</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ssh <span class="variable">$host</span> <span class="string">&quot;source /etc/profile; /opt/servers/zookeeper-3.4.14/bin/zkServer.sh <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="zookeeper系统模型"><a href="#zookeeper系统模型" class="headerlink" title="zookeeper系统模型"></a>zookeeper系统模型</h1><p>zookeeper数据模型ZNode</p><p>在zookeeper中，数据模型被保存到一个个数据节点上，这些节点被称为Znode。Znode是zookeeper中最小树单位。，在 ZNode 下面又可以再挂 ZNode，这样一层层下去就形成了一个层次化命名空间 ZNode 树，我们称为 ZNode Tree，它采用了类似文件系统的层级树状结构进行管理。见下图示例：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210519162222.png" alt=""></p><h2 id="ZNode类型"><a href="#ZNode类型" class="headerlink" title="ZNode类型"></a>ZNode类型</h2><p>Zookeeper 节点类型可以分为三大类：</p><ul><li>持久性节点（Persistent）</li><li>临时性节点（Ephemeral）</li><li>顺序性节点（Sequential）</li></ul><p>在开发中在创建节点的时候通过组合可以生成以下四种节点类型：持久节点、持久顺序节点、临时节点、临时顺序节点。不同类型的节点则会有不同的生命周期</p><ul><li><strong>持久节点</strong>：是Zookeeper中最常见的一种节点类型，所谓持久节点，就是指节点被创建后会一直存在服务器，直到删除操作主动清除。</li><li><strong>持久顺序节点</strong>：就是有顺序的持久节点，节点特性和持久节点是一样的，只是额外特性表现在顺序上。顺序特性实质是在创建节点的时候，会在节点名后面加上一个数字后缀，来表示其顺序。</li><li><strong>临时节点</strong>：就是会被自动清理掉的节点，它的生命周期和客户端会话绑在一起，客户端会话结束，节点会被删除掉。与持久性节点不同的是，临时节点不能创建子节点。</li><li><strong>临时顺序节点</strong>：就是有顺序的临时节点，和持久顺序节点相同，在其创建的时候会在名字后面加上数字后缀。</li></ul><p><strong>事务ID</strong>：</p><p>在ZooKeeper中，事务是指能够改变ZooKeeper服务器状态的操作，我们也称之为事务操作或更新 操作，一般包括数据节点创建与删除、数据节点内容更新等操作。对于每一个事务请求，ZooKeeper都会为其分配一个全局唯一的事务ID，用 ZXID 来表示，通常是一个 64 位的数字。每一个 ZXID 对应一次 更新操作，从这些ZXID中可以间接地识别出ZooKeeper处理这些更新操作请求的全局顺序</p><p>zk中的事务指的是对zk服务器状态改变的操作(create,update data,更新字节点)；zk对这些事务操作都 会编号，这个编号是自增长的被称为ZXID。</p><h2 id="ZNode的状态信息"><a href="#ZNode的状态信息" class="headerlink" title="ZNode的状态信息"></a>ZNode的状态信息</h2><p>使用bin/zkCli.sh 连接到zk集群</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210519162844.png" alt=""></p><p>整个 ZNode 节点内容包括两部分：节点数据内容和节点状态信息。数据内容是空，其他的属于状态信息：</p><ul><li>cZxid 就是 Create ZXID，表示节点被创建时的事务ID。</li><li>ctime 就是 Create Time，表示节点创建时间。</li><li>mZxid 就是 Modified ZXID，表示节点最后一次被修改时的事务ID。</li><li>mtime 就是 Modified Time，表示节点最后一次被修改的时间。</li><li>pZxid 表示该节点的子节点列表最后一次被修改时的事务 ID。只有子节点列表变更才会更新 pZxid，子节点内容变更不会更新。</li><li>cversion 表示子节点的版本号。</li><li>dataVersion 表示内容版本号。</li><li>aclVersion 标识acl版本</li><li>ephemeralOwner 表示创建该临时节点时的会话 sessionID，如果是持久性节点那么值为 0</li><li>dataLength 表示数据长度。</li><li>numChildren 表示直系子节点数。</li></ul><h2 id="Watcher-监听机制"><a href="#Watcher-监听机制" class="headerlink" title="Watcher 监听机制"></a>Watcher 监听机制</h2><p>Zookeeper使用Watcher机制实现分布式数据的发布/订阅功能</p><p>一个典型的发布/订阅模型系统定义了一种 一对多的订阅关系，能够让多个订阅者同时监听某一个主题对象，当这个主题对象自身状态变化时，会通知所有订阅者，使它们能够做出相应的处理。</p><p>在 ZooKeeper 中，引入了 Watcher 机制来实现这种分布式的通知功能。ZooKeeper 允许客户端向服务端注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，那么Zk就会向指定客户端发送一个事件通知来实现分布式的通知功能。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210519164410.png" alt=""></p><p>Zookeeper的Watcher机制主要包括客户端线程、客户端WatcherManager、Zookeeper服务器三部分。具体工作流程：</p><ul><li>客户端在向Zookeeper服务器注册的同时，会将Watcher对象存储在客户端的WatcherManager当中</li><li>当Zookeeper服务器触发Watcher事件后，会向客户端发送通知</li><li>客户端线程从WatcherManager中取出对应的Watcher对象来执行回调逻辑</li></ul><h1 id="zookeeper基本使用"><a href="#zookeeper基本使用" class="headerlink" title="zookeeper基本使用"></a>zookeeper基本使用</h1><h2 id="zookeeper的命令行操作"><a href="#zookeeper的命令行操作" class="headerlink" title="zookeeper的命令行操作"></a>zookeeper的命令行操作</h2><p>通过zkClient进入zookeeper客户端命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./zkcli.sh  <span class="comment"># 连接本地的zookeeper服务器</span></span><br><span class="line">./zkCli.sh -server ip:port(2181)  <span class="comment"># 连接指定的服务器</span></span><br></pre></td></tr></table></figure><p>连接成功之后，系统会输出Zookeeper的相关环境及配置信息等信息。输入help之后，屏幕会输出可用 的Zookeeper命令，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520112419.png" alt=""></p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>使用create命令，可以创建一个Zookeeper节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create [-s][-e] path data</span><br><span class="line"><span class="comment"># 其中，-s或-e分别指定节点特性，顺序或临时节点，若不指定，则创建持久节点</span></span><br></pre></td></tr></table></figure><p><strong>创建顺序节点：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 4] create -s /zk-test 123</span><br><span class="line">Created /zk-test0000000000</span><br></pre></td></tr></table></figure><p>执行完后，就在根节点下创建了一个叫做/zk-test的节点，该节点内容就是123，同时可以看到创建 的zk-test节点后面添加了一串数字以示区别</p><p><strong>创建临时节点：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] create -e /zk-temp 123</span><br><span class="line">Created /zk-temp</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] <span class="built_in">ls</span> /</span><br><span class="line">[zk-test0000000000, zookeeper, zk-temp]</span><br></pre></td></tr></table></figure><p>临时节点在客户端会话结束后会自动删除。</p><p><strong>创建永久节点：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] create /zk-permanent 123</span><br><span class="line">Created /zk-permanent</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] <span class="built_in">ls</span> /</span><br><span class="line">[zk-permanent, zk-test0000000000, zookeeper]</span><br></pre></td></tr></table></figure><p>可以看到永久节点不同于顺序节点，不会自动在后面添加一串数字</p><h3 id="读取节点"><a href="#读取节点" class="headerlink" title="读取节点"></a>读取节点</h3><ul><li>ls命令可以列出Zookeeper指定节点下的所有子节点，但只能查看指定节点下的第一级的所有子节点</li><li>get命令可以获取Zookeeper指定节点的数据内容和属性信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] <span class="built_in">ls</span> /</span><br><span class="line">[zk-permanent, zk-test0000000000, zookeeper]</span><br></pre></td></tr></table></figure><p>使用如下命令：get /zk-permanent，获取/zk-permanent的数据内容和属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] get /zk-persist</span><br><span class="line">123</span><br><span class="line">cZxid = 0x300000006</span><br><span class="line">ctime = Thu May 20 01:33:28 UTC 2021</span><br><span class="line">mZxid = 0x300000006</span><br><span class="line">mtime = Thu May 20 01:33:28 UTC 2021</span><br><span class="line">pZxid = 0x300000006</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 3</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>第一行是节点/zk-permanent 的数据内容，其他几行则是 建该节点的事务ID（cZxid）、最后一次更新该节点的事务ID（mZxid）和最后一次更新该节点的时间（mtime）等属性信息</p><h3 id="更新命令"><a href="#更新命令" class="headerlink" title="更新命令"></a>更新命令</h3><p>使用set命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] set /zk-persist 456</span><br><span class="line">cZxid = 0x300000006</span><br><span class="line">ctime = Thu May 20 01:33:28 UTC 2021</span><br><span class="line">mZxid = 0x300000009</span><br><span class="line">mtime = Thu May 20 01:38:20 UTC 2021</span><br><span class="line">pZxid = 0x300000006</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 3</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>现在dataVersion已经变为1了，表示进行了更新</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 8] delete /zk-permanent</span><br><span class="line">[zk: localhost:2181(CONNECTED) 9] <span class="built_in">ls</span> /</span><br><span class="line">[zk-test0000000000, zookeeper]</span><br></pre></td></tr></table></figure><p>可以看到，已经成功删除/zk-permanent节点</p><p>若删除节点存在子节点，那么无法删除该节点，必须先删除子节点，再删除父节点</p><h2 id="zookeeper客户端ZkClient使用"><a href="#zookeeper客户端ZkClient使用" class="headerlink" title="zookeeper客户端ZkClient使用"></a>zookeeper客户端ZkClient使用</h2><p>ZkClient是Github上一个开源的zookeeper客户端，在Zookeeper原生API接口之上进行了包装，是一个更易用的Zookeeper客户端，同时，zkClient在内部还实现了诸如Session超时重连、Watcher反复注册等功能</p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建会话"><a href="#创建会话" class="headerlink" title="创建会话"></a>创建会话</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取zkClient对象，client与zk集群通信端空是2181</span></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111:2181&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;zkClient = &quot;</span> + zkClient);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建节点-1"><a href="#创建节点-1" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取zkClient对象，client与zk集群通信端空是2181</span></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111:2181&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;zkClient = &quot;</span> + zkClient);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建节点</span></span><br><span class="line">        zkClient.createPersistent(<span class="string">&quot;/cwz-client/cwz-c1&quot;</span>, <span class="literal">true</span>);  <span class="comment">// 级联创建，第二个参数为true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;path is created&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ZkClient通过设置createParents参数为true可以递归的先创建父节点，再创建子节点</p><h3 id="删除节点-1"><a href="#删除节点-1" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先获取zkClient对象，client与zk集群通信端空是2181</span></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111:2181&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;zkClient = &quot;</span> + zkClient);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line"><span class="comment">//        zkClient.delete(&quot;/cwz-client&quot;);</span></span><br><span class="line">        zkClient.deleteRecursive(<span class="string">&quot;/cwz-client&quot;</span>); <span class="comment">// 递归删除非空节点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;delete path is success&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听节点变化"><a href="#监听节点变化" class="headerlink" title="监听节点变化"></a>监听节点变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkChildListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetChange</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// zkClient对指定目录监听，指定收到通知之后的逻辑</span></span><br><span class="line">        <span class="comment">// 对/cwz-client注册了监听器</span></span><br><span class="line">        zkClient.subscribeChildChanges(<span class="string">&quot;/cwz-client&quot;</span>, <span class="keyword">new</span> <span class="title class_">IZkChildListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleChildChange</span><span class="params">(String path, List&lt;String&gt; childs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(path + <span class="string">&quot;childs changes, current childs &quot;</span> + childs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用zkClient创建、更新、删除节点，验证监听器运行情况</span></span><br><span class="line">        zkClient.createPersistent(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 只是为了方便观察</span></span><br><span class="line">        zkClient.createPersistent(<span class="string">&quot;/cwz-client/c1&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        zkClient.delete(<span class="string">&quot;/cwz-client/c1&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        zkClient.delete(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/cwz-clientchilds changes, current childs []</span><br><span class="line">/cwz-clientchilds changes, current childs [c1]</span><br><span class="line">/cwz-clientchilds changes, current childs []</span><br><span class="line">/cwz-clientchilds changes, current childs null</span><br></pre></td></tr></table></figure><p>由此可知：</p><ul><li>监听器可以对不存在的目录进行监听</li><li>监听目录下 子节点发生改变，服务端都会通知客户端，并将最新的子节点列表发送给客户端</li><li>监听目录创建和删除本身也会被监听到</li></ul><h3 id="监听数据变化"><a href="#监听数据变化" class="headerlink" title="监听数据变化"></a>监听数据变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenDataChange</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义序列化类型</span></span><br><span class="line">        zkClient.setZkSerializer(<span class="keyword">new</span> <span class="title class_">ZkStrSerializer</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断节点是否存在，不存在就创建节点并且赋值</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> zkClient.exists(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">            zkClient.createEphemeral(<span class="string">&quot;/cwz-client&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册监听器，节点数据的改变，接收通知后的处理逻辑定义</span></span><br><span class="line">        zkClient.subscribeDataChanges(<span class="string">&quot;/cwz-client&quot;</span>, <span class="keyword">new</span> <span class="title class_">IZkDataListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataChange</span><span class="params">(String path, Object data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 定义接收通知之后的处理逻辑</span></span><br><span class="line">                System.out.println(path + <span class="string">&quot; data is changed, new data &quot;</span> + data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 数据删除</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataDeleted</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(path + <span class="string">&quot; is deleted!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新节点的数据，删除节点，验证监听器是否正常运行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> zkClient.readData(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;data = &quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        zkClient.writeData(<span class="string">&quot;/cwz-client&quot;</span>, <span class="string">&quot;new data&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line">        zkClient.delete(<span class="string">&quot;/cwz-client&quot;</span>);</span><br><span class="line">        Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义序列化类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.exception.ZkMarshallingError;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.serialize.ZkSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkStrSerializer</span> <span class="keyword">implements</span> <span class="title class_">ZkSerializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> ZkMarshallingError &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(o).getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> ZkMarshallingError &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = 123</span><br><span class="line">/cwz-client data is changed, new data new data</span><br><span class="line">/cwz-client is deleted!</span><br></pre></td></tr></table></figure><h1 id="zookeeper内部机制"><a href="#zookeeper内部机制" class="headerlink" title="zookeeper内部机制"></a>zookeeper内部机制</h1><h2 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h2><ul><li>集群中半数以上机器存活，集群就可用。所以Zookeeper适合安装奇数台服务器。</li><li>Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其它为Follower，Leader是通过内部的选举机制产生的</li></ul><h3 id="集群首次启动"><a href="#集群首次启动" class="headerlink" title="集群首次启动"></a>集群首次启动</h3><p>假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520151553.png" alt=""></p><p>zookeeper的选举机制</p><ul><li>服务器1启动，此时只有它一台服务器启动了，它发出去的报文没有任何响应，所以它的选举状态一直是LOOKING状态</li><li>服务器2启动，它与最开始启动的服务器1进行通信，互相交换自己的选举结果，由于两者都没有历史数据，所以id值较大的服务器2胜出，但是由于没有达到超过半数以上的服务器都同意选举它(这个例子中的半数以上是3)，所以服务器1、2还是继续保持LOOKING状态</li><li>服务器3启动，根据前面的理论分析，服务器3成为服务器1、2、3中的老大，而与上面不同的是，此时有三台服务器选举了它，所以它成为了这次选举的Leader</li><li>服务器4启动，根据前面的分析，理论上服务器4应该是服务器1、2、3、4中最大的，但是由于前面已经有半数以上的服务器选举了服务器3，所以它只能接收当小弟的命了</li><li>服务器5启动，同4一样称为follower</li></ul><h3 id="集群非首次启动"><a href="#集群非首次启动" class="headerlink" title="集群非首次启动"></a>集群非首次启动</h3><ul><li>每个节点在选举时都会参考自身节点的zxid值（事务ID）</li><li>优先选择zxid值大的节点称为Leader</li></ul><h2 id="ZAB一致性协议"><a href="#ZAB一致性协议" class="headerlink" title="ZAB一致性协议"></a>ZAB一致性协议</h2><h3 id="分布式数据一致性问题"><a href="#分布式数据一致性问题" class="headerlink" title="分布式数据一致性问题"></a>分布式数据一致性问题</h3><ul><li>将数据复制到分布式部署的多台机器中，可以消除单点故障，防止系统由于某台（些）机器宕机导致的不可用</li><li>通过负载均衡技术，能够让分布在不同地方的数据副本全都对外提供服务。有效提高系统性能</li></ul><p>在分布式系统中引入数据复制机制后，多台数据节点之间由于网络等原因很容易产生数据不一致的情况</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152019.png" alt=""></p><p>当客户端Client1将系统中的一个值K1由V1更新为V2，但是客户端Client2读取的是一个还没有同步更新的副本，K1的值依然是V1,这就导致了数据的不一致性。其中，常见的就是主从数据库之间的复制延时问题</p><h2 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h2><p>zookeeper就是分布式一致性问题的工业解决方案，paxos是其底层理论算法，其中zab，raft和众多开源算法是对paxos的工业级实现。ZK没有完全采用paxos算法，而是使用了一种称为Zookeeper Atomic Broadcast（ZAB，Zookeeper原子消息广播协议）的协议作为其数据一致性的核心算法</p><ul><li>ZAB 协议是为分布式协调服务 Zookeeper 专门设计的一种支持崩溃恢复和原子广播协议</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152200.png" alt=""></p><p>ZK怎么处理集群中的数据？所有客户端写入数据都是写入Leader中，然后，由 Leader 复制到Follower中。ZAB会将服务器数据的状态变更以事务Proposal的形式广播到所有的副本进程上，ZAB协议能够保证了事务操作的一个全局的变更序号(ZXID)。</p><h3 id="广播消息"><a href="#广播消息" class="headerlink" title="广播消息"></a>广播消息</h3><p>ZAB 协议的消息广播过程类似于 二阶段提交过程。对于客户端发送的写请求，全部由 Leader 接收，Leader 将请求封装成一个事务 Proposal(提议)，将其发送给所有 Follwer ，如果收到超过半数反馈ACK，则执行 Commit 操作（先提交自己，再发送 Commit 给所有 Follwer）。</p><ul><li>发送Proposal到Follower</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152429.png" alt=""></p><ul><li>Leader接收Follower的ACK</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152500.png" alt=""></p><ul><li>超过半数ACK则Commit</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210520152520.png" alt=""></p><p>不能正常反馈Follower恢复正常后会进入数据同步阶段最终与Leader保持一致</p><p>说明：</p><ul><li>Leader接收到Client请求之后，会将这个请求封装成一个事务，并给这个事务分配一个全局递增的唯一 ID，称为事务ID（ZXID），ZAB 协议要求保证事务的顺序，因此必须将每一个事务按照 ZXID进行先后排序然后处理</li><li>ZK集群为了保证任何事务操作能够有序的顺序执行，只能是 Leader 服务器接受写请求，即使是Follower 服务器接受到客户端的请求，也会转发到 Leader 服务器进行处理</li><li>ZK提供的应该是最终一致性的标准。ZK所有节点接收写请求之后可以在一定时间内保证所有节点都能看到该条数据</li></ul><h3 id="Leader崩溃问题"><a href="#Leader崩溃问题" class="headerlink" title="Leader崩溃问题"></a>Leader崩溃问题</h3><p>Leader宕机后，ZK集群无法正常工作，ZAB协议提供了一个高效且可靠的leader选举算法</p><p>Leader宕机后，被选举的新Leader需要解决的问题：</p><ul><li>ZAB 协议确保那些已经在 Leader 提交的事务最终会被所有服务器提交</li><li>ZAB 协议确保丢弃那些只在 Leader 提出/复制，但没有提交的事务</li></ul><p>基于上面的目的，ZAB协议设计了一个选举算法：能够确保已经被Leader提交的事务被集群接受，丢弃还没有提交的事务</p><p>这个选举算法的关键点：保证选举出的新Leader拥有集群中所有节点最大编号(ZXID)的事务</p><h1 id="zookeeper应用实践"><a href="#zookeeper应用实践" class="headerlink" title="zookeeper应用实践"></a>zookeeper应用实践</h1><p>ZooKeeper是一个典型的发布/订阅模式的分布式数据管理与协调框架。</p><p>通过对ZooKeeper中丰富的数据节点类型进行交叉使用，配合Watcher事件通知机制，可以非常方便地构建一系列分布式应用中都会涉及的核心功能：</p><ul><li>数据发布/订阅</li><li>命名服务</li><li>集群管理</li><li>Master选举</li><li>分布式锁</li><li>分布式队列</li></ul><p>zookeeper两大特性：</p><ul><li>客户端如果对Zookeeper的数据节点注册Watcher监听，那么当该数据节点的内容或是其子节点列表发生变更时，Zookeeper服务器就会向订阅的客户端发送变更通知</li><li>对在Zookeeper上创建的临时节点，一旦客户端与服务器之间的会话失效，那么临时节点也会被自动删除</li></ul><p>利用其两大特性，可以实现集群机器存活监控系统，若监控系统在/clusterServers节点上注册一个Watcher监听，那么但凡进行动态添加机器的操作，就会在/clusterServers节点下创建一个临时节 点：/clusterServers/[Hostname]，这样，监控系统就能够实时监测机器的变动情况</p><h2 id="服务器上下线动态监听"><a href="#服务器上下线动态监听" class="headerlink" title="服务器上下线动态监听"></a>服务器上下线动态监听</h2><p>分布式系统中，主节点会有多台，主节点可能因为任何原因出现宕机或者下线，而任意一台客户端都要能实时感知到主节点服务器的上下线</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525140447.png" alt=""></p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.onoffline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务端主要提供了client需要的一个时间查询服务，服务端向zk建立临时节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="comment">//获取zkclient</span></span><br><span class="line">    <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">connectInfo</span> <span class="operator">=</span> <span class="string">&quot;192.168.33.111:2181,192.168.33.112:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connectZk</span><span class="params">()</span> &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZkClient</span>(connectInfo);</span><br><span class="line">        <span class="comment">// 创建服务端建立临时节点目录</span></span><br><span class="line">        <span class="keyword">if</span> (!zkClient.exists(<span class="string">&quot;/servers&quot;</span>)) &#123;</span><br><span class="line">            zkClient.createPersistent(<span class="string">&quot;/servers&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告知zk服务器相关信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveServerInfo</span><span class="params">(String ip, String port)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sequencePath</span> <span class="operator">=</span> zkClient.createEphemeralSequential(<span class="string">&quot;/servers/server&quot;</span>, ip + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器：&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;，向zk保存信息成功，成功上线可以接受client查询&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备两个服务端启动上线(多线程模拟)</span></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">        server.connectZk();</span><br><span class="line">        server.saveServerInfo(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 听过时间服务的线程没有启动，创建一个线程类，可以接收socket请求</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TimeService</span>(Integer.parseInt(args[<span class="number">1</span>])).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端提供时间查询的线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.onoffline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供时间查询服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeService</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeService</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 通过socket与client进行交流，启动serversocket监听请求</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 指定监听的端口</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取client发送的内容</span></span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">                out.write(<span class="keyword">new</span> <span class="title class_">Date</span>().toString().getBytes());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.onoffline;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkChildListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册监听zk指定目录</span></span><br><span class="line"><span class="comment"> * 维护自己本地一个servers信息，收到通知要进行更新</span></span><br><span class="line"><span class="comment"> * 发送时间擦查询请求并接受服务端返回的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="comment">//获取zkclient</span></span><br><span class="line">    <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">connectInfo</span> <span class="operator">=</span> <span class="string">&quot;192.168.33.111:2181,192.168.33.112:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 维护一个servers信息集合</span></span><br><span class="line">    ArrayList&lt;String&gt; infos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connectZk</span><span class="params">()</span> &#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> <span class="title class_">ZkClient</span>(connectInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一次获取服务器信息 所有子节点</span></span><br><span class="line">        List&lt;String&gt; childs = zkClient.getChildren(<span class="string">&quot;/servers&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String child : childs) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> zkClient.readData(<span class="string">&quot;/servers/&quot;</span> + child);</span><br><span class="line">            infos.add(String.valueOf(data));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对servers目录进行监听</span></span><br><span class="line">        zkClient.subscribeChildChanges(<span class="string">&quot;/servers&quot;</span>, <span class="keyword">new</span> <span class="title class_">IZkChildListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleChildChange</span><span class="params">(String s, List&lt;String&gt; children)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 接收到通知，说明节点发生了变化，client需要更新infos集合中的数据</span></span><br><span class="line">                ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历更新过后所有节点信息</span></span><br><span class="line">                <span class="keyword">for</span> (String path : children) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">data</span> <span class="operator">=</span> zkClient.readData(<span class="string">&quot;/servers/&quot;</span> + path);</span><br><span class="line">                    list.add(String.valueOf(data));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 最新数据覆盖旧数据</span></span><br><span class="line">                infos = list;</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到通知，最新服务器信息为：&quot;</span> + infos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送时间查询的请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 目标服务器地址</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(infos.size());</span><br><span class="line">        <span class="type">String</span> <span class="variable">ipPort</span> <span class="operator">=</span> infos.get(i);</span><br><span class="line">        String[] arr = ipPort.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立socket连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(arr[<span class="number">0</span>], Integer.parseInt(arr[<span class="number">1</span>]));</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        out.write(<span class="string">&quot;query time&quot;</span>.getBytes());</span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收返回结果</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        in.read(bytes); <span class="comment">// 读取服务端返回数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;client端接收到server：&quot;</span> + ipPort + <span class="string">&quot;返回结果：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Client</span>();</span><br><span class="line">        client.connectZk();  <span class="comment">// 监听器逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            client.sendRequest(); <span class="comment">// 发送请求</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每隔几秒钟发送一次请求到服务端</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动多个服务端线程</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>锁的概念：</p><ul><li>在单机程序中，当存在多个线程可以同时改变某个变量（可变共享变量）时，为了保证线程安全(数据不能出现脏数据)就需要对变量或代码块做同步，使其在修改这种变量时能够串行执行消除并发修改变量。</li><li>对变量或者堆代码码块做同步本质上就是加锁。目的就是实现多个线程在一个时刻同一个代码块只能有一个线程可执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525141544.png" alt=""></p><p>上面的设计存在线程安全问题：</p><ul><li>假设Redis 里面的某个商品库存为 1；此时两个用户同时下单，其中一个下单请求执行到第3 步，更新数据库的库存为 0，但是第 4 步还没有执行。</li><li>而另外一个用户下单执行到了第 2 步，发现库存还是 1，就继续执行第 3 步。但是商品库存已经为0，所以如果数据库没有限制就会出现超卖的问题。</li></ul><p>解决办法：</p><ul><li>用锁把 2、3、4 步锁住，让他们执行完之后，另一个线程才能进来执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525141717.png" alt=""></p><p>公司业务发展迅速，系统应对并发不断提高，解决方案是要增加一台机器，结果会出现更大的问题</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525141754.png" alt=""></p><p>假设有两个下单请求同时到来，分别由两个机器执行，那么这两个请求是可以同时执行了，依然存在超卖的问题。</p><p>如图所示系统是运行在两个不同的 JVM 里面，不同的机器上，增加的锁只对自己当前 JVM 里面的线程有效，对于其他 JVM 的线程是无效的。所以现在已经不是线程安全问题。需要保证两台机器加的锁是同一个锁，此时分布式锁就能解决该问题。</p><p>分布式锁的作用：在整个系统提供一个全局、唯一的锁，在分布式系统中每个系统在进行相关操作的时候需要获取到该锁，才能执行相应操作</p><h3 id="使用zk实现分布式锁"><a href="#使用zk实现分布式锁" class="headerlink" title="使用zk实现分布式锁"></a>使用zk实现分布式锁</h3><p>利用Zookeeper可以创建临时带序号节点的特性来实现一个分布式锁</p><p>实现思路：</p><ul><li>锁就是zk指定目录下序号最小的临时序列节点，多个系统的多个线程都要在此目录下创建临时的顺序节点，因为zk会为我们保证节点的顺序性，所以可以利用节点的顺序进行锁的判断</li><li>每个线程都是先创建临时顺序节点，然后获取当前目录下最小的节点(序号)，判断最小节点是不是当前节点，如果是那么获取锁成功，如果不是那么获取锁失败</li><li>获取锁失败的线程获取当前节点上一个临时顺序节点，并对此节点进行监听，当该节点删除的时候(上一个线程执行结束删除或者是掉线zk删除临时节点)这个线程会获取到通知，代表获取到了锁</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525142043.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525142122.png" alt=""></p><p>main方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.dislock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用10个线程模拟分布式环境</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DisLockRunnable</span>()).start();   <span class="comment">// 启动线程</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DisLockRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每个线程的任务, 抢锁</span></span><br><span class="line">            <span class="type">DisClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisClient</span>();</span><br><span class="line">            client.getDisLock();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟获取锁之后的其他动作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            client.deleteLock();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cwz.zk.dislock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抢锁</span></span><br><span class="line"><span class="comment"> * 1、去zk创建临时序列节点，并获取到序号</span></span><br><span class="line"><span class="comment"> * 2、判断自己创建节点序号是否是当前节点最小序号，如果是则获取锁，执行相关操作，最后释放锁</span></span><br><span class="line"><span class="comment"> * 3、如果不是最小节点，当前线程需要等待，等待前一个序号的节点被删除，然后再次判断自己是否是最小节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DisClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化zk的 distrilock节点</span></span><br><span class="line">        <span class="keyword">synchronized</span> (DisClient.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!zkClient.exists(<span class="string">&quot;/distrilock&quot;</span>)) &#123;</span><br><span class="line">                zkClient.createPersistent(<span class="string">&quot;/distrilock&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前一个节点</span></span><br><span class="line">    String beforeNodePath;</span><br><span class="line">    String currentNodePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取zkClient</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ZkClient</span> <span class="variable">zkClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkClient</span>(<span class="string">&quot;192.168.33.111,192.168.33.112&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把抢锁过程分为两部分，一部分是创建节点，比较序号；另一部分是等待锁</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完整获取锁方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDisLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取到当前线程名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="comment">// 首先调用tryGetLock</span></span><br><span class="line">        <span class="keyword">if</span> (tryGetLock()) &#123;</span><br><span class="line">            <span class="comment">// 说明获取到锁了</span></span><br><span class="line">            System.out.println(threadName + <span class="string">&quot;: 获取到了锁&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有获取到锁</span></span><br><span class="line">            System.out.println(threadName + <span class="string">&quot;: 获取锁失败，进入等待状态&quot;</span>);</span><br><span class="line">            waitForLock();</span><br><span class="line">            <span class="comment">// 递归获取锁</span></span><br><span class="line">            getDisLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试获取锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryGetLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建临时顺序节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentNodePath == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(currentNodePath)) &#123;</span><br><span class="line">            currentNodePath = zkClient.createEphemeralSequential(<span class="string">&quot;/distrilock/&quot;</span>, <span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; childs = zkClient.getChildren(<span class="string">&quot;/distrilock&quot;</span>);</span><br><span class="line">        <span class="comment">// 对节点信息进行排序</span></span><br><span class="line">        Collections.sort(childs);</span><br><span class="line">        <span class="type">String</span> <span class="variable">minNode</span> <span class="operator">=</span> childs.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 判断自己创建节点是否与最小序号一致</span></span><br><span class="line">        <span class="keyword">if</span> (currentNodePath.equals(<span class="string">&quot;/distrilock/&quot;</span> + minNode)) &#123;</span><br><span class="line">            <span class="comment">// 说明当前线程创建的就是序号最小节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说明最小节点不是自己创建，需要监控自己当前节点序号前一个节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Collections.binarySearch(childs, currentNodePath.substring(<span class="string">&quot;/distrilock/&quot;</span>.length()));</span><br><span class="line">            <span class="comment">// lastNodeChild是不包括父节点</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">lastNodeChild</span> <span class="operator">=</span> childs.get(i - <span class="number">1</span>);</span><br><span class="line">            beforeNodePath = <span class="string">&quot;/distrilock/&quot;</span> + lastNodeChild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待之前节点释放锁，如何判断锁被释放，需要唤醒线程继续尝试tryGetLock</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">waitForLock</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备一个监听器</span></span><br><span class="line">        <span class="type">IZkDataListener</span> <span class="variable">iZkDataListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IZkDataListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataChange</span><span class="params">(String s, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDataDeleted</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 提醒当前线程再次获取锁</span></span><br><span class="line"></span><br><span class="line">                countDownLatch.countDown(); <span class="comment">// 把值减1变为0，唤醒之前await线程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监控前一个节点</span></span><br><span class="line">        zkClient.subscribeDataChanges(beforeNodePath, iZkDataListener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在监听的通知没来之前，该线程应该是等待状态，先判断一次上一个节点是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient.exists(beforeNodePath)) &#123;</span><br><span class="line">            <span class="comment">// 开始等待  countDownLatch:线程同步计数器</span></span><br><span class="line">            countDownLatch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                countDownLatch.await();   <span class="comment">// 阻塞，直到countDownLatch值变为0</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解除监听</span></span><br><span class="line">        zkClient.unsubscribeDataChanges(beforeNodePath, iZkDataListener);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (zkClient != <span class="literal">null</span>) &#123;</span><br><span class="line">            zkClient.delete(currentNodePath);</span><br><span class="line">            zkClient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分布式锁的实现可以是 Redis、Zookeeper，相对来说生产环境如果使用分布式锁可以考虑使用Redis实现而非zk</p><h1 id="Hadoop-HA"><a href="#Hadoop-HA" class="headerlink" title="Hadoop HA"></a>Hadoop HA</h1><h2 id="HA概述"><a href="#HA概述" class="headerlink" title="HA概述"></a>HA概述</h2><ul><li>HA（High Available），即高可用（7*24小时不中断服务）</li><li>实现高可用最关键的策略是消除单点故障。Hadoop-HA严格来说应该分成各个组件的HA机制：HDFS的HA和YARN的HA</li><li>Hadoop2.0之前，在HDFS集群中NameNode存在单点故障（SPOF）</li><li>NameNode主要在以下两个方面影响HDFS集群：<ul><li>NameNode机器发生意外，如宕机，集群将无法使用，直到重启</li><li>NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用</li></ul></li></ul><p>HDFS HA功能通过配置Active/Standby两个NameNodes实现在集群中对NameNode的热备来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器</p><h2 id="HDFS-HA"><a href="#HDFS-HA" class="headerlink" title="HDFS-HA"></a>HDFS-HA</h2><p>通过双NameNode消除单点故障（Active/Standby）</p><h3 id="HDFS-HA工作要点"><a href="#HDFS-HA工作要点" class="headerlink" title="HDFS-HA工作要点"></a>HDFS-HA工作要点</h3><ul><li>元数据管理方式需要改变<ul><li>内存中各自保存一份元数据</li><li>Edits日志只有Active状态的NameNode节点可以做写操作</li><li>两个NameNode都可以读取Edits</li><li>共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）</li></ul></li><li>需要一个状态管理功能模块<ul><li>实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在namenode节点，利用zk进行状态标识，当需要进行状态切换，由zkfailover负责，切换时需要防止脑裂（brain split）现象发生（集群中出现两个Active的Namenode）</li></ul></li><li>同一时刻仅仅有一个NameNode对外提供服务</li></ul><h3 id="HDFS-HA工作机制"><a href="#HDFS-HA工作机制" class="headerlink" title="HDFS-HA工作机制"></a>HDFS-HA工作机制</h3><p>配置部署HDFS-HA进行自动故障转移。自动故障转移为HDFS部署增加了两个新组件：ZooKeepe和 ZKFailoverController（ZKFC）进程，ZooKeeper是维护少量协调数据，通知客户端这些数据的改变和监视客户端故障的高可用服务。HA的自动故障转移依赖于ZooKeeper的以下功能：</p><ul><li>故障检测<ul><li>集群中的每个NameNode在ZooKeeper中维护了一个临时会话，如果机器崩溃，ZooKeeper中的 会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移</li></ul></li><li>现役NameNode选择<ul><li>ZooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的排外锁以表明它应该成为现役NameNode</li></ul></li></ul><p>ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：</p><ul><li>健康检查    ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。</li><li>ZooKeeper会话管理    当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个特殊的znode锁，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除</li><li>基于ZooKeeper的选择   如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为 Active。故障转移进程与前面描述的手动故障转移相似，首先如果必要保护之前的现役NameNode，然后本地NameNode转换为Active状态</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525162651.png" alt=""></p><h3 id="HDFS-HA集群配置"><a href="#HDFS-HA集群配置" class="headerlink" title="HDFS-HA集群配置"></a>HDFS-HA集群配置</h3><p><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html">Apache Hadoop 3.2.2 – HDFS High Availability Using the Quorum Journal Manager</a></p><h4 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h4><div class="table-container"><table><thead><tr><th>hadoop-node1</th><th>hadoop-node2</th><th>hadoop-node3</th></tr></thead><tbody><tr><td>NameNode</td><td>NameNode</td><td></td></tr><tr><td>JournalNode</td><td>JournalNode</td><td>JournalNode</td></tr><tr><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td>ZK</td><td>ZK</td><td>ZK</td></tr><tr><td></td><td>ResourceManager</td><td></td></tr><tr><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table></div><h4 id="启动zookeeper集群："><a href="#启动zookeeper集群：" class="headerlink" title="启动zookeeper集群："></a>启动zookeeper集群：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zk.sh start</span><br></pre></td></tr></table></figure><h4 id="配置HDFS-HA集群"><a href="#配置HDFS-HA集群" class="headerlink" title="配置HDFS-HA集群"></a>配置HDFS-HA集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止原先的hdfs集群</span></span><br><span class="line">stop-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有节点，创建ha文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /opt/servers/ha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将/opt/servers/目录下的 hadoop-2.9.2拷贝到ha目录下</span></span><br><span class="line"><span class="built_in">cp</span> -r hadoop-2.9.2 ha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原集群data目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf /opt/servers/ha/hadoop-2.9.2/data</span><br></pre></td></tr></table></figure><p>配置hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hacluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.hacluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.hacluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.hacluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node2:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.hacluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.hacluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop-node1:8485;hadoop-node2:8485;hadoop-node3:8485/ha<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.hacluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/journalnode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hacluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/servers/ha/hadoop-2.9.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:2181,hadoop-node2:2181,hadoop-node3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拷贝配置好的hadoop环境到其他节点</p><h4 id="启动HDFS-HA集群"><a href="#启动HDFS-HA集群" class="headerlink" title="启动HDFS-HA集群"></a>启动HDFS-HA集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在各个JournalNode节点上，输入以下命令启动journalnode服务(去往HA安装目录，不要使用环境变量中命令</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/sbin/hadoop-daemon.sh start journalnode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn1]上，对其进行格式化，并启动</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/bin/hdfs namenode -format</span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/sbin/hadoop-daemon.sh start namenode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn2]上，同步nn1的元数据信息</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/bin/hdfs namenode -bootstrapStandby</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn1]上初始化zkfc</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/bin/hdfs zkfc -formatZK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[nn1]上，启动集群</span></span><br><span class="line">/opt/servers/ha/hadoop-2.9.2/sbin/start-dfs.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="YARN-HA配置"><a href="#YARN-HA配置" class="headerlink" title="YARN-HA配置"></a>YARN-HA配置</h3><p>官方文档：<a href="https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/ResourceManagerHA.html">Apache Hadoop 3.2.2 – ResourceManager High Availability</a></p><p>YARN-HA工作机制，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210525164053.png" alt=""></p><h4 id="配置YARN-HA集群"><a href="#配置YARN-HA集群" class="headerlink" title="配置YARN-HA集群"></a>配置YARN-HA集群</h4><div class="table-container"><table><thead><tr><th>hadoop-node1</th><th>hadoop-node2</th><th>hadoop-node3</th></tr></thead><tbody><tr><td>NameNode</td><td>NameNode</td><td></td></tr><tr><td>JournalNode</td><td>JournalNode</td><td>JournalNode</td></tr><tr><td>DataNode</td><td>DataNode</td><td>DataNode</td></tr><tr><td>ZK</td><td>ZK</td><td>ZK</td></tr><tr><td></td><td>ResourceManager</td><td>ResourceManager</td></tr><tr><td>NodeManager</td><td>NodeManager</td><td>NodeManager</td></tr></tbody></table></div><p>yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--启用resourcemanager ha--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--声明两台resourcemanager的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>cluster-yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--指定zookeeper集群的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:2181,hadoop-node2:2181,hadoop-node3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--启用自动恢复--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.recovery.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--指定resourcemanager的状态信息存储在zookeeper集群--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.store.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同步更新其他节点的配置信息，启动hdfs</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zookeeper简介&quot;&gt;&lt;a href=&quot;#zookeeper简介&quot; class=&quot;headerlink&quot; title=&quot;zookeeper简介&quot;&gt;&lt;/a&gt;zookeeper简介&lt;/h1&gt;&lt;h2 id=&quot;zookeeper是什么&quot;&gt;&lt;a href=&quot;#zooke</summary>
      
    
    
    
    <category term="zookeeper" scheme="https://setcreed.github.io/categories/zookeeper/"/>
    
    
    <category term="zookeeper" scheme="https://setcreed.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>02-HBase基础</title>
    <link href="https://setcreed.github.io/posts/4c42ac43/"/>
    <id>https://setcreed.github.io/posts/4c42ac43/</id>
    <published>2022-03-04T14:19:31.000Z</published>
    <updated>2023-11-14T23:51:51.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HBase基础"><a href="#HBase基础" class="headerlink" title="HBase基础"></a>HBase基础</h1><h2 id="HBase简介"><a href="#HBase简介" class="headerlink" title="HBase简介"></a>HBase简介</h2><h3 id="HBase的概念"><a href="#HBase的概念" class="headerlink" title="HBase的概念"></a>HBase的概念</h3><p>HBase是⼀个分布式海量列式⾮关系型数据库系统，可以提供超⼤规模数据集的实时随机读写。    </p><p>什么是列式存储？举个例子：</p><p>MySQL是行式存储，需要存储如下数据：</p><div class="table-container"><table><thead><tr><th>id</th><th>name</th><th>age</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>21</td><td></td></tr><tr><td>2</td><td>小红</td><td></td><td>12k</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><p>这样存储信息，空值字段会浪费存储空间</p><p>但如果是列式存储：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rowkey: 1 name: 小明</span><br><span class="line">rowkey: 1 age: 21</span><br><span class="line">rowkey: 2 name: 小红</span><br><span class="line">rowkey: 2 salary: 12k</span><br></pre></td></tr></table></figure><h3 id="HBase的优点"><a href="#HBase的优点" class="headerlink" title="HBase的优点"></a>HBase的优点</h3><ul><li>海量存储： 底层基于HDFS存储海量数据</li><li>列式存储：HBase表的数据是基于列族进⾏存储的，⼀个列族包含若⼲列</li><li>极易扩展：底层依赖HDFS，当磁盘空间不⾜的时候，只需要动态增加DataNode服务节点就可以</li><li>⾼并发：⽀持⾼并发的读写请求</li><li>稀疏：稀疏主要是针对HBase列的灵活性，在列族中，你可以指定任意多的列，在列数据为空的情况下，是不会占⽤存储空间的</li><li>数据的多版本：HBase表中的数据可以有多个版本值，默认情况下是根据版本号去区分，版本号就是插⼊数据的时间戳</li><li>数据类型单⼀：所有的数据在HBase中是以字节数组进⾏存储</li></ul><h2 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h2><p>一些概念：</p><ul><li><strong>NameSpace</strong>，命名空间，类似于关系型数据库的database概念，每个命名空间下有多个表。HBase两个⾃带的命名空间，分别是hbase和default，hbase中存放的是HBase内置的表，default表是⽤户默认使⽤的命名空间。⼀个表可以⾃由选择是否有命名空间，如果创建表的时候加上了命名空间后，这个表名字以<code>:</code>作为区分</li><li><strong>Table</strong>，类似于关系型数据库的表概念。不同的是，HBase定义表时只需要声明列族即可，数据属性，⽐如超时时间（TTL），压缩算法（COMPRESSION）等，都在列族的定义中定义，不需要声明具体的列。</li><li><strong>Row（一行逻辑数据）</strong>，HBase表中的每⾏数据都由⼀个RowKey和多个Column（列）组成。⼀个⾏包含了多个列，这些列通过列族来分类，⾏中的数据所属列族只能从该表所定义的列族中选取，不能定义这个表中不存在的列族，否则报错NoSuchColumnFamilyException。</li><li><strong>RowKey（每行数据主键）</strong>，Rowkey由⽤户指定的⼀串不重复的字符串定义，是⼀⾏的唯⼀标识。数据是按照RowKey的字典顺序存储的，并且查询数据时只能根据RowKey进⾏检索，所以RowKey的设计⼗分重要。如果使⽤了之前已经定义的RowKey，那么会将之前的数据更新掉。</li><li><strong>Column Family（列族）</strong>，列族是多个列的集合。⼀个列族可以动态地灵活定义多个列。表的相关属性⼤部分都定义在列族上，同⼀个表⾥的不同列族可以有完全不同的属性配置，但是同⼀个列族内的所有列都会有相同的属性。列族存在的意义是HBase会把相同列族的列尽量放在同⼀台机器上，所以说，如果想让某⼏个列被放到⼀起，你就给他们定义相同的列族。</li><li><strong>Column Qualifier（列）</strong>，Hbase中的列是可以随意定义的，⼀个⾏中的列不限名字、不限数量，只限定列族。因此列必须依赖于列族存在！列的名称前必须带着其所属的列族！例如info：name，info：age</li><li><strong>TimeStamp（时间戳=&gt;版本）</strong>，⽤于标识数据的不同版本（version）。时间戳默认由系统指定，也可以由⽤户显式指定。在读取单元格的数据时，版本号可以省略，如果不指定，Hbase默认会获取最后⼀个版本的数据返回！</li><li><strong>Cell</strong>，⼀个列中可以存储多个版本的数据。⽽每个版本就称为⼀个单元格（Cell）。</li><li><strong>Region（表的分区）</strong>，Region由⼀个表的若⼲⾏组成！在Region中⾏的排序按照⾏键（rowkey）字典排序。Region不能跨RegionSever，且当数据量⼤的时候， HBase会拆分Region。</li></ul><p>HBase的逻辑架构：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210526122306.png" alt=""></p><p>HBase物理存储：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210526132153.png" alt=""></p><h2 id="HBase整体架构"><a href="#HBase整体架构" class="headerlink" title="HBase整体架构"></a>HBase整体架构</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210526133433.png" alt=""></p><p>各组件的作用：</p><ul><li>zookeeper<ul><li>实现了HMaster的⾼可⽤</li><li>保存了HBase的元数据信息，是所有HBase表的寻址⼊⼝</li><li>对HMaster和HRegionServer实现了监控</li></ul></li><li>HMaster（Master）<ul><li>为HRegionServer分配Region</li><li>维护整个集群的负载均衡</li><li>维护集群的元数据信息</li><li>发现失效的Region，并将失效的Region分配到正常的HRegionServer上</li></ul></li><li>HRegionServer（RegionServer）<ul><li>负责管理Region</li><li>接受客户端的读写数据请求</li><li>切分在运⾏过程中变⼤的Region</li></ul></li><li>Region<ul><li>每个HRegion由多个Store构成</li><li>每个Store保存⼀个列族（Columns Family），表有⼏个列族，则有⼏个Store</li><li>每个Store由⼀个MemStore和多个StoreFile组成，MemStore是Store在内存中的内容，写到⽂件后就是StoreFile。StoreFile底层是以HFile的格式保存</li></ul></li></ul><h2 id="HBase的安装部署"><a href="#HBase的安装部署" class="headerlink" title="HBase的安装部署"></a>HBase的安装部署</h2><p>下载安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">tar -zxvf hbase-1.3.1-bin.tar.gz -C /opt/servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置hbase的环境变量</span></span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/opt/servers/hbase-1.3.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HBASE_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要把hadoop中的配置core-site.xml 、hdfs-site.xml拷⻉到hbase安装⽬录下的conf⽂件夹中</span></span><br><span class="line"><span class="built_in">ln</span> -s /opt/servers/hadoop-2.9.2/etc/hadoop/core-site.xml /opt/servers/hbase-1.3.1/conf/core-site.xml</span><br><span class="line"><span class="built_in">ln</span> -s /opt/servers/hadoop-2.9.2/etc/hadoop/hdfs-site.xml /opt/servers/hbase-1.3.1/conf/hdfs-site.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 hbase-env.sh</span></span><br><span class="line"><span class="comment">#添加java环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/servers/jdk1.8.0_231</span><br><span class="line"><span class="comment">#指定使⽤外部的zk集群</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=FALSE</span><br></pre></td></tr></table></figure><p>修改 hbase-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定hbase在HDFS上存储的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定hbase是分布式的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定zk的地址，多个⽤“,”分割 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:2181,node2:2181,node3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改regionservers⽂件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim regionservers</span><br><span class="line"></span><br><span class="line">node1</span><br><span class="line">node2</span><br><span class="line">node3</span><br><span class="line"></span><br><span class="line"><span class="comment"># hbase的conf⽬录下创建⽂件backup-masters (Standby Master)</span></span><br><span class="line">vim backup-masters</span><br><span class="line"></span><br><span class="line">hadoop-node2</span><br></pre></td></tr></table></figure><p>将hbase目录分发到其他节点</p><p>HBase集群的启动和停⽌：</p><ul><li>前提条件：先启动hadoop和zk集群</li><li>启动HBase：start-hbase.sh</li><li>停⽌HBase：stop-hbase.sh</li><li>启动好HBase集群之后，可以访问地址：HMaster的主机名:16010，查看HBase集群的web管理界面</li></ul><h2 id="HBase-shell的基本操作"><a href="#HBase-shell的基本操作" class="headerlink" title="HBase shell的基本操作"></a>HBase shell的基本操作</h2><p>进⼊Hbase客户端命令操作界⾯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure><p>查看帮助命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):001:0&gt; <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>查看当前数据库中有哪些表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):002:0&gt; list</span><br></pre></td></tr></table></figure><p>创建⼀张student表， 包含base_info、extra_info两个列族</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):004:0&gt; create <span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;base_info&#x27;</span>,<span class="string">&#x27;extra_info&#x27;</span></span><br><span class="line">或者</span><br><span class="line">create <span class="string">&#x27;student&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;base_info&#x27;</span>, VERSIONS =&gt; <span class="string">&#x27;3&#x27;</span>&#125;,&#123;NAME =&gt; <span class="string">&#x27;extra_info&#x27;</span>,VERSIONS =&gt; <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># VERSIONS 是指此单元格内的数据可以保留最近的 3 个版本</span></span><br></pre></td></tr></table></figure><h3 id="添加数据操作"><a href="#添加数据操作" class="headerlink" title="添加数据操作"></a>添加数据操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向student表插入信息，row key为 rk1，列族base_info中添加name列标示符，值为wang</span></span><br><span class="line">hbase(main):006:0&gt; put <span class="string">&quot;student&quot;</span>, <span class="string">&quot;rk1&quot;</span>, <span class="string">&quot;base_info:name&quot;</span>, <span class="string">&quot;wang&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向student表中插⼊信息，row key为rk1，列族base_info中添加age列标示符，值为30</span></span><br><span class="line">hbase(main):008:0&gt; put <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info:age&#x27;</span>, 30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向student表中插⼊信息，row key为rk1，列族extra_info中添加address列标示符，值为shanghai</span></span><br><span class="line">hbase(main):010:0&gt; put <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;extra_info:address&#x27;</span>, <span class="string">&#x27;shanghai&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>通过rowkey进⾏查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1的所有信息</span></span><br><span class="line">hbase(main):012:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span></span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> base_info:age         timestamp=1622014015143, value=30                               </span><br><span class="line"> base_info:name        timestamp=1622013932351, value=wang                             </span><br><span class="line"> extra_info:address    timestamp=1622014075602, value=shanghai                         </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0270 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看rowkey下⾯的某个列族的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取student表中row key为rk1，base_info列族的所有信息</span></span><br><span class="line">hbase(main):013:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info&#x27;</span></span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> base_info:age         timestamp=1622014015143, value=30                               </span><br><span class="line"> base_info:name        timestamp=1622013932351, value=wang                             </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0080 seconds</span><br></pre></td></tr></table></figure><p>查看rowkey指定列族指定字段的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1，base_info列族的name、age列标示符的信息</span></span><br><span class="line">hbase(main):014:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info:name&#x27;</span>, <span class="string">&#x27;base_info:age&#x27;</span></span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> base_info:age         timestamp=1622014015143, value=30                               </span><br><span class="line"> base_info:name        timestamp=1622013932351, value=wang                             </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0040 seconds</span><br></pre></td></tr></table></figure><p>查看rowkey指定多个列族的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1，base_info、extra_info列族的信息</span></span><br><span class="line">hbase(main):010:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info&#x27;</span>, <span class="string">&#x27;extra_info&#x27;</span></span><br><span class="line">或者</span><br><span class="line">hbase(main):011:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, &#123;COLUMN =&gt; [<span class="string">&#x27;base_info&#x27;</span>, <span class="string">&#x27;extra_info&#x27;</span>]&#125;</span><br><span class="line">或者</span><br><span class="line">hbase(main):012:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, &#123;COLUMN =&gt; [<span class="string">&#x27;base_info:name&#x27;</span>, <span class="string">&#x27;extra_info:address&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><p>指定rowkey与列值查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1，cell的值为wang的信息</span></span><br><span class="line">hbase(main):029:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, &#123;FILTER =&gt; <span class="string">&quot;ValueFilter(=, &#x27;binary:wang&#x27;)&quot;</span>&#125;</span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> base_info:name        timestamp=1622013932351, value=wang                             </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0030 second</span><br></pre></td></tr></table></figure><p>指定rowkey与列值模糊查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取表中row key为rk1，列标示符中含有d的信息</span></span><br><span class="line">hbase(main):033:0&gt; get <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, &#123;FILTER =&gt; <span class="string">&quot;(QualifierFilter(=,&#x27;substring:d&#x27;))&quot;</span>&#125;</span><br><span class="line">COLUMN                 CELL                                                            </span><br><span class="line"> extra_info:address    timestamp=1622014075602, value=shanghai                         </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0030 second</span><br></pre></td></tr></table></figure><p>查询所有数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):034:0&gt; scan <span class="string">&#x27;student&#x27;</span></span><br><span class="line">ROW                    COLUMN+CELL                                                     </span><br><span class="line"> rk1                   column=base_info:age, timestamp=1622014015143, value=30         </span><br><span class="line"> rk1                   column=base_info:name, timestamp=1622013932351, value=wang      </span><br><span class="line"> rk1                   column=extra_info:address, timestamp=1622014075602, value=shangh</span><br><span class="line">                       ai                                                              </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0190 seconds</span><br></pre></td></tr></table></figure><p>列族查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询表中列族为 base_info 的信息</span></span><br><span class="line">hbase(main):001:0&gt; scan <span class="string">&#x27;student&#x27;</span>, &#123;COLUMNS =&gt; <span class="string">&#x27;base_info&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">hbase(main):002:0&gt; scan <span class="string">&#x27;student&#x27;</span>, &#123;COLUMNS =&gt; <span class="string">&#x27;base_info&#x27;</span>, RAW =&gt; <span class="literal">true</span>, VERSIONS =&gt; 3&#125;</span><br><span class="line"><span class="comment">## Scan时可以设置是否开启Raw模式,开启Raw模式会返回包括已添加删除标记但是未实际删除的数据</span></span><br><span class="line"><span class="comment">## VERSIONS指定查询的最⼤版本数</span></span><br></pre></td></tr></table></figure><p>指定多个列族与按照数据值模糊查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询表中列族为 base_info 和 extra_info且列标示符中含有a字符的信息</span></span><br><span class="line">hbase(main):039:0&gt; scan <span class="string">&#x27;student&#x27;</span>, &#123;COLUMNS =&gt; [<span class="string">&#x27;base_info&#x27;</span>, <span class="string">&#x27;extra_info&#x27;</span>], FILTER =&gt; <span class="string">&quot;(QualifierFilter(=,&#x27;substring:a&#x27;))&quot;</span>&#125;</span><br><span class="line">ROW                                              COLUMN+CELL                                                                                                                                   </span><br><span class="line"> rk1                                             column=base_info:age, timestamp=1622014015143, value=30                                                                                       </span><br><span class="line"> rk1                                             column=base_info:name, timestamp=1622013932351, value=wang                                                                                    </span><br><span class="line"> rk1                                             column=extra_info:address, timestamp=1622014075602, value=shanghai                                                                            </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0070 seconds</span><br></pre></td></tr></table></figure><p> rowkey的范围值查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询表中列族为base_info，rk范围是[rk1, rk3)的数据（rowkey底层存储是字典序）</span></span><br><span class="line">hbase(main):043:0&gt; scan <span class="string">&#x27;student&#x27;</span>, &#123;COLUMNS =&gt; <span class="string">&#x27;base_info&#x27;</span>, STARTROW =&gt; <span class="string">&#x27;rk1&#x27;</span>, ENDROW =&gt; <span class="string">&#x27;rk3&#x27;</span>&#125;</span><br><span class="line">ROW                                              COLUMN+CELL                                                                                                                                   </span><br><span class="line"> rk1                                             column=base_info:age, timestamp=1622014015143, value=30                                                                                       </span><br><span class="line"> rk1                                             column=base_info:name, timestamp=1622013932351, value=wang                                                                                    </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0040 seconds</span><br></pre></td></tr></table></figure><p>指定rowkey模糊查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询student表中row key以rk字符开头的</span></span><br><span class="line">hbase(main):045:0&gt; scan <span class="string">&#x27;student&#x27;</span>,&#123;FILTER=&gt;<span class="string">&quot;PrefixFilter(&#x27;rk&#x27;)&quot;</span>&#125;</span><br><span class="line">ROW                    COLUMN+CELL                                                     </span><br><span class="line"> rk1                   column=base_info:age, timestamp=1622014015143, value=30         </span><br><span class="line"> rk1                   column=base_info:name, timestamp=1622013932351, value=wang      </span><br><span class="line"> rk1                   column=extra_info:address, timestamp=1622014075602, value=shangh</span><br><span class="line">                       ai                                                              </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0070 seconds</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>更新操作同插⼊操作⼀模⼀样，只不过有数据就更新，没数据就添加</p><p>把student表中rowkey为rk1的base_info列族下的列name修改为zhangsan</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):046:0&gt; put <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info:name&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除数据和表"><a href="#删除数据和表" class="headerlink" title="删除数据和表"></a>删除数据和表</h3><p>指定rowkey以及列名进⾏删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除student表row key为rk1，列标示符为 base_info:name 的数据</span></span><br><span class="line">hbase(main):048:0&gt; delete <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;rk1&#x27;</span>, <span class="string">&#x27;base_info:name&#x27;</span></span><br></pre></td></tr></table></figure><p>删除 base_info 列族</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):050:0&gt; alter <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;delete&#x27;</span> =&gt; <span class="string">&#x27;base_info&#x27;</span></span><br><span class="line">Updating all regions with the new schema...</span><br><span class="line">1/1 regions updated.</span><br><span class="line">Done.</span><br><span class="line">0 row(s) <span class="keyword">in</span> 2.1990 seconds</span><br></pre></td></tr></table></figure><p>清空表数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase(main):052:0&gt; <span class="built_in">truncate</span> <span class="string">&#x27;student&#x27;</span></span><br><span class="line">Truncating <span class="string">&#x27;student&#x27;</span> table (it may take a <span class="keyword">while</span>):</span><br><span class="line"> - Disabling table...</span><br><span class="line"> - Truncating table...</span><br><span class="line">0 row(s) <span class="keyword">in</span> 3.3660 seconds</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先disable 再drop</span></span><br><span class="line">hbase(main):054:0&gt; <span class="built_in">disable</span> <span class="string">&#x27;student&#x27;</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 2.2270 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):055:0&gt; drop <span class="string">&#x27;student&#x27;</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 1.2350 seconds</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不进⾏disable，直接drop会报错</span></span><br></pre></td></tr></table></figure><h1 id="HBase内部原理"><a href="#HBase内部原理" class="headerlink" title="HBase内部原理"></a>HBase内部原理</h1><h2 id="HBase读数据流程"><a href="#HBase读数据流程" class="headerlink" title="HBase读数据流程"></a>HBase读数据流程</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210527083954.png" alt=""></p><ul><li>client⾸先访问zookeeper找到meta表的region位置，然后读取meta表中的数据，meta表中存储了⽤户表的region信息</li><li>根据要查询的namespace、表名和rowkey信息。找到写⼊数据对应的region信息</li><li>找到这个region对应的regionServer，然后发送请求</li><li>查找对应的region</li><li>先从MemStore查找数据，如果没有，再从BlockCache上读取</li><li>如果BlockCache中也没有找到，再到StoreFile上进⾏读取</li><li>从storeFile中读取到数据之后，不是直接把结果数据返回给客户端， ⽽是把数据先写⼊到BlockCache中，⽬的是为了加快后续的查询；然后在返回结果给客户端</li></ul><p>HBase上Regionserver的内存分为两个部分：</p><ul><li>⼀部分作为Memstore，主要⽤来写</li><li>另外⼀部分作为BlockCache，主要⽤于读数据</li></ul><h2 id="HBase写数据流程"><a href="#HBase写数据流程" class="headerlink" title="HBase写数据流程"></a>HBase写数据流程</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210527090244.png" alt=""></p><ul><li>client⾸先访问zookeeper找到meta表的region位置，然后读取meta表中的数据，meta表中存储了⽤户表的region信息</li><li>根据要查询的namespace、表名和rowkey信息。找到写⼊数据对应的region信息</li><li>找到这个region对应的regionServer，然后发送请求</li><li>把数据分别写到HLog（write ahead log）和memstore各⼀份</li><li>memstore达到阈值后把数据刷到磁盘，⽣成storeFile⽂件</li><li>删除HLog中的历史数据</li></ul><h2 id="HBase的flush机制"><a href="#HBase的flush机制" class="headerlink" title="HBase的flush机制"></a>HBase的flush机制</h2><h3 id="flush机制"><a href="#flush机制" class="headerlink" title="flush机制"></a>flush机制</h3><ul><li>当memstore的⼤⼩超过这个值的时候，会flush到磁盘，默认为128M</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hregion.memstore.flush.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当memstore中的数据时间超过1⼩时，会flush到磁</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.optionalcacheflushinterval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3600000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HregionServer的全局memstore的⼤⼩，超过该⼤⼩会触发flush到磁盘的操作，默认是堆⼤⼩的 <code>40% * 0.95</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.global.memstore.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.global.memstore.size.lower.limit<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.95<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>⼿动flush</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush tableName</span><br></pre></td></tr></table></figure><h3 id="阻塞机制"><a href="#阻塞机制" class="headerlink" title="阻塞机制"></a>阻塞机制</h3><p>上面说的是Store中memstore数据刷写磁盘的标准，但是Hbase会进行周期性检查，看是否满⾜以上标准，满⾜就会进⾏刷写。</p><p>但是如果在下次检查到来之前，数据疯狂写⼊Memstore中，会触发阻塞机制，此时⽆法写⼊数据到Memstore，数据⽆法写⼊Hbase集群。</p><ul><li>当memstore达到128M时，没有检查会继续往里写，刷写磁盘不会阻塞，但是数据量远远大于128M时，hbase为了保证集群的安全，会停止写入数据。这个停止写入数据的数据量大小默认是512M</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memstore数据达到一定值的计算公式：hbase.hregion.memstore.flush.size * hbase.hregion.memstore..block.multiplier</span><br><span class="line">hbase.hregion.memstore.flush.size刷写的阀值，默认是134217728，即128MB</span><br><span class="line">hbase.hregion.memstore.block.multiplier是⼀个倍数，默认是4</span><br></pre></td></tr></table></figure><ul><li>regionserver全部的memstore达到规定值，这个规定值是可以配置的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hbase.regionserver.global.memstore.size.lower.limit是0.95，</span><br><span class="line">hbase.regionserver.global.memstore.size是0.4，</span><br><span class="line">堆内存总共是 16G，</span><br><span class="line">触发刷写的阈值是：16*0.95*0.4=6.08GB </span><br><span class="line">触发阻塞的阈值是：16*0.4=6.4GB</span><br></pre></td></tr></table></figure><p>hbase阻塞了是无法写入数据的，就无法使用了。缓解阻塞机制：可以尽可能的调大内存</p><h2 id="Compact合并机制"><a href="#Compact合并机制" class="headerlink" title="Compact合并机制"></a>Compact合并机制</h2><p>在hbase中主要存在两种类型的compact合并</p><h3 id="minor-compact-小合并"><a href="#minor-compact-小合并" class="headerlink" title="minor compact 小合并"></a>minor compact 小合并</h3><ul><li>在将Store中多个HFile(StoreFile)合并为⼀个HFile。这个过程中，删除和更新的数据仅仅只是做了标记，并没有物理移除，这种合并的触发频率很⾼。</li><li>minor compact⽂件选择标准 由以下⼏个参数共同决定：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--待合并⽂件数据必须⼤于等于下⾯这个值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hstore.compaction.min<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--待合并⽂件数据必须⼩于等于下⾯这个值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hstore.compaction.max<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--默认值为128m,</span></span><br><span class="line"><span class="comment">表示⽂件⼤⼩⼩于该值的store file ⼀定会加⼊到minor compaction的store file中</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hstore.compaction.min.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--默认值为LONG.MAX_VALUE，</span></span><br><span class="line"><span class="comment">表示⽂件⼤⼩⼤于该值的store file ⼀定会被minor compaction排除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hstore.compaction.max.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>9223372036854775807<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据上面的配置来看，一次minor compact最少3个文件最多10个文件</p><p>触发minor compact的条件：</p><ul><li><strong>memstore flush</strong>，在进⾏memstore flush前后都会进⾏判断是否触发compact</li><li><strong>定期检查线程</strong>，周期性检查是否需要进⾏compaction操作，由参数：hbase.server.thread.wakefrequency决定，默认值是10000 millseconds</li></ul><h3 id="major-compact-大合并"><a href="#major-compact-大合并" class="headerlink" title="major compact 大合并"></a>major compact 大合并</h3><p>合并Store中所有的HFile为⼀个HFile</p><p>这个过程有删除标记的数据会被真正移除，同时超过单元格maxVersion的版本记录也会被删除。合并频率⽐较低，默认7天执⾏⼀次，并且性能消耗⾮常大，建议⽣产关闭(设置为0)，在应⽤空闲时间⼿动触发。⼀般可以是⼿动控制进⾏合并，防⽌出现在业务⾼峰期</p><p>major compact触发时间条件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认值为7天进⾏⼀次⼤合并，--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.hregion.majorcompaction<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⼿动触发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使⽤major_compact命令</span></span><br><span class="line">major_compact tableName</span><br></pre></td></tr></table></figure><h2 id="Region-拆分机制"><a href="#Region-拆分机制" class="headerlink" title="Region 拆分机制"></a>Region 拆分机制</h2><p>Region中存储的是⼤量的rowkey数据，当Region中的数据条数过多的时候，直接影响查询效率。</p><p>当Region过⼤的时候，HBase会拆分Region，这也是Hbase的⼀个优点。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210527102402.png" alt=""></p><h3 id="拆分策略"><a href="#拆分策略" class="headerlink" title="拆分策略"></a>拆分策略</h3><p>HBase的Region Split策略⼀共有以下⼏种：</p><ul><li><strong>ConstantSizeRegionSplitPolicy</strong></li></ul><p>这是0.94版本前默认切分策略。</p><p>当region大小大于某个阈值(hbase.hregion.max.filesize=10G)之后就会触发切分，⼀个region等分为2个region。</p><p>但是在⽣产线上这种切分策略却有相当的弊端：切分策略对于大表和小表没有明显的区分。阈值(hbase.hregion.max.filesize)设置较大对大表比较友好，但是小表就有可能不会触发分裂，极端情况下可能就1个，这对业务来说并不是什么好事。如果设置较小则对小表友好，但⼀个大表就会在整个集群产生大量 的region，这对于集群的管理、资源使⽤、failover来说都不是⼀件好事。</p><ul><li><strong>IncreasingToUpperBoundRegionSplitPolicy</strong></li></ul><p>是0.94版本~2.0版本默认切分策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">切分策略稍微有点复杂，总体看和ConstantSizeRegionSplitPolicy思路相同，⼀个region⼤⼩⼤于设置阈值就会触发切分。但是这个阈值并不像ConstantSizeRegionSplitPolicy是⼀个固定的值，⽽是会在⼀定条件下不断调整，调整规则和region所属表在当前regionserver上的region个数有关系。</span><br><span class="line"></span><br><span class="line">region split的计算公式是：</span><br><span class="line">regioncount^3 * 128M * 2，当region达到该size的时候进⾏split</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">第⼀次split：1^3 * 256 = 256MB</span><br><span class="line">第⼆次split：2^3 * 256 = 2048MB</span><br><span class="line">第三次split：3^3 * 256 = 6912MB</span><br><span class="line">第四次split：4^3 * 256 = 16384MB &gt; 10GB，因此取较⼩的值10GB</span><br><span class="line">后⾯每次split的size都是10GB了</span><br></pre></td></tr></table></figure><ul><li><strong>SteppingSplitPolicy</strong></li></ul><p>2.0版本默认切分策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这种切分策略的切分阈值⼜发⽣了变化，相比 IncreasingToUpperBoundRegionSplitPolicy 简单了⼀些，依然和待分裂region所属表在当前regionserver上的region个数有关系，如果region个数等于1，切分阈值为flush size * 2，否则为MaxRegionFileSize。</span><br><span class="line"></span><br><span class="line">这种切分策略对于⼤集群中的⼤表、⼩表会⽐ncreasingToUpperBoundRegionSplitPolicy 更加友好，⼩表不会再产⽣⼤量的⼩region，⽽是适可⽽⽌</span><br></pre></td></tr></table></figure><ul><li><strong>KeyPrefixRegionSplitPolicy</strong></li></ul><p>根据rowKey的前缀对数据进行分组，这⾥是指定rowKey的前多少位作为前缀，⽐如rowKey都是16位的，指定前5位是前缀，那么前5位相同的rowKey在进行region split的时候会分到相同的region中。</p><ul><li><strong>DelimitedKeyPrefixRegionSplitPolicy</strong></li></ul><p>保证相同前缀的数据在同⼀个region中，例如rowKey的格式为：userid<em>eventtype_eventid，指定的delimiter为 </em> ，则split的的时候会确保userid 相同的数据在同⼀个region中。</p><ul><li>DisabledRegionSplitPolicy</li></ul><p>不启用自动拆分，需要指定⼿动拆分。不建议！</p><h3 id="RegionSplitPolicy的应用"><a href="#RegionSplitPolicy的应用" class="headerlink" title="RegionSplitPolicy的应用"></a>RegionSplitPolicy的应用</h3><p>Region拆分策略可以全局统⼀配置，也可以为单独的表指定拆分策略。</p><ul><li>通过hbase-site.xml全局统⼀配置(对hbase所有表⽣效)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.region.split.policy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hbase.regionserver.IncreasingToUpperBoundRegionSplitPolicy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过Java API为单独的表指定Region拆分策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HTableDescriptor</span> <span class="variable">tableDesc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTableDescriptor</span>(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">tableDesc.setValue(HTableDescriptor.SPLIT_POLICY, IncreasingToUpperBoundRegionSplitPolicy.class.getName());</span><br><span class="line">tableDesc.addFamily(<span class="keyword">new</span> <span class="title class_">HColumnDescriptor</span>(Bytes.toBytes(<span class="string">&quot;cf1&quot;</span>)));</span><br><span class="line">admin.createTable(tableDesc);</span><br></pre></td></tr></table></figure><ul><li>通过HBase Shell为单个表指定Region拆分策略</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hbase&gt; create &#x27;test2&#x27;, &#123;METADATA =&gt; &#123;&#x27;SPLIT_POLICY&#x27; =&gt; &#x27;org.apache.hadoop.hbase.regionserver.IncreasingToUpperBoundRegionSplitPolicy&#x27;&#125;&#125;,&#123;NAME =&gt; &#x27;cf1&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="HBase表的预分区（region）"><a href="#HBase表的预分区（region）" class="headerlink" title="HBase表的预分区（region）"></a>HBase表的预分区（region）</h2><p>当⼀个table刚被创建的时候，Hbase默认的分配⼀个region给table。也就是说这个时候，所有的读写请求都会访问到同⼀个regionServer的同⼀个region中，这个时候就达不到负载均衡的效果了，集群中的其他regionServer就可能会处于⽐较空闲的状态。解决这个问题可以⽤pre-splitting，在创建table的时候就配置好，⽣成多个region。</p><p>这样的好处：</p><ul><li>增加数据读写效率</li><li>负载均衡，防⽌数据倾斜</li><li>⽅便集群容灾调度region</li><li>每⼀个region维护着startRow与endRowKey，如果加入的数据符合某个region维护的rowKey范围，则该数据交给这个region维护</li></ul><p>⼿动指定预分区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create &#x27;person&#x27;,&#x27;info1&#x27;,&#x27;info2&#x27;,SPLITS =&gt; [&#x27;1000&#x27;,&#x27;2000&#x27;,&#x27;3000&#x27;]</span><br></pre></td></tr></table></figure><p>也可以把分区规则创建于⽂件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim split.txt</span><br><span class="line"><span class="comment"># 文件内容：</span></span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">ddd</span><br></pre></td></tr></table></figure><p>执行：<code>create &#39;student&#39;,&#39;info&#39;,SPLITS_FILE =&gt; &#39;/root/hbase/split.txt&#39;</code></p><h2 id="HBase表Region合并"><a href="#HBase表Region合并" class="headerlink" title="HBase表Region合并"></a>HBase表Region合并</h2><p>Region的合并不是为了性能，⽽是出于维护的目的</p><h3 id="通过Merge类冷合并Region"><a href="#通过Merge类冷合并Region" class="headerlink" title="通过Merge类冷合并Region"></a>通过Merge类冷合并Region</h3><ul><li>需要先关闭hbase集群</li><li>需求：需要把student表中的2个region数据进⾏合并：student, ,1593244870695.10c2df60e567e73523a633f20866b4b5和student,1000,1593244870695.0a4c3ff30a98f79ff6c1e4cc927b3d0d</li></ul><p>这里通过org.apache.hadoop.hbase.util.Merge类来实现，不需要进⼊hbase shell，直接执⾏（需要先关闭hbase集群）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hbase org.apache.hadoop.hbase.util.Merge student \</span><br><span class="line">student,,1595256696737.fc3eff4765709e66a8524d3c3ab42d59. \</span><br><span class="line">student,aaa,1595256696737.1d53d6c1ce0c1bed269b16b6514131d0.</span><br></pre></td></tr></table></figure><h3 id="通过online-merge热合并Region"><a href="#通过online-merge热合并Region" class="headerlink" title="通过online_merge热合并Region"></a>通过online_merge热合并Region</h3><p>不需要关闭hbase集群，在线进行合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">与冷合并不同的是，online_merge的传参是Region的hash值，⽽Region的hash值就是Region名称的最后那段在两个.之间的字符串部分。</span><br><span class="line"></span><br><span class="line">需求：需要把student表2个region数据进⾏合并：</span><br><span class="line">student,,1587392159085.9ca8689901008946793b8d5fa5898e06. \</span><br><span class="line">student,aaa,1587392159085.601d5741608cedb677634f8f7257e000.</span><br><span class="line"></span><br><span class="line">需要进⼊hbase shell：</span><br><span class="line">merge_region &#x27;c8bc666507d9e45523aebaffa88ffdd6&#x27;,&#x27;02a9dfdf6ff42ae9f0524a3d8f4c7777&#x27;</span><br></pre></td></tr></table></figure><h2 id="HBase-API应用和优化"><a href="#HBase-API应用和优化" class="headerlink" title="HBase API应用和优化"></a>HBase API应用和优化</h2><h3 id="Hbase-客户端API操作"><a href="#Hbase-客户端API操作" class="headerlink" title="Hbase 客户端API操作"></a>Hbase 客户端API操作</h3><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.14.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.javaboy.hbase.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HbaseClientDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取一个配置文件对象</span></span><br><span class="line">        conf = HBaseConfiguration.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过conf获取到hbase集群的连接</span></span><br><span class="line">        conf.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;192.168.33.111,192.168.33.112&quot;</span>);</span><br><span class="line">        conf.set(<span class="string">&quot;hbase.zookeeper.property.clientPort&quot;</span>, <span class="string">&quot;2181&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过conf获取到hbase集群的连接</span></span><br><span class="line">        conn = ConnectionFactory.createConnection(conf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一张hbase表</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTable</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取hbaseadmin对象来创建表</span></span><br><span class="line">        <span class="type">HBaseAdmin</span> <span class="variable">admin</span> <span class="operator">=</span> (HBaseAdmin) conn.getAdmin();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建表描述器</span></span><br><span class="line">        <span class="type">HTableDescriptor</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTableDescriptor</span>(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定列族</span></span><br><span class="line">        student.addFamily(<span class="keyword">new</span> <span class="title class_">HColumnDescriptor</span>(<span class="string">&quot;info&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行创建的操作</span></span><br><span class="line">        admin.createTable(student);</span><br><span class="line">        System.out.println(<span class="string">&quot;student表创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入一条数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 需要获取一个table对象</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备put对象</span></span><br><span class="line">        <span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(Bytes.toBytes(<span class="string">&quot;110&quot;</span>));<span class="comment">// 指定rowkey</span></span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">&quot;info&quot;</span>), Bytes.toBytes(<span class="string">&quot;addr&quot;</span>), Bytes.toBytes(<span class="string">&quot;beijing&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入数据，参数类型是put</span></span><br><span class="line">        student.put(put);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭table对象</span></span><br><span class="line">        student.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;插入数据到student表成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备delete对象</span></span><br><span class="line">        <span class="type">Delete</span> <span class="variable">delete</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Delete</span>(Bytes.toBytes(<span class="string">&quot;110&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行删除</span></span><br><span class="line">        student.delete(delete);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除数据成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 准备table对象</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备get对象</span></span><br><span class="line">        <span class="type">Get</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Get</span>(Bytes.toBytes(<span class="string">&quot;110&quot;</span>));</span><br><span class="line">        <span class="comment">// 指定查询的列族</span></span><br><span class="line">        get.addFamily(Bytes.toBytes(<span class="string">&quot;info&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> student.get(get);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取到result中所有cell对象</span></span><br><span class="line">        Cell[] cells = result.rawCells();</span><br><span class="line">        <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rowKey</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneRow(cell));</span><br><span class="line">            <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneFamily(cell));</span><br><span class="line">            <span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneQualifier(cell));</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneValue(cell));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;rowKey = &quot;</span> + rowKey + <span class="string">&quot;, f = &quot;</span> + f + <span class="string">&quot;, column = &quot;</span> + column + <span class="string">&quot;, value = &quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        student.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全表扫描</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 准备table对象</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备scan对象</span></span><br><span class="line">        <span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行扫描</span></span><br><span class="line">        <span class="type">ResultScanner</span> <span class="variable">resultScanner</span> <span class="operator">=</span> student.getScanner(scan);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Result result : resultScanner) &#123;</span><br><span class="line">            Cell[] cells = result.rawCells();</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">rowKey</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneRow(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneFamily(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneQualifier(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneValue(cell));</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;rowKey = &quot;</span> + rowKey + <span class="string">&quot;, f = &quot;</span> + f + <span class="string">&quot;, column = &quot;</span> + column + <span class="string">&quot;, value = &quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        student.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定scan开始rowkey和结束rowkey</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanStartEndData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 准备table对象</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">student</span> <span class="operator">=</span> conn.getTable(TableName.valueOf(<span class="string">&quot;student&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备scan对象</span></span><br><span class="line">        <span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定查询的rowkey区间</span></span><br><span class="line">        scan.setStartRow(Bytes.toBytes(<span class="string">&quot;001&quot;</span>));</span><br><span class="line">        scan.setStopRow(Bytes.toBytes(<span class="string">&quot;2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行扫描</span></span><br><span class="line">        <span class="type">ResultScanner</span> <span class="variable">resultScanner</span> <span class="operator">=</span> student.getScanner(scan);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Result result : resultScanner) &#123;</span><br><span class="line">            Cell[] cells = result.rawCells();</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">rowKey</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneRow(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">f</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneFamily(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneQualifier(cell));</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> Bytes.toString(CellUtil.cloneValue(cell));</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;rowKey = &quot;</span> + rowKey + <span class="string">&quot;, f = &quot;</span> + f + <span class="string">&quot;, column = &quot;</span> + column + <span class="string">&quot;, value = &quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        student.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放连接</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="协处理器"><a href="#协处理器" class="headerlink" title="协处理器"></a>协处理器</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HBase基础&quot;&gt;&lt;a href=&quot;#HBase基础&quot; class=&quot;headerlink&quot; title=&quot;HBase基础&quot;&gt;&lt;/a&gt;HBase基础&lt;/h1&gt;&lt;h2 id=&quot;HBase简介&quot;&gt;&lt;a href=&quot;#HBase简介&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="HBase" scheme="https://setcreed.github.io/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>01-hadoop安装配置</title>
    <link href="https://setcreed.github.io/posts/1816c0d/"/>
    <id>https://setcreed.github.io/posts/1816c0d/</id>
    <published>2022-03-04T14:13:52.000Z</published>
    <updated>2023-11-14T23:51:51.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hadoop安装配置"><a href="#hadoop安装配置" class="headerlink" title="hadoop安装配置"></a>hadoop安装配置</h1><p>Linux安装使用vagrant</p><p>vagrantfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">(1..3).each do |i|</span><br><span class="line">config.vm.define &quot;hadoop-node#&#123;i&#125;&quot; do |node|</span><br><span class="line">node.vm.box=&quot;centos7&quot;</span><br><span class="line"></span><br><span class="line">node.vm.hostname=&quot;hadoop-node#&#123;i&#125;&quot;</span><br><span class="line"></span><br><span class="line">node.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.#&#123;110+i&#125;&quot;, netmask: &quot;255.255.255.0&quot;</span><br><span class="line"></span><br><span class="line">node.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class="line">v.name = &quot;hadoop-node#&#123;i&#125;&quot;</span><br><span class="line">v.memory = 4096</span><br><span class="line">v.cpus = 4</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h2><div class="table-container"><table><thead><tr><th>框架</th><th>hadoop-node1</th><th>hadoop-node2</th><th>hadoop-node3</th></tr></thead><tbody><tr><td>HDFS</td><td>NameNode、DataNode</td><td>DataNode</td><td>SecondaryNameNode、DataNode</td></tr><tr><td>YARN</td><td>NodeManager</td><td>NodeManager</td><td>NodeManager、ResourceManager</td></tr></tbody></table></div><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p>Hadoop集群配置 = HDFS集群配置 + MapReduce集群配置 + Yarn集群配置</p><p>HDFS集群配置</p><ul><li>将JDK路径明确配置给HDFS（修改hadoop-env.sh</li><li>指定NameNode节点以及数据存储目录（修改core-site.xml）</li><li>指定SecondaryNameNode节点（修改hdfs-site.xml）</li><li>指定DataNode从节点（修改etc/hadoop/slaves文件，每个节点配置信息占一行）</li></ul><p>MapReduce集群配置</p><ul><li>将JDK路径明确配置给MapReduce（修改mapred-env.sh）</li><li>指定MapReduce计算框架运行Yarn资源调度框架（修改mapred-site.xml）</li></ul><p>Yarn集群配置</p><ul><li>将JDK路径明确配置给Yarn（修改yarn-env.sh）</li><li>指定ResourceManager老大节点所在计算机节点（修改yarn-site.xml）</li><li>指定NodeManager节点（会通过slaves文件内容确定）</li></ul><h3 id="HDFS集群配置"><a href="#HDFS集群配置" class="headerlink" title="HDFS集群配置"></a>HDFS集群配置</h3><ul><li>配置：hadoop-env.sh，将JDK路径明确配置给HDFS</li><li>指定NameNode节点以及数据存储目录（修改core-site.xml）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop-node1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/servers/hadoop-2.9.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>指定secondarynamenode节点(修改hdfs-site.xml)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node3:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--副本数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>指定datanode从节点(修改slaves文件，每个节点配置信息占一行)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop-node1</span><br><span class="line">hadoop-node2</span><br><span class="line">hadoop-node3</span><br></pre></td></tr></table></figure><h3 id="MapReduce集群配置"><a href="#MapReduce集群配置" class="headerlink" title="MapReduce集群配置"></a>MapReduce集群配置</h3><ul><li>指定MapReduce使用的jdk路径（修改mapred-env.sh）</li><li>指定MapReduce计算框架运行Yarn资源调度框架(修改mapred-site.xml)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Yarn集群配置"><a href="#Yarn集群配置" class="headerlink" title="Yarn集群配置"></a>Yarn集群配置</h3><ul><li>指定JDK路径</li><li>指定ResourceMnager的master节点信息(修改yarn-site.xml)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>指定NodeManager节点（slaves文件已修改）</li></ul><h3 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h3><ul><li>配置mapred-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>启动历史服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure><h3 id="配置日志的聚集"><a href="#配置日志的聚集" class="headerlink" title="配置日志的聚集"></a>配置日志的聚集</h3><p>日志聚集：应用(Job)运行完成以后，将应用运行日志信息从各个task汇总上传到HDFS系统上。</p><p>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。</p><p>注意：开启日志聚集功能，需要重新启动NodeManager 、ResourceManager和 HistoryManager。</p><ul><li>配置yarn-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志聚集功能使能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间设置7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="hive配置"><a href="#hive配置" class="headerlink" title="hive配置"></a>hive配置</h1><p>先安装mysql</p><p>创建hive用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户设置口令、授权、刷新</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;12345678&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;hive&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>hive配置：</p><p>vim hive-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- hive元数据的存储位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop-node3:3306/hivemetadata?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指定驱动程序 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 连接数据库的用户名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 连接数据库的口令 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 数据默认的存储位置(HDFS) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>location of default database for the warehouse<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在命令行中，显示当前操作的数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether to include the current database in the Hive prompt.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在命令行中，显示数据的表头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 操作小规模数据时，使用本地模式，提高效率 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Let Hive determine whether to run in local mode automatically<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将MySQL jdbc驱动拷贝到hive的lib下</p><p>初始化元数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p>安装hue</p><p>编译安装</p><p>到官方网站下载 hue-release-4.3.0.zip；上传至服务器，并解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install unzip</span><br><span class="line">unzip hue-release-4.3.0.zip</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要Python支持(Python 2.7+ / Python 3.5+)</span></span><br><span class="line">python --version</span><br><span class="line"><span class="comment"># 在 CentOS 系统中安装编译 Hue 需要的依赖库</span></span><br><span class="line">yum install ant asciidoc cyrus-sasl-devel cyrus-sasl-gssapi cyrus-sasl-plain gcc gcc-c++ krb5-devel libffi-devel libxml2-devel libxslt-devel make mysql mysql-devel openldap-devel python-devel sqlite-devel gmp-devel</span><br><span class="line"></span><br><span class="line">yum install -y rsync</span><br></pre></td></tr></table></figure><p>备注： </p><p>以上依赖仅适用CentOS/RHEL 7.X，其他情况请参考<a href="https://docs.gethue.com/administrator/installation/dependencies/">https://docs.gethue.com/administrator/installation/dependencies/</a> 安装Hue的节点上最好没有安装过MySQL，否则可能有版本冲突 安装过程中需要联网，网络不好会有各种奇怪的问题</p><p>编译 Hue 还需要 Maven 环境，因此在编译前需要安装 Maven。 下载 apache-maven-3.6.3-bin.tar.gz，上传虚拟机解压缩，添加环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/opt/lagou/servers/apache-maven-3.6.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">mvn --version</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 hue 源码目录，进行编译。 使用 PREFIX 指定安装 Hue 的路径</span></span><br><span class="line"><span class="built_in">cd</span> /opt/software/hue-release-4.3.0</span><br><span class="line">PREFIX=/opt/lagou/servers make install</span><br><span class="line"><span class="built_in">cd</span> /opt/lagou/servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想把HUE从移动到另外一个地方，由于HUE使用了Python包的一些绝对路径,移动之后则必须执行以下命令：</span></span><br><span class="line"><span class="comment"># 这里不要执行</span></span><br><span class="line"><span class="built_in">rm</span> app.reg</span><br><span class="line"><span class="built_in">rm</span> -r build</span><br><span class="line">make apps</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改hadoop配置</p><p>在hdfs-site.xml增加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HUE --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在core-site.xml增加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HUE --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hue.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hue.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hdfs.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hdfs.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编辑httpfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HUE --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>httpfs.proxyuser.hue.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>httpfs.proxyuser.hue.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hue配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 Hue 安装目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/servers/hue</span><br><span class="line"><span class="comment"># 进入配置目录</span></span><br><span class="line"><span class="built_in">cd</span> desktop/conf</span><br><span class="line"><span class="comment"># 复制一份HUE的配置文件，并修改复制的配置文件</span></span><br><span class="line"><span class="built_in">cp</span> pseudo-distributed.ini.tmpl pseudo-distributed.ini</span><br><span class="line">vim pseudo-distributed.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># [desktop]</span></span><br><span class="line">http_host=hadoop-node2</span><br><span class="line">http_port=8000</span><br><span class="line">is_hue_4=<span class="literal">true</span></span><br><span class="line">time_zone=Asia/Shanghai</span><br><span class="line">dev=<span class="literal">true</span></span><br><span class="line">server_user=hue</span><br><span class="line">server_group=hue</span><br><span class="line">default_user=hue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 211行左右。禁用solr，规避报错</span></span><br><span class="line">app_blacklist=search</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[database]]。Hue默认使用SQLite数据库记录相关元数据，替换为mysql</span></span><br><span class="line">engine=mysql</span><br><span class="line">host=hadoop-node3</span><br><span class="line">port=3306</span><br><span class="line">user=hive</span><br><span class="line">password=123456</span><br><span class="line">name=hue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1003行左右，Hadoop配置文件的路径</span></span><br><span class="line">hadoop_conf_dir=/opt/servers/hadoop-2.9.2/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在mysql中创建数据库hue，用来存放元数据</span></span><br><span class="line">mysql -uhive -p12345678</span><br><span class="line">mysql&gt; create database hue;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">build/env/bin/hue syncdb</span><br><span class="line">build/env/bin/hue migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查数据</span></span><br></pre></td></tr></table></figure><p>启动hue服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加 hue 用户和用户组</span></span><br><span class="line">groupadd hue</span><br><span class="line">useradd -g hue hue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在hue安装路径下执行</span></span><br><span class="line">build/env/bin/supervisor</span><br></pre></td></tr></table></figure><p>web地址：hadoop-node2:8000</p><p>Hue整合Hadoop、Hive</p><p>修改参数文件 /opt/servers/hue/desktop/conf/pseudo-distributed.ini</p><p>集成HDFS、YARN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 211 行。 没有安装 Solr，禁用，否则一直报错</span></span><br><span class="line">app_blacklist=search</span><br><span class="line"></span><br><span class="line"><span class="comment"># [hadoop] -- [[hdfs_clusters]] -- [[[default]]]</span></span><br><span class="line"><span class="comment"># 注意端口号。下面语句只要一个</span></span><br><span class="line"><span class="comment"># fs_defaultfs=hdfs://hadoop-node1:8020</span></span><br><span class="line">fs_defaultfs=hdfs://hadoop-node1:9000</span><br><span class="line"></span><br><span class="line">webhdfs_url=http://hadoop-node1:50070/webhdfs/v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 211 行</span></span><br><span class="line">hadoop_conf_dir=/opt/servers/hadoop-2.9.2/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># [hadoop] -- [[yarn_clusters]] -- [[[default]]]</span></span><br><span class="line">resourcemanager_host=hadoop-node3</span><br><span class="line">resourcemanager_port=8032</span><br><span class="line">submit_to=True</span><br><span class="line">resourcemanager_api_url=http://hadoop-node3:8088</span><br><span class="line">proxy_api_url=http://hadoop-node3:8088</span><br><span class="line">history_server_api_url=http://hadoop-node3:19888</span><br></pre></td></tr></table></figure><p>集成Hive</p><p>集成Hive需要启动 Hiveserver2 服务，在linux123节点上启动 Hiveserver2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [beeswax]</span></span><br><span class="line">hive_server_host=hadoop-node3</span><br><span class="line">hive_server_port=10000</span><br><span class="line">hive_conf_dir=/opt/lagou/hive-2.3.7/conf</span><br></pre></td></tr></table></figure><p>集成MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [librdbms] -- [[databases]] -- [[[mysql]]]；1639行</span></span><br><span class="line"><span class="comment"># 注意：1639行原文： ##[[mysql]] =&gt; [[mysql]]；两个##要去掉!</span></span><br><span class="line">[[[mysql]]]</span><br><span class="line">nice_name=<span class="string">&quot;My SQL DB&quot;</span></span><br><span class="line">name=hue</span><br><span class="line">engine=mysql</span><br><span class="line">host=hadoop-node3</span><br><span class="line">port=3306</span><br><span class="line">user=hive</span><br><span class="line">password=123456</span><br></pre></td></tr></table></figure><p>备注：name是数据库名，即 database 的名称</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hadoop安装配置&quot;&gt;&lt;a href=&quot;#hadoop安装配置&quot; class=&quot;headerlink&quot; title=&quot;hadoop安装配置&quot;&gt;&lt;/a&gt;hadoop安装配置&lt;/h1&gt;&lt;p&gt;Linux安装使用vagrant&lt;/p&gt;
&lt;p&gt;vagrantfile&lt;/p</summary>
      
    
    
    
    <category term="hadoop" scheme="https://setcreed.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop" scheme="https://setcreed.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>大数据学习</title>
    <link href="https://setcreed.github.io/posts/2dad917b/"/>
    <id>https://setcreed.github.io/posts/2dad917b/</id>
    <published>2022-03-04T14:07:23.000Z</published>
    <updated>2023-11-14T23:51:51.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数据学习目录"><a href="#大数据学习目录" class="headerlink" title="大数据学习目录"></a>大数据学习目录</h1><p><a href="https://setcreed.github.io/posts/1816c0d">01 hadoop安装配置</a></p><p><a href="https://setcreed.github.io/posts/4c42ac43">02 HBase基础</a></p><p><a href="https://setcreed.github.io/posts/3fb1bcaf">03 zookeeper基础</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大数据学习目录&quot;&gt;&lt;a href=&quot;#大数据学习目录&quot; class=&quot;headerlink&quot; title=&quot;大数据学习目录&quot;&gt;&lt;/a&gt;大数据学习目录&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://setcreed.github.io/posts/1816c0d&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>03-springboot基础</title>
    <link href="https://setcreed.github.io/posts/5694ead3/"/>
    <id>https://setcreed.github.io/posts/5694ead3/</id>
    <published>2022-03-04T14:05:47.000Z</published>
    <updated>2023-11-14T23:51:51.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速搭建SSM工程"><a href="#快速搭建SSM工程" class="headerlink" title="快速搭建SSM工程"></a>快速搭建SSM工程</h1><h2 id="XML文件配置SSM"><a href="#XML文件配置SSM" class="headerlink" title="XML文件配置SSM"></a>XML文件配置SSM</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>创建一个普通的maven工程，并添加SpringMVC依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加Spring配置"><a href="#添加Spring配置" class="headerlink" title="添加Spring配置"></a>添加Spring配置</h3><p>工程创建成功之后，首先添加 Spring 的配置文件，如下：</p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加SpringMVC配置"><a href="#添加SpringMVC配置" class="headerlink" title="添加SpringMVC配置"></a>添加SpringMVC配置</h3><p>创建 springmvc 的配置文件spring-servlet.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>添加一个 HelloController进行测试</p><p>HelloController.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> helloService.hello();</span><br><span class="line">        System.out.println(<span class="string">&quot;hello = &quot;</span> + hello);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello ssm&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloService.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello service&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java配置SSM"><a href="#Java配置SSM" class="headerlink" title="Java配置SSM"></a>Java配置SSM</h2><p>在Spring Boot项目中，正常来说不存在XML配置，这是因为Spring Boot不推荐使用XML，但并非不支持，Spring Boot推荐开发者使用Java配置来搭建框架。在Spring Boot中，大量的自动化配置都是Java配置来实现的。这一套实现方案，我们可以自己做，使用纯Java来搭建一个SSM环境。</p><p>环境要求：</p><ul><li>使用纯 Java 来搭建 SSM 环境，要求 Tomcat 的版本必须在 7 以上</li></ul><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加Spring配置-1"><a href="#添加Spring配置-1" class="headerlink" title="添加Spring配置"></a>添加Spring配置</h3><p>添加 Spring 的配置文件，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.cwz&quot;, useDefaultFilters = true, excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这个配置：</p><ul><li>@Configuration 注解表示这是一个配置类，在我们这里，这个配置的作用类似于 applicationContext.xml</li><li>@ComponentScan 注解表示配置包扫描，里边的属性和 xml 配置中的属性都是一一对应的，useDefaultFilters 表示使用默认的过滤器，然后又除去 Controller 注解，即在 Spring 容器中扫描除了 Controller 之外的其他所有 Bean 。</li></ul><h3 id="添加SpringMVC配置-1"><a href="#添加SpringMVC配置-1" class="headerlink" title="添加SpringMVC配置"></a>添加SpringMVC配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.cwz&quot;, useDefaultFilters = false, includeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class), @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Configuration.class)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，如果不需要在 SpringMVC 中添加其他的额外配置，这样就可以了。即 视图解析器、JSON 解析、文件上传……等等，如果都不需要配置的话，这样就可以了。</strong></p><h3 id="配置web-xml-1"><a href="#配置web-xml-1" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><p>此时，我们并没有 web.xml 文件，这时，我们可以使用 Java 代码去代替 web.xml 文件，这里会用到 WebApplicationInitializer ，具体定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.WebApplicationInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.DispatcherServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">implements</span> <span class="title class_">WebApplicationInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(javax.servlet.ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// 首先来加载 SpringMVC 的配置文件</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">// 添加 DispatcherServlet</span></span><br><span class="line">        ctx.register(SpringMVCConfig.class);</span><br><span class="line">        ServletRegistration.<span class="type">Dynamic</span> <span class="variable">springmvc</span> <span class="operator">=</span> servletContext.addServlet(<span class="string">&quot;springmvc&quot;</span>, <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>(ctx));</span><br><span class="line">        <span class="comment">// 给 DispatcherServlet 添加路径映射</span></span><br><span class="line">        springmvc.addMapping(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 给 DispatcherServlet 添加启动时机</span></span><br><span class="line">        springmvc.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WebInit 的作用类似于 web.xml，这个类需要实现 WebApplicationInitializer 接口，并实现接口中的方法，当项目启动时，onStartup 方法会被自动执行，我们可以在这个方法中做一些项目初始化操作，例如加载 SpringMVC 容器，添加过滤器，添加 Listener、添加 Servlet 等。</p><p>需要注意的是：</p><p><strong>由于我们在 WebInit 中只是添加了 SpringMVC 的配置，这样项目在启动时只会去加载 SpringMVC 容器，而不会去加载 Spring 容器，如果一定要加载 Spring 容器，需要我们修改 SpringMVC 的配置，在 SpringMVC 配置的包扫描中也去扫描 @Configuration 注解，进而加载 Spring 容器</strong> 或者 <strong>直接在项目中舍弃 Spring 配置，直接将所有配置放到 SpringMVC 的配置中来完成</strong></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>添加一个controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><h4 id="静态资源过滤"><a href="#静态资源过滤" class="headerlink" title="静态资源过滤"></a>静态资源过滤</h4><p>静态资源过滤在 SpringMVC 的 XML 中的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在 Java 配置的 SSM 环境中，如果要配置静态资源过滤，需要让 SpringMVC 的配置继承 WebMvcConfigurationSupport ，进而重写 WebMvcConfigurationSupport 中的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.cwz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写 addResourceHandlers 方法，在这个方法中配置静态资源过滤，这里我将静态资源放在 resources 目录下，所以资源位置是 <code>classpath:/</code> ，当然，资源也可以放在 webapp 目录下，此时只需要修改配置中的资源位置即可。如果采用 Java 来配置 SSM 环境，一般来说，可以不必使用 webapp 目录，除非要使用 JSP 做页面模板，否则可以忽略 webapp 目录。</p><h4 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h4><p>在 XML 文件中，通过如下方式配置视图解析器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果通过 Java 类配置也是可以的。</p><p>首先为我们的项目添加 webapp 目录，webapp 目录中添加一个 jsp 目录，jsp 目录中添加 jsp 文件，然后引入JSP 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在配置类中，继续重写方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.cwz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        registry.jsp(<span class="string">&quot;/jsp/&quot;</span>, <span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在 Controller 中添加控制器即可访问 JSP 页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController2</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路径映射"><a href="#路径映射" class="headerlink" title="路径映射"></a>路径映射</h4><p>有的时候，我们的控制器的作用仅仅只是一个跳转，里边没有任何业务逻辑，像这种情况，可以不用定义方法，可以直接通过路径映射来实现页面访问。如果在 <code>XML</code> 中配置路径映射，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">status-code</span>=<span class="string">&quot;200&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这行配置，表示如果用户访问 <code>/hello</code> 这个路径，则直接将名为 <code>hello</code> 的视图返回给用户，并且响应码为 <code>200</code>，这个配置就可以替代 <code>Controller</code> 中的方法。</p><p>如果在Java类配置中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.cwz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/hello3&quot;</span>).setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，用户访问 <code>/hello3</code> 接口，就能看到名为 <code>hello</code> 的视图文件。</p><h4 id="JSON配置"><a href="#JSON配置" class="headerlink" title="JSON配置"></a>JSON配置</h4><p>SpringMVC 可以接收JSON 参数，也可以返回 JSON 参数，这一切依赖于 HttpMessageConverter。</p><p>HttpMessageConverter 可以将一个 JSON 字符串转为 对象，也可以将一个对象转为 JSON 字符串，实际上它的底层还是依赖于具体的 JSON 库。</p><p>所有的 JSON 库要在 SpringMVC 中自动返回或者接收 JSON，都必须提供和自己相关的 HttpMessageConverter 。</p><p>SpringMVC 中，默认提供了 Jackson 和 gson 的 HttpMessageConverter ，分别是：MappingJackson2HttpMessageConverter 和 GsonHttpMessageConverter 。</p><p>正因为如此，我们在 SpringMVC 中，如果要使用 JSON ，对于 jackson 和 gson 我们只需要添加依赖，加完依赖就可以直接使用了。具体的配置是在 AllEncompassingFormHttpMessageConverter 类中完成的。</p><p>如果开发者使用了 fastjson，那么默认情况下，SpringMVC 并没有提供 fastjson 的 HttpMessageConverter ，这个需要我们自己提供，如果是在 XML 配置中，fastjson 除了加依赖，还要显式配置 HttpMessageConverter，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Java 配置的 SSM 中，我们一样也可以添加这样的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.cwz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="type">FastJsonHttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonHttpMessageConverter</span>();</span><br><span class="line">        converter.setDefaultCharset(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="type">FastJsonConfig</span> <span class="variable">fastJsonConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonConfig</span>();</span><br><span class="line">        fastJsonConfig.setCharset(Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        converter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">        converters.add(converter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，就可以在接口中直接返回 JSON 了，此时的 JSON 数据将通过 fastjson 生成。</p><h1 id="初始SpringBoot"><a href="#初始SpringBoot" class="headerlink" title="初始SpringBoot"></a>初始SpringBoot</h1><p>我们刚开始学习 JavaWeb 的时候，使用 Servlet/JSP 做开发，一个接口搞一个 Servlet ，很头大，后来我们通过隐藏域或者反射等方式，可以减少 Servlet 的创建，但是依然不方便，再后来，我们引入 Struts2/SpringMVC 这一类的框架，来简化我们的开发 ，和 Servlet/JSP 相比，引入框架之后，生产力确实提高了不少，但是用久了，又发现了新的问题，即配置繁琐易出错，要做一个新项目，先搭建环境，环境搭建来搭建去，就是那几行配置，不同的项目，可能就是包不同，其他大部分的配置都是一样的，Java 总是被人诟病配置繁琐代码量巨大，这就是其中一个表现。那么怎么办？Spring Boot 应运而生，Spring Boot 主要提供了如下功能：</p><ul><li>为所有基于 Spring 的 Java 开发提供方便快捷的入门体验。</li><li>开箱即用，有自己自定义的配置就是用自己的，没有就使用官方提供的默认的。</li><li>提供了一系列通用的非功能性的功能，例如嵌入式服务器、安全管理、健康检测等</li><li>没有代码生成，也不需要XML配置</li></ul><h2 id="创建一个-Spring-Boot-项目"><a href="#创建一个-Spring-Boot-项目" class="headerlink" title="创建一个 Spring Boot 项目"></a>创建一个 Spring Boot 项目</h2><p>直接使用IntelliJ IDEA创建或者直接创建一个Maven工程。</p><p>在pom.xml中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加成功后，再在 java 目录下创建包，包中创建一个名为 App 的启动类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@EnableAutoConfiguration 注解表示开启自动化配置。</p><p>然后执行这里的 main 方法就可以启动一个 Spring Boot 工程了。</p><h2 id="Configuration注解"><a href="#Configuration注解" class="headerlink" title="@Configuration注解"></a>@Configuration注解</h2><p>@SpringBootApplication是一个组合注解，里面涉及到了@SpringBootConfiguration注解，@SpringBootConfiguration里面又是@Configuration。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210617231533.png" alt=""></p><p>@Configuration表示MyConfig类是一个配置类，在配置了中提供bean就可以了。</p><p>spring容器启动的时候会默认加载一些后置的处理器，有一个处理器是ConfigurationClassPostProcessor，这个类就是专门处理带有@Configuration注解的类。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210617232551.png" alt=""></p><p>有两个for循环，第一个for循环会找到所有带有@Configuration注解的类，把它们保存到configBeanDefs变量中。</p><p>第二个for循环实际上是对这个类做了一个增强，相当于替换了原来的class，使用了代理类。</p><p>在代理方法调用的时候涉及到BeanMethodInterceptor类的intercept方法，对于已经创建的对象就不再重复创建了。</p><h3 id="springboot项目启动类"><a href="#springboot项目启动类" class="headerlink" title="springboot项目启动类"></a>springboot项目启动类</h3><p>@SpringBootApplication注解主要包括了@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan三个注解。</p><p>@EnableAutoConfiguration是开启自动化配置，@ComponentScan是包扫描</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210619102803.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速搭建SSM工程&quot;&gt;&lt;a href=&quot;#快速搭建SSM工程&quot; class=&quot;headerlink&quot; title=&quot;快速搭建SSM工程&quot;&gt;&lt;/a&gt;快速搭建SSM工程&lt;/h1&gt;&lt;h2 id=&quot;XML文件配置SSM&quot;&gt;&lt;a href=&quot;#XML文件配置SSM&quot; cla</summary>
      
    
    
    
    
    <category term="springboot" scheme="https://setcreed.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>02-ssm基础</title>
    <link href="https://setcreed.github.io/posts/35d09233/"/>
    <id>https://setcreed.github.io/posts/35d09233/</id>
    <published>2022-03-04T14:04:07.000Z</published>
    <updated>2023-11-14T23:51:51.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring入门"><a href="#spring入门" class="headerlink" title="spring入门"></a>spring入门</h1><h2 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h2><p>spring是分层的Java SE/EE应用 轻量级开源框架。提供了表现层 SpringMVC和持久层 Spring JDBC Template以及 业务层 事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。</p><p>spring有两大核心：</p><ul><li>IOC   Inverse Of Control：控制反转</li><li>AOP  Aspect Oriented Programming：面向切面编程</li></ul><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="IOC概念"><a href="#IOC概念" class="headerlink" title="IOC概念"></a>IOC概念</h3><p>IOC 控制反转，是一种思想，实际上是指对一个对象的控制权的反转。</p><blockquote><p>控制：在java中指对象的控制权限(创建、销毁)</p><p>反转：指对象控制权由原来 程序员在类中手动控制 反转到 由spring容器控制</p></blockquote><p>比如这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;聊斋志异&quot;</span>);</span><br><span class="line">        book.setPrice(<span class="number">20.56</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，Book的对象控制权在User对象里面，你要使用User对象的方法就必须要创建一个Book对象，这样User和Book就高度耦合。你在其他地方使用Book对象，必须自己手动创建、初始化、销毁等。</p><p>有了spring，我们就可以把对象的创建等操作交给spring容器来管理。在项目启动时，所有的Bean对象都注册到了spring容器中，如果使用到了哪个Bean就去spring容器中要，而不需要自己手动创建，这样就可以专注于业务，可以从对象的创建中解脱出来。</p><h3 id="自己实现IOC"><a href="#自己实现IOC" class="headerlink" title="自己实现IOC"></a>自己实现IOC</h3><p>需求：实现service层与dao层代码解耦合</p><p>实现：</p><ul><li>创建Java项目，导入依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写Dao接口和实现类</li></ul><p>Dao接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cwz.dao.IUserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;dao被调用了...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写service接口和实现类</li></ul><p>service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cwz.dao.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.cwz.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.cwz.utils.BeanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">IUserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (IUserDao) BeanFactory.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userDao.save();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写beans.xml</li></ul><p>把所有需要创建对象的信息定义在配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cwz.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写BeanFactory工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; iocmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序启动时，初始化对象实例</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 1.读取配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2.解析xml</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(resourceAsStream);</span><br><span class="line"><span class="comment">// 3.编写xpath表达式</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">xpath</span> <span class="operator">=</span> <span class="string">&quot;//bean&quot;</span>;</span><br><span class="line"><span class="comment">// 4.获取所有的bean标签</span></span><br><span class="line">            List&lt;Element&gt; list = document.selectNodes(xpath);</span><br><span class="line"><span class="comment">// 5.遍历并创建对象实例，设置到map集合中</span></span><br><span class="line">            <span class="keyword">for</span> (Element element : list) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> element.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> element.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Class.forName(className).newInstance();</span><br><span class="line"></span><br><span class="line">                iocmap.put(id, o);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException | ClassNotFoundException | InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定id的对象实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String beanId)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> iocmap.get(beanId);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写测试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cwz.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就手动实现了类似与IOC容器的功能，实际上BeanFactory就是一个简单的Spring的IOC容器所具备的功能。</p><h3 id="IOC体验"><a href="#IOC体验" class="headerlink" title="IOC体验"></a>IOC体验</h3><p>首先创建一个普通的Maven项目，引入spring-context依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;5.3.6&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>然后在resources目录下创建一个spring配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个文件中，我们可以配置所有需要注册到spring容器的bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>class 属性表示需要注册的bean的 全路径，id表示bean的唯一标识，也可以用name属性作为bean的标志。</p><p>接下来，写一个main方法去加载这个配置文件，从容器中获取对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.javaboy.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.javaboy.ioc.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(string[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取User对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中获取bean对象是通过id和class组合来获取一个bean的，一般这样不会出错。嫌麻烦可以直接使用id或者name来获取，但一般不建议直接使用class来获取（如果xml文件中存在两个相同的bean就不好办了）</p><h3 id="属性的注入"><a href="#属性的注入" class="headerlink" title="属性的注入"></a>属性的注入</h3><h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h4><p>通过 Bean 的构造方法给 Bean 的属性注入值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略tostring、get、set方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String address, Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 xml 文件中注入 Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.ioc.model.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;javaboy&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;javaboy.org&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如果有多个构造方法，则会根据给出参数个数以及参数类型，自动匹配到对应的构造方法上，进而初始化一个对象。</strong></p><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.ioc.model.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;javaboy2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;www.javaboy.org&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>set 方法注入，有一个很重要的问题，就是属性名。很多人会有一种错觉，觉得属性名就是你定义的属性名，这个是不对的。在所有的框架中，凡是涉及到反射注入值的，属性名统统都不是 Bean 中定义的属性名，而是通过 Java 中的内省机制分析出来的属性名，简单说，就是根据 get/set 方法分析出来的属性名。</p><h4 id="p-名称空间注入"><a href="#p-名称空间注入" class="headerlink" title="p 名称空间注入"></a>p 名称空间注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.ioc.model.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">p:username</span>=<span class="string">&quot;javaboy&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:address</span>=<span class="string">&quot;itboy.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>p 名称空间注入，使用的比较少，它本质上也是调用了 set 方法。</p><h4 id="外部-Bean-的注入"><a href="#外部-Bean-的注入" class="headerlink" title="外部 Bean 的注入"></a>外部 Bean 的注入</h4><p>有时候，我们使用一些外部 Bean，这些 Bean 可能没有构造方法，而是通过 Builder 来构造的，这个时候，就无法使用上面的方式来给它注入值了。</p><p>例如在 OkHttp 的网络请求中，原生的写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.javaboy.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkHttpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder().build();</span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;okHttpClient&quot;</span>, OkHttpClient.class);</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                .get()</span><br><span class="line">                .url(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Call</span> <span class="variable">call</span> <span class="operator">=</span> okHttpClient.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(<span class="meta">@NotNull</span> Call call, <span class="meta">@NotNull</span> IOException e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;e.getMessage() = &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(<span class="meta">@NotNull</span> Call call, <span class="meta">@NotNull</span> Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;response.body() = &quot;</span> + response.body().string());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个 Bean 有一个特点，OkHttpClient 和 Request 两个实例都不是直接 new 出来的，在调用 Builder 方法的过程中，都会给它配置一些默认的参数。这种情况，我们可以使用 静态工厂注入或者实例工厂注入来给 OkHttpClient 提供一个实例。</p><p><strong>静态工厂注入</strong></p><p>提供一个 OkHttpClient 的静态工厂:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.javaboy.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkHttpStaticFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient okHttpClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OkHttpClient <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (okHttpClient == <span class="literal">null</span>) &#123;</span><br><span class="line">            okHttpClient = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> okHttpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 xml 文件中，配置该静态工厂:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.ioc.OkHttpStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span> <span class="attr">id</span>=<span class="string">&quot;okHttpClient&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这个配置表示 OkHttpStaticFactory类中的 getInstance 是我们需要的实例，实例的名字就叫 okHttpClient。然后，在 Java 代码中，获取到这个实例，就可以直接使用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.javaboy.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkHttpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;okHttpClient&quot;</span>, OkHttpClient.class);</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                .get()</span><br><span class="line">                .url(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Call</span> <span class="variable">call</span> <span class="operator">=</span> okHttpClient.newCall(request);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(<span class="meta">@NotNull</span> Call call, <span class="meta">@NotNull</span> IOException e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;e.getMessage() = &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(<span class="meta">@NotNull</span> Call call, <span class="meta">@NotNull</span> Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;response.body() = &quot;</span> + response.body().string());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>实例工厂注入</strong></p><p>实例工厂就是工厂方法是一个实例方法，这样，工厂类必须实例化之后才可以调用工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.javaboy.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkHttpFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OkHttpClient okHttpClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> OkHttpClient <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (okHttpClient == <span class="literal">null</span>) &#123;</span><br><span class="line">            okHttpClient = <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder().build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> okHttpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，在 xml 文件中，需要首先提供工厂方法的实例，然后才可以调用工厂方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.ioc.OkHttpFactory&quot;</span> <span class="attr">id</span>=<span class="string">&quot;okHttpFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;okhttp3.OkHttpClient&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;okHttpFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span> <span class="attr">id</span>=<span class="string">&quot;okHttpClient&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>自己写的 Bean 一般不会使用这两种方式注入，但是，如果需要引入外部 jar，外部 jar 的类的初始化，有可能需要使用这两种方式。</p><h3 id="复杂属性的注入"><a href="#复杂属性的注入" class="headerlink" title="复杂属性的注入"></a>复杂属性的注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Cat[] cats;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; detail;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.Cat&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小白&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;白色&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过 xml 注入对象，通过 ref 来引用一个对象</p><h4 id="数组注入"><a href="#数组注入" class="headerlink" title="数组注入"></a>数组注入</h4><p>数组注入和集合注入在 xml 中的配置是一样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;favorites&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.Cat&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小白&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;白色&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>array节点也可使用list节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;favorites&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cats&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;cat2&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.Cat&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cat3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小花&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;花色&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.Cat&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小白&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;白色&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.Cat&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑色&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，既可以通过 ref 使用外部定义好的 Bean，也可以直接在 list 或者 array 节点中定义 bean。</p><h4 id="Map注入"><a href="#Map注入" class="headerlink" title="Map注入"></a>Map注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;99&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;javaboy&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="properties注入"><a href="#properties注入" class="headerlink" title="properties注入"></a>properties注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span>&gt;</span>99<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span>&gt;</span>javaboy<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Java配置"><a href="#Java配置" class="headerlink" title="Java配置"></a>Java配置</h3><p>在 Spring 中，想要将一个 Bean 注册到 Spring 容器中，整体上来说，有三种不同的方式：</p><ul><li>xml注入</li><li>Java配置，通过 Java 代码将 Bean 注册到 Spring 容器中</li><li>自动化扫描</li></ul><p>Java 配置这种方式在 Spring Boot 出现之前，其实很少使用，自从有了 Spring Boot，Java 配置开发被广泛使用，因为在 Spring Boot 中，不使用一行 XML 配置</p><p>例如我有如下一个 Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SayHello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 配置中，我们用一个 Java 配置类去代替之前的 applicationContext.xml 文件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SayHello <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SayHello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在配置类上有一个 @Configuration 注解，这个注解表示这个类不是一个普通类，而是一个配置类，它的作用相当于 applicationContext.xml。 然后，定义方法，方法返回对象，方法上添加 @Bean 注解，表示将这个方法的返回值注入的 Spring 容器中去。也就是说，@Bean 所对应的方法，就相当于applicationContext.xml 中的 bean 节点。</p><p>既然是配置类，我们需要在项目启动时加载配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(JavaConfig.class);</span><br><span class="line">        <span class="type">SayHello</span> <span class="variable">hello</span> <span class="operator">=</span> ctx.getBean(SayHello.class);</span><br><span class="line">        System.out.println(hello.sayHello(<span class="string">&quot;哈哈哈哈哈&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，配置的加载，是使用 AnnotationConfigApplicationContext 来实现。</p><p>Bean 的默认名称是方法名。以上面的案例为例，Bean 的名字是 sayHello。 如果开发者想自定义方法名，也是可以的，直接在 @Bean 注解中进行过配置。如下配置表示修改 Bean 的名字为 javaboy：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;javaboy&quot;)</span></span><br><span class="line">    SayHello <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SayHello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动化配置"><a href="#自动化配置" class="headerlink" title="自动化配置"></a>自动化配置</h3><p>在我们实际开发中，大量的使用自动配置。</p><p>自动化配置既可以通过 Java 配置来实现，也可以通过 xml 配置来实现。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>例如我有一个 UserService，我希望在自动化扫描时，这个类能够自动注册到 Spring 容器中去，那么可以给该类添加一个 @Service，作为一个标记。</p><p>和 @Service 注解功能类似的注解，一共有四个：</p><ul><li>@Component</li><li>@Repository</li><li>@Controller</li><li>@Controller</li></ul><p>这四个中，另外三个都是基于 @Component 做出来的，而且从目前的源码来看，功能也是一致的，那么为什么要搞三个呢？主要是为了在不同的类上面添加时方便。</p><ul><li>在 Service 层上，添加注解时，使用 @Service</li><li>在 Dao 层，添加注解时，使用 @Repository</li><li>在 Controller 层，添加注解时，使用 @Controller</li><li>在其他组件上添加注解时，使用 @Component</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            users.add(<span class="string">&quot;javaboy:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加完成后，自动化扫描有两种方式，一种就是通过 Java 代码配置自动化扫描，另一种则是通过 xml 文件来配置自动化扫描。</p><h4 id="Java-代码配置自动扫描"><a href="#Java-代码配置自动扫描" class="headerlink" title="Java 代码配置自动扫描"></a>Java 代码配置自动扫描</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;org.javaboy.javaconfig.service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在项目启动中加载配置类，在配置类中，通过 @ComponentScan 注解指定要扫描的包（如果不指定，默认情况下扫描的是配置类所在的包下载的 Bean 以及配置类所在的包下的子包下的类），然后就可以获取 UserService 的实例了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(JavaConfig.class);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ctx.getBean(UserService.class);</span><br><span class="line">        System.out.println(userService.getAllUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>默认情况下，Bean 的名字是类名首字母小写。例如上面的 UserService，它的实例名，默认就是 userService。如果开发者想要自定义名字，就直接在 @Service 注解中添加即可。</li><li>上面的配置，我们是按照包的位置来扫描的。也就是说，Bean 必须放在指定的扫描位置，否则，即使你有 @Service 注解，也扫描不到。</li></ul><p>除了按照包的位置来扫描，还有另外一种方式，就是根据注解来扫描。例如如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;org.javaboy.javaconfig&quot;,useDefaultFilters = true,excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION,classes = Controller.class)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>这个配置表示扫描 org.javaboy.javaconfig 下的 除了 Controller之外 所有 Bean</p><h4 id="XML-配置自动化扫描"><a href="#XML-配置自动化扫描" class="headerlink" title="XML 配置自动化扫描"></a>XML 配置自动化扫描</h4><p>下面这行配置表示扫描 org.javaboy.javaconfig 下的所有 Bean。当然也可以按照类来扫描。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.javaboy.javaconfig&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>XML 配置完成后，在 Java 代码中加载 XML 配置即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMLTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ctx.getBean(UserService.class);</span><br><span class="line">        List&lt;String&gt; list = userService.getAllUser();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在 XML 配置中按照注解的类型进行扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.javaboy.javaconfig&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="对象注入问题"><a href="#对象注入问题" class="headerlink" title="对象注入问题"></a>对象注入问题</h4><p>自动扫描时的对象注入有三种方式：</p><ul><li>@Autowired， @Autowired 是根据类型去查找，然后赋值，这就有一个要求，这个类型只可以有一个对象，否则就会报错</li><li>@Resources， @Resources 是根据名称去查找，默认情况下，定义的变量名，就是查找的名称，当然开发者也可以在 @Resources 注解中手动指定</li><li>@Injected</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            users.add(<span class="string">&quot;javaboy:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类存在多个实例，那么就应该使用 @Resources 去注入，如果非得使用 @Autowired，也是可以的，此时需要配合另外一个注解，@Qualifier，在 @Qualifier 中可以指定变量名，两个一起用（@Qualifier 和 @Autowired）就可以实现通过变量名查找到变量。</p><h3 id="混合配置"><a href="#混合配置" class="headerlink" title="混合配置"></a>混合配置</h3><p>混合配置就是 Java 配置+XML 配置。混用的话，可以在 Java 配置中引入 XML 配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>在 Java 配置中，通过 @ImportResource 注解可以导入一个 XML 配置。</p><h3 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h3><h4 id="条件注解的示例"><a href="#条件注解的示例" class="headerlink" title="条件注解的示例"></a>条件注解的示例</h4><p>在 Windows 中如何获取操作系统信息？Windows 中查看文件夹目录的命令是 dir，Linux 中查看文件夹目录的命令是 ls，我现在希望当系统运行在 Windows 上时，自动打印出 Windows 上的目录展示命令，Linux 运行时，则自动展示 Linux 上的目录展示命令。</p><p>首先定义一个显示文件夹目录的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShowCmd</span> &#123;</span><br><span class="line">    String <span class="title function_">showCmd</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，分别实现 Windows 下的实例和 Linux 下的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WinShowCmd</span> <span class="keyword">implements</span> <span class="title class_">ShowCmd</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showCmd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dir&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinuxShowCmd</span> <span class="keyword">implements</span> <span class="title class_">ShowCmd</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showCmd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，定义两个条件，一个是 Windows 下的条件，另一个是 Linux 下的条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getEnvironment().getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;windows&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinuxCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getEnvironment().getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;linux&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，在定义 Bean 的时候，就可以去配置条件注解了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;showCmd&quot;)</span></span><br><span class="line">    <span class="meta">@Conditional(WindowsCondition.class)</span></span><br><span class="line">    ShowCmd <span class="title function_">winCmd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WinShowCmd</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;showCmd&quot;)</span></span><br><span class="line">    <span class="meta">@Conditional(LinuxCondition.class)</span></span><br><span class="line">    ShowCmd <span class="title function_">linuxCmd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinuxShowCmd</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，一定要给两个 Bean 取相同的名字，这样在调用时，才可以自动匹配。然后，给每一个 Bean 加上条件注解，当条件中的 matches 方法返回 true 的时候，这个 Bean 的定义就会生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(JavaConfig.class);</span><br><span class="line">        <span class="type">ShowCmd</span> <span class="variable">showCmd</span> <span class="operator">=</span> (ShowCmd) ctx.getBean(<span class="string">&quot;showCmd&quot;</span>);</span><br><span class="line">        System.out.println(showCmd.showCmd());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件注解有一个非常典型的使用场景，就是多环境切换。</p><h4 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h4><p>开发中，如何在 开发/生产/测试 环境之间进行快速切换？Spring 中提供了 Profile 来解决这个问题，Profile 的底层就是条件注解。这个从 @Profile 注解的定义就可以看出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(ProfileCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Profile &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The set of profiles for which the annotated component should be registered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] value();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProfileCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">MultiValueMap&lt;String, Object&gt; attrs = metadata.getAllAnnotationAttributes(Profile.class.getName());</span><br><span class="line"><span class="keyword">if</span> (attrs != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Object value : attrs.get(<span class="string">&quot;value&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (context.getEnvironment().acceptsProfiles(Profiles.of((String[]) value))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义一个 DataSource：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DataSource&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;url=&#x27;&quot;</span> + url + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在配置 Bean 时，通过 @Profile 注解指定不同的环境：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;ds&quot;)</span></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line">DataSource <span class="title function_">devDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSource</span>();</span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/dev&quot;</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;ds&quot;)</span></span><br><span class="line"><span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line">DataSource <span class="title function_">prodDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSource</span>();</span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql://192.168.33.113:3306/dev&quot;</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;jkldasjfkl&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;jfsdjflkajkld&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在加载配置类，注意，需要先设置当前环境，然后再去加载配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">        ctx.getEnvironment().setActiveProfiles(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        ctx.register(JavaConfig.class);</span><br><span class="line">        ctx.refresh();</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> (DataSource) ctx.getBean(<span class="string">&quot;ds&quot;</span>);</span><br><span class="line">        System.out.println(ds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是在 Java 代码中配置的。</p><p>环境的切换，也可以在 XML 文件中配置，如下配置在 XML 文件中，必须放在其他节点后面。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.DataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///devdb&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.DataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://192.168.33.113:3306/devdb&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jsdfaklfj789345fjsd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类中设置当前环境并加载配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line">        ctx.getEnvironment().setActiveProfiles(<span class="string">&quot;prod&quot;</span>);</span><br><span class="line">        ctx.setConfigLocation(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        ctx.refresh();</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) ctx.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h3><p>在 XML 配置中注册的 Bean，或者用 Java 配置注册的 Bean，如果我多次获取，获取到的对象是否是同一个?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user==user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，从 Spring 容器中多次获取同一个 Bean，默认情况下，获取到的实际上是同一个实例。</p><p>通过在 XML 节点中，设置 scope 属性，我们可以调整默认的实例个数。scope 的值为 singleton（默认），表示这个 Bean 在 Spring 容器中，是以单例的形式存在，如果 scope 的值为 prototype，表示这个 Bean 在 Spring 容器中不是单例，多次获取将拿到多个不同的实例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>除了 singleton 和 prototype 之外，还有两个取值，request 和 session。这两个取值在 web 环境下有效。</p><p>上面的是在 XML 中的配置，我们也可以在 Java 中配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">    SayHello <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SayHello</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 代码中，我们可以通过 @Scope 注解指定 Bean 的作用域。</p><p>在自动扫描配置中，也可以指定bean的作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userdao&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="id-和-name-的区别"><a href="#id-和-name-的区别" class="headerlink" title="id 和 name 的区别"></a>id 和 name 的区别</h3><p>在 XML 配置中，我们可以看到，即可以通过 id 给 Bean 指定一个唯一标识符，也可以通过 name 来指定，大部分情况下这两个作用是一样的，有一个小小区别：</p><p>name 支持取多个。多个 name 之间，用<code>,</code>隔开</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user,user1,user2,user3&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>此时，通过 user、user1、user2、user3 都可以获取到当前对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 id 不支持有多个值。如果强行用 , 隔开，它还是一个值。例如如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.javaboy.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user,user1,user2,user3&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这个配置表示 Bean 的名字为 <code>user,user1,user2,user3</code>，具体调用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;user,user1,user2,user3&quot;</span>, User.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;user,user1,user2,user3&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Aware接口"><a href="#Aware接口" class="headerlink" title="Aware接口"></a>Aware接口</h3><p>Aware 接口，从字面上理解就是感知捕获。单纯的一个 Bean 是没有知觉的。</p><p>在实际开发中，我们可能会遇到一些类，需要获取到容器的详细信息，那就可以通过 Aware 接口来实现。</p><p>Aware 是一个空接口，有很多实现类：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210526084153.png" alt=""></p><p>这些实现的接口，有一些公共特性：</p><ul><li>都是以 Aware 结尾</li><li>都继承Aware</li><li>接口内均定义了一个 set 方法</li></ul><p>每一个子接口均提供了一个 set 方法，方法的参数就是当前 Bean 需要感知的内容，因此我们需要在 Bean 中声明相关的成员变量来接受这个参数。接收到这个参数后，就可以通过这个参数获取到容器的详细信息了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.javaboy.aware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EnvironmentAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ResourceLoaderAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;javaboy.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AwareService</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span>, BeanFactoryAware, ResourceLoaderAware, EnvironmentAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beanName = &quot;</span> + beanName);</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(<span class="string">&quot;javaboy.txt&quot;</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(resource.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;s = &quot;</span> + s);</span><br><span class="line">        br.close();</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;javaboy.address&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;address = &quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanName = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnvironment</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.environment = environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="aop简介"><a href="#aop简介" class="headerlink" title="aop简介"></a>aop简介</h3><p>AOP 为 Aspect Oriented Programming 的缩写，意思为面向切面编程。</p><p>AOP 是 OOP（面向对象编程） 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>面向切面编程，就是在程序运行时，不改变程序源码的情况下，动态的增强方法的功能，常见的使用场景非常多：日志、事务、数据库操作等。</p><p>这些操作中，无一例外，都有很多模板化的代码，而解决模板化代码，消除臃肿就是 Aop 的强项。</p><p>在 Aop 中，有几个常见的概念：</p><div class="table-container"><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>Target（目标对象）</td><td>代理的目标对象</td></tr><tr><td>Proxy （代理）</td><td>一个类被 AOP 织入增强后，就产生一个结果代理类</td></tr><tr><td>Joinpoint（连接点）</td><td>指那些可以被拦截到的点。在spring中,这些点指的是方法，因为 spring只支持方法类型的连接点</td></tr><tr><td>Pointcut（切入点）</td><td>指我们要对哪些 Joinpoint 进行拦截</td></tr><tr><td>Advice（通知/ 增强）</td><td>通知是指拦截到 Joinpoint 之后所要做的事情，分为前置通知、后置通知、异常通知、最终通知、环绕通知</td></tr><tr><td>Aspect（切面）</td><td>是切入点和通知（引介）的结合</td></tr><tr><td>Weaving（织入）</td><td>是指把增强应用到目标对象来创建新的代理对象的程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</td></tr></tbody></table></div><p>在 Aop 实际上集基于 Java 动态代理来实现的，Java 中的动态代理有两种实现方式：</p><ul><li>jdk</li><li>cglib</li></ul><h3 id="基于JDK的动态代理"><a href="#基于JDK的动态代理" class="headerlink" title="基于JDK的动态代理"></a>基于JDK的动态代理</h3><p>不使用spring的aop来实现</p><ul><li>定义一个计算器的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyCalculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义计算器接口的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">MyCalculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getInstance</span><span class="params">(MyCalculatorImpl myCalculator)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(CalculatorProxy.class.getClassLoader(), myCalculator.getClass().getInterfaces(), <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(method.getName() + <span class="string">&quot;方法开始执行了&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(myCalculator, args);</span><br><span class="line">                System.out.println(method.getName() + <span class="string">&quot;方法执行结束了&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Proxy.newProxyInstance 方法接收三个参数，第一个是一个 classloader，第二个是代理多项实现的接口，第三个是代理对象方法的处理器，所有要额外添加的行为都在 invoke 方法中实现。</p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyCalculatorImpl</span> <span class="variable">myCalculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCalculatorImpl</span>();</span><br><span class="line">        <span class="type">MyCalculator</span> <span class="variable">calculator</span> <span class="operator">=</span> (MyCalculator) CalculatorProxy.getInstance(myCalculator);</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculator.add(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;add = &quot;</span> + add);</span><br><span class="line"></span><br><span class="line">        test(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String... x)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String s : x) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s = &quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">add方法开始执行了</span></span><br><span class="line"><span class="comment">add方法执行结束了</span></span><br><span class="line"><span class="comment">add = 7</span></span><br><span class="line"><span class="comment">s = a</span></span><br><span class="line"><span class="comment">s = e</span></span><br><span class="line"><span class="comment">s = aaa</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="AOP的五种通知"><a href="#AOP的五种通知" class="headerlink" title="AOP的五种通知"></a>AOP的五种通知</h3><p>Spring 中的 Aop 的通知类型有 5 种：</p><ul><li>前置通知</li><li>后置通知</li><li>异常通知</li><li>返回通知</li><li>环绕通知</li></ul><p>首先添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，定义切点，这里有两种切点的定义方式：</p><ul><li>使用自定义注解</li><li>使用规则</li></ul><p>其中，使用自定义注解标记切点，是侵入式的，所以这种方式在实际开发中不推荐，仅作为了解，另一种使用规则来定义切点的方式，无侵入，一般推荐使用这种方式。</p><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>首先自定义一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Action &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算器的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyCalculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在需要拦截的方法上，添加该注解，在 add 方法上添加了 @Action 注解，表示该方法将会被 Aop 拦截，而其他未添加该注解的方法则不受影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">MyCalculator</span> &#123;</span><br><span class="line">    <span class="meta">@Action</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot;-&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a - b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，定义增强（通知、Advice）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 表示这是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Before</span> 注解表示这是一个前置通知，即在目标方法执行之前执行，注解中，需要填入切点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint  包含了目标方法的关键信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(Action)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法开始执行了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@After</span> 表示这是一个后置通知，即在目标方法执行之后执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After(&quot;@annotation(Action)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法执行结束了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@AfterReturning</span> 表示这是一个返回通知，即有目标方法有返回值的时候才会触发，该注解中的 returning 属性表示目标方法返回值的变量名，这个需要和参数一一对应</span></span><br><span class="line"><span class="comment">     * 注意：目标方法的返回值类型要和这里方法返回值参数的类型一致，否则拦截不到，如果想拦截所有（包括返回值为 void），则方法返回值参数可以为 Object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;@annotation(Action)&quot;, returning = &quot;r&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returning</span><span class="params">(JoinPoint joinPoint, Integer r)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法返回通知：&quot;</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e         目标方法所抛出的异常，注意，这个参数必须是目标方法所抛出的异常或者所抛出的异常的父类，只有这样，才会捕获。如果想拦截所有，参数类型声明为 Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;@annotation(Action)&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception e)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法返回通知：&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     * 环绕通知是集大成者，可以用环绕通知实现上面的四个通知，这个方法的核心有点类似于在这里通过反射执行方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 注意这里的返回值类型最好是 Object ，和拦截到的方法相匹配</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(Action)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通知定义完成后，接下来在配置类中，开启包扫描和自动代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Main 方法中，开启调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(JavaConfig.class);</span><br><span class="line">        <span class="type">MyCalculator</span> <span class="variable">calculator</span> <span class="operator">=</span> ctx.getBean(MyCalculator.class);</span><br><span class="line">        calculator.add(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        calculator.min(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法中统一定义切点"><a href="#方法中统一定义切点" class="headerlink" title="方法中统一定义切点"></a>方法中统一定义切点</h4><p>再来回顾 LogAspect 切面，我们发现，切点的定义不够灵活，之前的切点是直接写在注解里边的，这样，如果要修改切点，每个方法上都要修改，因此，我们可以将切点统一定义，然后统一调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表示这是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以统一定义切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(Action)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 包含了目标方法的关键信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Before</span> 注解表示这是一个前置通知，即在目标方法执行之前执行，注解中，需要填入切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法开始执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非侵入定义切点"><a href="#非侵入定义切点" class="headerlink" title="非侵入定义切点"></a>非侵入定义切点</h4><p>上面使用注解是侵入式的，我们还可以继续优化，改为非侵入式的。重新定义切点，新切点的定义就不在需要 @Action 注解了，要拦截的目标方法上也不用添加 @Action 注解。下面这种方式是更为通用的拦截方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表示这是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以统一定义切点</span></span><br><span class="line"><span class="comment">     * 第一个 * 表示要拦截的目标方法返回值任意（也可以明确指定返回值类型）</span></span><br><span class="line"><span class="comment">     * 第二个 * 表示包中的任意类（也可以明确指定类）</span></span><br><span class="line"><span class="comment">     * 第三个 * 表示类中的任意方法</span></span><br><span class="line"><span class="comment">     * 最后面的两个点表示方法参数任意，个数任意，类型任意</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.cwz.aop.commons.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 包含了目标方法的关键信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Before</span> 注解表示这是一个前置通知，即在目标方法执行之前执行，注解中，需要填入切点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法开始执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XML配置AOP"><a href="#XML配置AOP" class="headerlink" title="XML配置AOP"></a>XML配置AOP</h3><p>定义通知/增强，但是单纯定义自己的行为即可，不再需要注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法开始执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法执行结束了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returing</span><span class="params">(JoinPoint joinPoint,Integer r)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法返回：&quot;</span>+r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint,Exception e)</span> &#123;</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        System.out.println(name + <span class="string">&quot;方法抛异常了：&quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这个相当于 method.invoke 方法，我们可以在这个方法的前后分别添加日志，就相当于是前置/后置通知</span></span><br><span class="line">            proceed = pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring中添加xml配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=<span class="string">&quot;org.javaboy.aop.LogAspect&quot;</span> id=<span class="string">&quot;logAspect&quot;</span>/&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut id=<span class="string">&quot;pc1&quot;</span> expression=<span class="string">&quot;execution(* org.javaboy.aop.commons.*.*(..))&quot;</span>/&gt;</span><br><span class="line">    &lt;aop:aspect ref=<span class="string">&quot;logAspect&quot;</span>&gt;</span><br><span class="line">        &lt;aop:before method=<span class="string">&quot;before&quot;</span> pointcut-ref=<span class="string">&quot;pc1&quot;</span>/&gt;</span><br><span class="line">        &lt;aop:after method=<span class="string">&quot;after&quot;</span> pointcut-ref=<span class="string">&quot;pc1&quot;</span>/&gt;</span><br><span class="line">        &lt;aop:after-returning method=<span class="string">&quot;returing&quot;</span> pointcut-ref=<span class="string">&quot;pc1&quot;</span> returning=<span class="string">&quot;r&quot;</span>/&gt;</span><br><span class="line">        &lt;aop:after-throwing method=<span class="string">&quot;afterThrowing&quot;</span> pointcut-ref=<span class="string">&quot;pc1&quot;</span> throwing=<span class="string">&quot;e&quot;</span>/&gt;</span><br><span class="line">        &lt;aop:around method=<span class="string">&quot;around&quot;</span> pointcut-ref=<span class="string">&quot;pc1&quot;</span>/&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p>在 Main 方法中加载配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">MyCalculatorImpl</span> <span class="variable">myCalculator</span> <span class="operator">=</span> ctx.getBean(MyCalculatorImpl.class);</span><br><span class="line">        myCalculator.add(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        myCalculator.min(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><p>JdbcTemplate 是 Spring 利用 Aop 思想封装的 JDBC 操作工具。</p><p>比原生的jdbc方便，但不如mybatis这种。</p><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6E<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>准备数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java配置-1"><a href="#Java配置-1" class="headerlink" title="Java配置"></a>Java配置</h3><p>提供一个配置类，在配置类中配置 JdbcTemplate：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///test01&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供两个 Bean，一个是 DataSource 的 Bean，另一个是 JdbcTemplate 的 Bean，JdbcTemplate 的配置非常容易，只需要 new 一个 Bean 出来，然后配置一下 DataSource 就可以。</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(JdbcConfig.class);</span><br><span class="line">        jdbcTemplate = ctx.getBean(JdbcTemplate.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;insert into user (username,address) values (?,?);&quot;</span>, <span class="string">&quot;javaboy&quot;</span>, <span class="string">&quot;www.javaboy.org&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update user set username=? where id=?&quot;</span>, <span class="string">&quot;javaboy123&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;delete from user where id=?&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(<span class="string">&quot;select * from user where id=?&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;User&gt;(User.class), <span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在查询时，如果使用了 BeanPropertyRowMapper，要求查出来的字段必须和 Bean 的属性名一一对应。如果不一样，则不要使用 BeanPropertyRowMapper，此时需要自定义 RowMapper 或者给查询的字段取别名。</p><ul><li>自定义 RowMapper:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(<span class="string">&quot;select * from user where id=?&quot;</span>, <span class="keyword">new</span> <span class="title class_">RowMapper</span>&lt;User&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> User <span class="title function_">mapRow</span><span class="params">(ResultSet resultSet, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            u.setId(id);</span><br><span class="line">            u.setName(username);</span><br><span class="line">            u.setAddress(address);</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给查询的字段取别名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(<span class="string">&quot;select id,username as name,address from user where id=?&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;User&gt;(User.class), <span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test01?serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>Spring 中的事务主要是利用 Aop 思想，简化事务的配置，可以通过 Java 配置也可以通过 XML 配置。</p><p>我们通过一个转账操作来看下 Spring 中的事务配置。</p><p>配置 JdbcTemplate:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///test02&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供转账操作的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">(String username, Integer money)</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money+? where username=?&quot;</span>, money, username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">minMoney</span><span class="params">(String username, Integer money)</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money-? where username=?&quot;</span>, money, username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.addMoney(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        userDao.minMoney(<span class="string">&quot;lisi&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在 XML 文件中，开启自动化扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.javaboy&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test02?serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="XML配置-1"><a href="#XML配置-1" class="headerlink" title="XML配置"></a>XML配置</h3><p>配置 TransactionManager</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置事务要处理的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置aop</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.javaboy.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    jdbcTemplate = ctx.getBean(JdbcTemplate.class);</span><br><span class="line">    userService = ctx.getBean(UserService.class);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    userService.updateMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java配置-2"><a href="#Java配置-2" class="headerlink" title="Java配置"></a>Java配置</h3><p>如果要开启 Java 注解配置，在 XML 配置中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>上面的配置相当于：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pc1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* org.javaboy.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pc1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在需要添加事务的方法上，添加 @Transactional 注解，表示该方法开启事务，当然，这个注解也可以放在类上，表示这个类中的所有方法都开启事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.addMoney(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        userDao.minMoney(<span class="string">&quot;lisi&quot;</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>MVC是软件工程中的一种软件架构模式，它是一种分离业务逻辑与显示界面的开发思想。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* M（model）模型：处理业务逻辑，封装实体</span><br><span class="line">* V（view） 视图：展示内容</span><br><span class="line">* C（controller）控制器：负责调度分发（1.接收请求、2.调用模型、3.转发到视图）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528095513.png" alt=""></p><h2 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h2><p>Spring Web MVC 是一种基于 Java 的实现了 Web MVC 设计模式的轻量级 Web 框架，使用了 MVC 架构模式的思想，将 web 层进行职责解耦，基于请求驱动指的就是使用请求-响应模型。</p><p>在 传统的 Jsp/Servlet 技术体系中，如果要开发接口，一个接口对应一个 Servlet，会导致我们开发出许多 Servlet，使用 SpringMVC 可以有效的简化这一步骤。</p><p>SpringMVC的优势：</p><ul><li>能非常简单的设计出干净的 Web 层</li><li>天生与 Spring 框架集成（如 IoC 容器、AOP 等）</li><li>非常容易与其他视图技术集成，如 Velocity、FreeMarker 等等，因为模型数据不放在特定的 API 里，而是放在一个 Model 里。</li><li>支持灵活的本地化、主题等解析</li><li>支持 RESTful 风格</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528095715.png" alt=""></p><p>SpringMVC的框架就是封装了原来Servlet中的共有行为；例如：参数封装，视图转发等</p><h2 id="SpringMVC实现一个helloword"><a href="#SpringMVC实现一个helloword" class="headerlink" title="SpringMVC实现一个helloword"></a>SpringMVC实现一个helloword</h2><h3 id="创建一个Maven工程，添加依赖"><a href="#创建一个Maven工程，添加依赖" class="headerlink" title="创建一个Maven工程，添加依赖"></a>创建一个Maven工程，添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加了 spring-webmvc 依赖之后，其他的 spring-web、spring-aop、spring-context 等等就全部都加入进来了。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528092454.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528092523.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528093519.png" alt=""></p><p>这是一个Java SE工程，现在要把它改造成web工程</p><p>依赖加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右键打开<code>Open Module Settings</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528093936.png" alt=""></p><p>这样就把webapp创建出来了</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528094136.png" alt=""></p><h3 id="编写Controller类和视图页面"><a href="#编写Controller类和视图页面" class="headerlink" title="编写Controller类和视图页面"></a>编写Controller类和视图页面</h3><p>准备一个 Controller，即一个处理浏览器请求的接口</p><p>MyController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.springmvc01.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法用来处理请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest  这个是前端发送过来的请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse  这个是服务端给前端的响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回 ModelAndView  Model就相当于数据模型，View 就是视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;cwz&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用 jsp 作为视图，在 webapp 目录下创建 hello.jsp 文件，内容如下:</p><p>/WEB-INF/jsp/ hello.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">hello $&#123;name&#125; !</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="配置springmvc核心配置文件-spring-servlet-xml"><a href="#配置springmvc核心配置文件-spring-servlet-xml" class="headerlink" title="配置springmvc核心配置文件 spring-servlet.xml"></a>配置springmvc核心配置文件 spring-servlet.xml</h3><p>在 resources 目录下，创建一个名为 spring-servlet.xml 的 springmvc 的配置文件，这里，我们先写一个简单的 demo ，因此可以先不用添加 spring 的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--首先配置一个MyController的实例--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.cwz.springmvc01.controller.MyController&quot;</span> <span class="attr">name</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置处理器映射器，将前端请求和后端的接口关联起来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span> <span class="attr">id</span>=<span class="string">&quot;beanNameUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span> <span class="attr">id</span>=<span class="string">&quot;handlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--试图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加载-springmvc-配置文件"><a href="#加载-springmvc-配置文件" class="headerlink" title="加载 springmvc 配置文件"></a>加载 springmvc 配置文件</h3><p>在 web 项目启动时，加载 springmvc 配置文件，这个配置是在 web.xml 中完成的:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有请求都将自动拦截下来，拦截下来后，请求交给 DispatcherServlet 去处理，在加载 DispatcherServlet 时，还需要指定配置文件路径。</p><p>这里有一个默认的规则，如果配置文件放在 webapp/WEB-INF/ 目录下，并且配置文件的名字等于 DispatcherServlet 的名字+ <code>-servlet</code>（即这里的配置文件路径是 webapp/WEB-INF/springmvc-servlet.xml），如果是这样的话，可以不用添加 init-param 参数，即不用手动配置 springmvc 的配置文件，框架会自动加载。</p><p>最后项目启动，进行检验</p><h2 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528131437.png" alt=""></p><ul><li>用户发送请求至前端控制器DispatcherServlet</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器</li><li>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet</li><li>DispatcherServlet调用HandlerAdapter处理器适配器</li><li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)</li><li>Controller执行完成返回ModelAndView</li><li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</li><li>ViewReslover解析后返回具体View</li><li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）</li><li>DispatcherServlet将渲染后的视图响应响应用户</li></ul><h3 id="SpringMVC中组件"><a href="#SpringMVC中组件" class="headerlink" title="SpringMVC中组件"></a>SpringMVC中组件</h3><ul><li>DispatcherServlet：前端控制器</li></ul><p>用户请求到达前端控制器，它就相当于 mvc 模式中的c，DispatcherServlet 是整个流程控制的中心，相当于是 SpringMVC 的大脑，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。</p><ul><li>HandlerMapping：处理器映射器</li></ul><p>HandlerMapping 负责根据用户请求找到 Handler 即处理器（也就是我们所说的 Controller），SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等，在实际开发中，我们常用的方式是注解方式。</p><ul><li>Handler：处理器</li></ul><p>Handler 是继 DispatcherServlet 前端控制器的后端控制器，在DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理。由于 Handler 涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发 Handler。（这里所说的 Handler 就是指我们的 Controller）</p><ul><li>HandlAdapter：处理器适配器</li></ul><p>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行</p><ul><li>ViewResolver：视图解析器</li></ul><p>ViewResolver 负责将处理结果生成 View 视图，ViewResolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户</p><h3 id="SpringMVC-中央控制器DispatcherServlet"><a href="#SpringMVC-中央控制器DispatcherServlet" class="headerlink" title="SpringMVC 中央控制器DispatcherServlet"></a>SpringMVC 中央控制器DispatcherServlet</h3><p>DispatcherServlet 是前端控制器设计模式的实现，提供 Spring Web MVC 的集中访问点，而且负责职责的分派，而且与 Spring IOC 容器无缝集成，从而可以获得 Spring 的所有好处。DispatcherServlet 主要用作职责调度工作，本身主要用于控制流程，主要职责如下：</p><ul><li>通过 HandlerMapping，将请求映射到处理器（返回一个 HandlerExecutionChain，它包括一个处理器、多个 HandlerInterceptor 拦截器）</li><li>通过 HandlerAdapter 支持多种类型的处理器(HandlerExecutionChain 中的处理器)</li><li>通过 ViewResolver 解析逻辑视图名到具体视图实现</li><li>本地化解析，渲染具体的试图等</li><li>如果执行过程中遇到异常将交给 HandlerExceptionResolver 来解析</li></ul><p>DispathcherServlet配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>load-on-startup：表示启动容器时初始化该 Servlet</li><li>contextConfigLocation：表示 SpringMVC 配置文件的路径</li><li>url-pattern：表示哪些请求交给 Spring Web MVC 处理， <code>/</code> 是用来定义默认 servlet 映射的。也可以如 <code>*.html</code> 表示拦截所有以 html 为扩展名的请求</li><li>contextClass：实现WebApplicationContext接口的类，当前的servlet用它来创建上下文。如果这个参数没有指定， 默认使用XmlWebApplicationContext</li><li>contextConfigLocation：传给上下文实例（由contextClass指定）的字符串，用来指定上下文的位置。这个字符串可以被分成多个字符串（使用逗号作为分隔符） 来支持多个上下文（在多上下文的情况下，如果同一个bean被定义两次，后面一个优先）</li><li>namespace：WebApplicationContext命名空间。默认值是[server-name]-servlet</li></ul><h2 id="Spring和SpringMVC分开配置"><a href="#Spring和SpringMVC分开配置" class="headerlink" title="Spring和SpringMVC分开配置"></a>Spring和SpringMVC分开配置</h2><p>之前的hello案例中，只有 SpringMVC，没有 Spring，Web 项目也是可以运行的。在实际开发中，Spring 和 SpringMVC 是分开配置的，所以对上面的项目继续进行完善，添加 Spring 相关配置。</p><p>项目添加一个service包，提供HelloService类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.springmvc01.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 HelloService 注入到 Spring 容器中并使用它，这个是属于 Spring 层的 Bean，所以我们一般将除了 Controller 之外的所有 Bean 注册到 Spring 容器中，而将 Controller 注册到 SpringMVC 容器中，在 resources 目录下添加 applicationContext.xml 作为 spring 的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个包下除了controller都扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz.springmvc01&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个配置文件默认情况下不会被加载，需要在 web.xml 中对其进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--springmvc的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 context-param 指定 Spring 配置文件的位置，这个配置文件也有一些默认规则，它的配置文件名默认就叫 applicationContext.xml 。</p><p>如果你将这个配置文件放在 WEB-INF 目录下，那么这里就可以不用指定配置文件位置了，只需要指定监听器就可以了。这段配置是 Spring 集成 Web 环境的通用配置；一般用于加载除 Web 层的 Bean（如DAO、Service 等），以便于与其他任何Web框架集成。</p><p>配置完成之后，还需要修改 MyController，在 MyController 中注入 HelloSerivce：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.springmvc01.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cwz.springmvc01.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@org</span>.springframework.stereotype.Controller(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法用来处理请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletRequest  这个是前端发送过来的请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpServletResponse  这个是服务端给前端的响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回 ModelAndView  Model就相当于数据模型，View 就是视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;cwz&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;helloService = &quot;</span> + helloService);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了在 SpringMVC 容器中能够扫描到 MyController ，这里给 MyController 添加了 <code>@Controller</code> 注解，同时，由于我们目前采用的 HandlerMapping 是 BeanNameUrlHandlerMapping（意味着请求地址就是处理器 Bean 的名字），所以，还需要手动指定 MyController 的名字。</p><p>最后，修改 SpringMVC 的配置文件，将 Bean 配置为扫描形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--首先配置一个MyController的实例--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;com.cwz.springmvc01.controller.MyController&quot; name=&quot;/hello&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--除了controller其他的都不扫--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz.springmvc01&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置处理器映射器，将前端请求和后端的接口关联起来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span> <span class="attr">id</span>=<span class="string">&quot;beanNameUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span> <span class="attr">id</span>=<span class="string">&quot;handlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--试图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring容器和SpringMVC容器"><a href="#Spring容器和SpringMVC容器" class="headerlink" title="Spring容器和SpringMVC容器"></a>Spring容器和SpringMVC容器</h2><p>当 Spring 和 SpringMVC 同时出现，我们的项目中将存在两个容器，一个是 Spring 容器，另一个是 SpringMVC 容器，Spring 容器通过 ContextLoaderListener 来加载，SpringMVC 容器则通过 DispatcherServlet 来加载，这两个容器不一样：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528134235.png" alt=""></p><p>可以看出：</p><ul><li>ContextLoaderListener 初始化的上下文加载的 Bean 是对于整个应用程序共享的，一般如 DAO 层、Service 层 Bean；</li><li>DispatcherServlet 初始化的上下文加载的 Bean 是只对 Spring Web MVC 有效的 Bean，如 Controller、HandlerMapping、HandlerAdapter 等等，该初始化上下文应该只加载 Web相关组件。</li><li>子容器可以访问父容器，但父容器不能访问子容器，Spring是父容器，SpringMVC是子容器。</li></ul><p>Spring容器中不扫描所有Bean：</p><ul><li>因为请求达到服务端后，找 DispatcherServlet 去处理，只会去 SpringMVC 容器中找，这就意味着 Controller 必须在 SpringMVC 容器中扫描</li></ul><p>为什么不在 SpringMVC 容器中扫描所有 Bean：</p><ul><li>这个是可以的，可以在 SpringMVC 容器中扫描所有 Bean。不写在一起，是为了方便配置文件的管理</li></ul><h2 id="SpringMVC处理器详解"><a href="#SpringMVC处理器详解" class="headerlink" title="SpringMVC处理器详解"></a>SpringMVC处理器详解</h2><h3 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h3><p>在 SpringMVC 中，系统提供了很多 HandlerMapping：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528160601.png" alt=""></p><p>HandlerMapping 是负责根据 request 请求找到对应的 Handler 处理器及 Interceptor 拦截器，将它们封装在 HandlerExecutionChain 对象中返回给前端控制器。</p><p><strong>BeanNameUrlHandlerMapping</strong></p><p>BeanNameUrl 处理器映射器，根据请求的 url 与 Spring 容器中定义的 bean 的 name 进行匹配，从而从 Spring 容器中找到 bean 实例，就是说，请求的 url 地址就是处理器 Bean 的名字。但是不能配置多个请求路径。</p><p>配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.cwz.springmvc01.controller.MyController&quot;</span> <span class="attr">name</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span> <span class="attr">id</span>=<span class="string">&quot;beanNameUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/hello&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SimpleUrlHandlerMapping</strong></p><p>SimpleUrlHandlerMapping 是 BeanNameUrlHandlerMapping 的增强版本，它可以将 url 和处理器 bean 的 id 进行统一映射配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.cwz.springmvc01.controller.MyController&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.cwz.springmvc01.controller.MyController2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myController2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span> <span class="attr">id</span>=<span class="string">&quot;handlerMapping&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/hello&quot;</span>&gt;</span>myController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/hello2&quot;</span>&gt;</span>myController2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，在 props 中，可以配置多个请求路径和处理器实例的映射关系。</p><h3 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h3><p>controller实现的方式很多，每一种执行方式肯定是不一样的。处理器适配器会根据执行的方式执行不同的代码。</p><p>HandlerAdapter 会根据适配器接口对后端控制器进行包装（适配），包装后即可对处理器进行执行，通过扩展处理器适配器可以执行多种类型的处理器，这里使用了适配器设计模式。</p><p>在 SpringMVC 中，HandlerAdapter 也有诸多实现类：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210528161420.png" alt=""></p><p><strong>SimpleControllerHandlerAdapter</strong></p><p>SimpleControllerHandlerAdapter简单控制器处理器适配器，所有实现了<code>org.springframework.web.servlet.mvc.Controller</code>接口的Bean通过此适配器进行适配。即 如果我们开发的接口是通过实现 Controller 接口来完成的（不是通过注解开发的接口），那么 HandlerAdapter 必须是 SimpleControllerHandlerAdapter。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>HttpRequestHandlerAdapter</strong></p><p>http请求处理器适配器，所有实现了<code>org.springframework.web.HttpRequestHandler</code> 接口的 Bean 通过此适配器进行适配</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController3</span> <span class="keyword">implements</span> <span class="title class_">HttpRequestHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----MyController3-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span> <span class="attr">id</span>=<span class="string">&quot;handlerMapping&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/hello3&quot;</span>&gt;</span>myController3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;</span> <span class="attr">id</span>=<span class="string">&quot;handlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="处理器适配器与处理器映射器的最佳实践"><a href="#处理器适配器与处理器映射器的最佳实践" class="headerlink" title="处理器适配器与处理器映射器的最佳实践"></a>处理器适配器与处理器映射器的最佳实践</h3><ul><li>组件自动扫描</li></ul><p>web 开发中，我们基本上不再通过 XML 或者 Java 配置来创建一个 Bean 的实例，而是直接通过组件扫描来实现 Bean 的配置，如果要扫描多个包，多个包之间用<code>,</code> 隔开即可：</p><p>spring配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz.springmvc02&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz.springmvc02&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HandlerMapping</li></ul><p>正常情况下，我们在项目中使用的是 RequestMappingHandlerMapping，这个是根据处理器中的注解，来匹配请求（即 @RequestMapping 注解中的 url 属性）。因为在上面我们都是通过实现类来开发接口的，相当于还是一个类一个接口，所以，我们可以通过 RequestMappingHandlerMapping 来做处理器映射器，这样我们可以在一个类中开发出多个接口。</p><ul><li>HandlerAdapter</li></ul><p>对于上面提到的通过 @RequestMapping 注解所定义出来的接口方法，这些方法的调用都是要通过 RequestMappingHandlerAdapter 这个适配器来实现</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;cwz&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要能够访问到这个接口，我们需要 RequestMappingHandlerMapping 才能定位到需要执行的方法，需要 RequestMappingHandlerAdapter，才能执行定位到的方法，修改 springmvc 的配置文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz.springmvc02&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot; id=&quot;requestMappingHandlerMapping&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot; id=&quot;requestMappingHandlerAdapter&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--可以代替上面两个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC中Controller的细节问题"><a href="#SpringMVC中Controller的细节问题" class="headerlink" title="SpringMVC中Controller的细节问题"></a>SpringMVC中Controller的细节问题</h2><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>这个注解用来标记一个接口，在接口开发中，使用最多的注解之一</p><ul><li>请求URL</li></ul><p>标记请求 URL 很简单，只需要在相应的方法上添加该注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>@RequestMapping(“/hello”)</code> 表示当请求地址为 /hello 的时候，这个方法会被触发。其中，地址可以是多个，就是可以多个地址映射到同一个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/hello&quot;,&quot;/hello2&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置，表示 /hello 和 /hello2 都可以访问到该方法。</p><h3 id="请求窄化"><a href="#请求窄化" class="headerlink" title="请求窄化"></a>请求窄化</h3><p>同一个项目中，会存在多个接口，例如订单相关的接口都是 <code>/order/xxx</code> 格式的，用户相关的接口都是 <code>/user/xxx</code>格式的。为了方便处理，这里的前缀（就是 /order、/user）可以统一在 Controller 上面处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当类上加了 @RequestMapping 注解之后，此时，要想访问到 hello ，地址就应该是<code>/user/hello</code></p><h3 id="请求方法限定"><a href="#请求方法限定" class="headerlink" title="请求方法限定"></a>请求方法限定</h3><p>默认情况下，使用 @RequestMapping 注解定义好的方法，可以被 GET 请求访问到，也可以被 POST 请求访问到，但是 DELETE 请求以及 PUT 请求不可以访问到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 @RequestMapping 注解，指定了该接口只能被 GET 请求访问到，此时，该接口就不可以被 POST 以及请求请求访问到了。强行访问会报405错误</p><h3 id="Controller的返回值"><a href="#Controller的返回值" class="headerlink" title="Controller的返回值"></a>Controller的返回值</h3><h4 id="返回ModelAndView"><a href="#返回ModelAndView" class="headerlink" title="返回ModelAndView"></a>返回ModelAndView</h4><p>如果是前后端不分的开发，大部分情况下，我们返回 ModelAndView，即数据模型+视图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;cwz&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Model 中，放我们的数据，然后在 ModelAndView 中指定视图名称。</p><p>hello.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hello $&#123;name&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="返回void"><a href="#返回void" class="headerlink" title="返回void"></a>返回void</h4><p>没有返回值，并不一定真的没有返回值，只是方法的返回值为 void，我们可以通过其他方式给前端返回。</p><p>这种方式也可以理解为 Servlet 中的那一套方案</p><ul><li>通过 HttpServletRequest 做服务端跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello2</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/hello.jsp&quot;</span>).forward(req,resp);<span class="comment">//服务器端跳转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 HttpServletResponse 做重定向</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello3</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/hello.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以自己手动指定响应头去实现重定向：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello3</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    resp.setStatus(<span class="number">302</span>);</span><br><span class="line">    resp.addHeader(<span class="string">&quot;Location&quot;</span>, <span class="string">&quot;/hello.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 HttpServletResponse 给出响应</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello4</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    resp.getWriter().write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式，既可以返回 JSON，也可以返回普通字符串。</p><h4 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h4><ul><li>返回逻辑视图名</li></ul><p>前面的 ModelAndView 可以拆分为两部分，Model 和 View，在 SpringMVC 中，Model 我们可以直接在参数中指定，然后返回值是逻辑视图名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello5</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;cwz&quot;</span>);<span class="comment">//这是数据模型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;<span class="comment">//表示去查找一个名为 hello 的视图</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务端跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/hello.jsp&quot;</span>;  <span class="comment">// forward 后面跟上跳转的路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户端跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/user/hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质上就是浏览器重定向</p><p>上面几种情况返回的字符串是有特殊的条件的，如需要<code>forward</code>等跳转。</p><p>如果一定要返回一个字符串，需要额外添加一个注意：@ResponseBody ，这个注解表示当前方法的返回值就是要展示出来返回值，没有特殊含义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello5&quot;,produces = &quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h3><h4 id="默认支持的参数类型"><a href="#默认支持的参数类型" class="headerlink" title="默认支持的参数类型"></a>默认支持的参数类型</h4><p>就是可以直接写在 @RequestMapping 所注解的方法中的参数类型，一共有四类：</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li><li>Model/ModelMap</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello2</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, HttpSession session, Model model, ModelMap modelMap)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在请求的方法中，默认的参数就是这几个，如果在方法中，刚好需要这几个参数，那么就可以把这几个参数加入到方法中。</p><h4 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h4><p>Integer、Boolean、Double 等等简单数据类型也都是支持的</p><p>在 /webapp/ 目录下创建 addbook.jsp 作为图书添加页面：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;添加图书&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/book/addbook2&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书名称&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书作者&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书价格&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;price&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>创建控制器，控制器提供两个功能，一个是访问 jsp 页面，另一个是提供添加接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">book</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addbook&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/addbook&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(String name, String author, Double price)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + author + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + price;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于 addBook方法只想返回字符串，所以需要给该方法添加 @ResponseBody 注解，表示这个方法到此为止，不用再去查找相关视图了。另外， POST 请求传上来的中文会乱码，所以，我们在 web.xml 中再额外添加一个编码过滤器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，浏览器中输入 <a href="http://localhost:8080/book/book">http://localhost:8080/book/book</a> ，就可以执行添加操作，服务端会打印出来相应的日志。</p><p>在上面的绑定中，有一个要求，表单中字段的 name 属性要和接口中的变量名一一对应，才能映射成功，否则服务端接收不到前端传来的数据。有一些特殊情况，我们的服务端的接口变量名可能和前端不一致，这个时候我们可以通过 @RequestParam 注解来解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/addbook&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook</span><span class="params">(<span class="meta">@RequestParam(&quot;bookname&quot;)</span> String name, String author, <span class="meta">@RequestParam(defaultValue = &quot;99.0&quot;)</span> Double price)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + author + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解中的<code>bookname</code>表示给 name这个变量取的别名，也就是说，name 将接收前端传来的 bookname 这个变量的值。</p><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><p>参数除了是简单数据类型之外，也可以是实体类。实际上，在开发中，大部分情况下，都是实体类。</p><p>当然对象中可能还有对象，图书作者是一个对象，有name、age属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Author <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(Author author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>服务端接收数据方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/addbook2&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook2</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> book.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Book 对象中，有一个 Author 属性，如何给 Author 属性传值呢？前端写法如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;添加图书&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/book/addbook2&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书名称&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书作者&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author.name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者年龄&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author.age&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书价格&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;price&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义参数绑定"><a href="#自定义参数绑定" class="headerlink" title="自定义参数绑定"></a>自定义参数绑定</h4><p>前面的转换，都是系统自动转换的，这种转换仅限于基本数据类型</p><p>特殊的数据类型，系统无法自动转换，例如日期是需要自己手动转换。</p><p>前端传一个日期到后端，后端不是用字符串接收，而是使用一个 Date 对象接收，这个时候就会出现参数类型转换失败。这个时候，需要我们手动定义参数类型转换器，将日期字符串手动转为一个 Date 对象。</p><p>自定义日期转换器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sdf.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在自定义的参数类型转换器中，将一个 String 转为 Date 对象，同时，将这个转换器注册为一个 Bean。</p><p>在SpringMVC中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myDateConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="集合类的参数"><a href="#集合类的参数" class="headerlink" title="集合类的参数"></a>集合类的参数</h4><ul><li>String数组</li></ul><p>String 数组可以直接用数组去接收，前端传递的时候，数组的传递其实就多相同的 key，这种一般用在 checkbox 中较多</p><p>例如添加爱好：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;添加图书&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/book/addbook2&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书名称&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书作者&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author.name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者年龄&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author.age&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者兴趣爱好&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;足球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;足球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;篮球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;篮球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;乒乓球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;乒乓球</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;出版时间&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;date&quot;</span> name=<span class="string">&quot;publishDate&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书价格&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;price&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在服务端用一个数组去接收 favorites 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/addbook2&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook2</span><span class="params">(Book book, String[] favorites)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> book.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，前端传来的数组对象，服务端不可以使用 List 集合去接收</p><ul><li>list集合</li></ul><p>如果需要使用 List 集合接收前端传来的数据，List 集合本身需要放在一个封装对象中，这个时候，List 中，可以是基本数据类型，也可以是对象</p><p>例如作者对象中有角色属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Author.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; favorites;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加作者时可以有多个角色：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;添加图书&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/book/addbook2&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书名称&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书作者&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author.name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者年龄&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author.age&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者兴趣爱好&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;足球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;足球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;篮球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;篮球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;乒乓球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;乒乓球</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者角色&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;管理员&quot;</span> name=<span class="string">&quot;author.roles[0].name&quot;</span>&gt;管理员</span><br><span class="line">                &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;1&quot;</span> name=<span class="string">&quot;author.roles[0].id&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;用户&quot;</span> name=<span class="string">&quot;author.roles[1].name&quot;</span>&gt;用户</span><br><span class="line">                &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;2&quot;</span> name=<span class="string">&quot;author.roles[1].id&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;出版时间&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;date&quot;</span> name=<span class="string">&quot;publishDate&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书价格&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;price&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>服务端直接接收数据即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/addbook2&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addBook2</span><span class="params">(Book book, String[] favorites)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> book.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Map</li></ul><p>相对于实体类而言，Map 是一种比较灵活的方案，但是，Map 可维护性比较差，因此一般不推荐使用。</p><p>给上述的Book实体类添加信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="keyword">private</span> Date publishDate;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前端，通过如下方式给 info 这个 Map 赋值：添加出版社和责任编辑属性：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;添加图书&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/book/addbook2&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书名称&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书作者&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author.name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者年龄&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;author.age&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者兴趣爱好&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;足球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;足球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;篮球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;篮球</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;乒乓球&quot;</span> name=<span class="string">&quot;author.favorites&quot;</span>&gt;乒乓球</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;作者角色&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;管理员&quot;</span> name=<span class="string">&quot;author.roles[0].name&quot;</span>&gt;管理员</span><br><span class="line">                &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;1&quot;</span> name=<span class="string">&quot;author.roles[0].id&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;checkbox&quot;</span> value=<span class="string">&quot;用户&quot;</span> name=<span class="string">&quot;author.roles[1].name&quot;</span>&gt;用户</span><br><span class="line">                &lt;input type=<span class="string">&quot;hidden&quot;</span> value=<span class="string">&quot;2&quot;</span> name=<span class="string">&quot;author.roles[1].id&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;出版时间&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;date&quot;</span> name=<span class="string">&quot;publishDate&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;出版社&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;info[&#x27;publish&#x27;]&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;责任编辑&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;info[&#x27;editor&#x27;]&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;图书价格&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;price&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>SpringMVC 中对文件上传做了封装，我们可以更加方便的实现文件上传。从 Spring3.1 开始，对于文件上传，提供了两个处理器：</p><ul><li>CommonsMultipartResolver</li><li>StandardServletMultipartResolver</li></ul><p>第一种处理器兼容性好，可以兼容 Servlet3.0 之前的版本，但是它依赖了 commons-fileupload 这个第三方工具，所以如果使用这个，一定要添加 commons-fileupload 依赖。</p><p>第二个处理器兼容性较差，它适用于 Servlet3.0 之后的版本，它不依赖第三方工具，使用它，可以直接做文件上传。</p><h3 id="CommonsMultipartResolver"><a href="#CommonsMultipartResolver" class="headerlink" title="CommonsMultipartResolver"></a>CommonsMultipartResolver</h3><p>首先添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 SpringMVC 的配置文件中，配置 MultipartResolver：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>创建 jsp 页面：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/upload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>注意文件上传请求是 POST 请求，enctype 一定是 multipart/form-data</p><p>文件上传接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;/yyyy/MM/dd/&quot;</span>);</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fileUpload</span><span class="params">(MultipartFile file, HttpServletRequest req)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备文件夹</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> req.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>) + format;</span><br><span class="line">        <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">        <span class="keyword">if</span> (!folder.exists())&#123;</span><br><span class="line">            folder.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 准备文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">// 存储</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(folder, newName));</span><br><span class="line">            <span class="comment">// 组装 url</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getScheme() + <span class="string">&quot;://&quot;</span> + req.getServerName() + <span class="string">&quot;:&quot;</span> + req.getServerPort() + format + newName;</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里还有一个小问题，在 SpringMVC 中，静态资源默认都是被自动拦截的，无法访问，意味着上传成功的图片无法访问，因此，还需要我们在 SpringMVC 的配置文件中，再添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>我们还可以自己手动配置文件上传大小等：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认的编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传的总文件大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1048576&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--上传的单个文件大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSizePerFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1048576&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内存中最大的数据量，超过这个数据量，数据就要开始往硬盘中写了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4096&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--临时目录，超过 maxInMemorySize 配置的大小后，数据开始往临时目录写，等全部上传完成后，再将数据合并到正式的文件上传目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;uploadTempDir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;file:///E:\\tmp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="StandardServletMultipartResolver"><a href="#StandardServletMultipartResolver" class="headerlink" title="StandardServletMultipartResolver"></a>StandardServletMultipartResolver</h3><p>这种方式不需要其他jar依赖</p><p>在SpringMVC 的配置文件中，配置这个 Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.support.StandardServletMultipartResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，注意，这个 Bean 无法直接配置上传文件大小等限制。需要在 web.xml 中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件保存的临时目录，这个目录系统不会主动创建--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>E:\\temp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--上传的单个文件大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--上传的总文件大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>1048576<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个就是内存中保存的文件最大大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>多文件上传分为两种，一种是 key 相同的文件，另一种是 key 不同的文件</p><h4 id="key相同的文件"><a href="#key相同的文件" class="headerlink" title="key相同的文件"></a>key相同的文件</h4><p>这种上传，前端页面一般如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/upload2&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;files&quot;</span> multiple&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>主要是 input 节点中多了 multiple 属性。后端用一个数组来接收文件即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload2</span><span class="params">(MultipartFile[] files, HttpServletRequest req)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> req.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>) + format;</span><br><span class="line">    <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">    <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">        folder.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(folder, newName));</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getScheme() + <span class="string">&quot;://&quot;</span> + req.getServerName() + <span class="string">&quot;:&quot;</span> + req.getServerPort() + format + newName;</span><br><span class="line">            System.out.println(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="key不同的文件"><a href="#key不同的文件" class="headerlink" title="key不同的文件"></a>key不同的文件</h4><p>key 不同的，一般前端定义如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/upload3&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file1&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file2&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>在后端用不同的变量来接收就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload3</span><span class="params">(MultipartFile file1, MultipartFile file2, HttpServletRequest req)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>项目中，可能会抛出多个异常，我们不可以直接将异常的堆栈信息展示给用户，主要是用户体验不好、不安全。</p><p>所以，针对异常，我们可以自定义异常处理，SpringMVC 中，针对全局异常也提供了相应的解决方案，主要是通过 @ControllerAdvice 和 @ExceptionHandler 两个注解来处理的。</p><p>自定义异常，只需要提供一个异常处理类即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span><span class="comment">//表示这是一个增强版的 Controller，主要用来做全局数据处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">fileuploadException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        error.addObject(<span class="string">&quot;error&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ControllerAdvice 表示这是一个增强版的 Controller，主要用来做全局数据处理</li><li>@ExceptionHandler 表示这是一个异常处理方法，这个注解的参数，表示需要拦截的异常，参数为 Exception 表示拦截所有异常，这里也可以具体到某一个异常，如果具体到某一个异常，那么发生了其他异常则不会被拦截到。</li><li>异常方法的定义，和 Controller 中方法的定义一样，可以返回 ModelAndview，也可以返回 String 或者 void</li></ul><h2 id="服务端数据校验"><a href="#服务端数据校验" class="headerlink" title="服务端数据校验"></a>服务端数据校验</h2><h3 id="普通校验"><a href="#普通校验" class="headerlink" title="普通校验"></a>普通校验</h3><p>需要加入校验需要的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 SpringMVC 的配置文件中配置校验的 Bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;validatorFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;providerClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.validator.HibernateValidator&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;validatorFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>配置时，提供一个 LocalValidatorFactoryBean 的实例，然后 Bean 的校验使用 HibernateValidator</p><p>提供一个添加学生的页面：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/addstudent&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生编号：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生邮箱：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生年龄：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>在这里需要提交的数据中，假设学生编号不能为空，学生姓名长度不能超过 10 且不能为空，邮箱地址要合法，年龄不能超过 150。那么在定义实体类的时候，就可以加入这个判断条件了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size(min = 2,max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Max(150)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略get、set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@NotNull 表示这个字段不能为空</li><li>@Size 中描述了这个字符串长度的限制</li><li>@Email 表示这个字段的值必须是一个邮箱地址</li><li>@Max 表示这个字段的最大值</li></ul><p>接下来，在 Controller 中定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addstudent&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(<span class="meta">@Validated</span> Student student, BindingResult result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//校验未通过，获取所有的异常信息并展示出来</span></span><br><span class="line">            List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line">            <span class="keyword">for</span> (ObjectError allError : allErrors) &#123;</span><br><span class="line">                System.out.println(allError.getObjectName()+<span class="string">&quot;:&quot;</span>+allError.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Validated 表示 Student 中定义的校验规则将会生效</li><li>BindingResult 表示出错信息，如果这个变量不为空，表示有错误，否则校验通过</li></ul><p>默认情况下，打印出来的错误信息时系统默认的错误信息，这个错误信息，我们也可以自定义</p><p>在 resources 目录下新建一个 MyMessage.properties 文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student.id.notnull</span>=<span class="string">id 不能为空</span></span><br><span class="line"><span class="attr">student.name.notnull</span>=<span class="string">name 不能为空</span></span><br><span class="line"><span class="attr">student.name.length</span>=<span class="string">name 最小长度为 2 ，最大长度为 10</span></span><br><span class="line"><span class="attr">student.email.error</span>=<span class="string">email 地址非法</span></span><br><span class="line"><span class="attr">student.age.error</span>=<span class="string">年龄不能超过 150</span></span><br></pre></td></tr></table></figure><p>在 SpringMVC 配置中，加载这个配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.validation.beanvalidation.LocalValidatorFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;validatorFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;providerClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.validator.HibernateValidator&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;validationMessageSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bundleMessageSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ReloadableResourceBundleMessageSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basenames&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:MyMessage<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">&quot;validatorFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>最后，在实体类上的注解中，加上校验出错时的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;&#123;student.id.notnull&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;&#123;student.name.notnull&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 2,max = 10,message = &quot;&#123;student.name.length&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Email(message = &quot;&#123;student.email.error&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Max(value = 150,message = &quot;&#123;student.age.error&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略get、set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后，如果校验再出错，就会展示我们自己的出错信息了。</p><h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3><p>校验规则都是定义在实体类上面的，但是在不同的数据提交环境下，校验规则可能不一样。</p><p>例如，用户的 id 是自增长的，添加的时候，可以不用传递用户 id，但是修改的时候则必须传递用户 id，这种情况下，就需要使用分组校验。</p><p>分组校验，首先需要定义校验组，所谓的校验组，其实就是空接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ValidationGroup1</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ValidationGroup2</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实体类中，指定每一个校验规则所属的组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;&#123;student.id.notnull&#125;&quot;,groups = ValidationGroup1.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;&#123;student.name.notnull&#125;&quot;,groups = &#123;ValidationGroup1.class, ValidationGroup2.class&#125;)</span></span><br><span class="line">    <span class="meta">@Size(min = 2,max = 10,message = &quot;&#123;student.name.length&#125;&quot;,groups = &#123;ValidationGroup1.class, ValidationGroup2.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Email(message = &quot;&#123;student.email.error&#125;&quot;,groups = &#123;ValidationGroup1.class, ValidationGroup2.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Max(value = 150,message = &quot;&#123;student.age.error&#125;&quot;,groups = &#123;ValidationGroup2.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略get、set </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 group 中指定每一个校验规则所属的组，一个规则可以属于一个组，也可以属于多个组</p><p>最后在接收参数的地方，指定校验组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addstudent&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(<span class="meta">@Validated(ValidationGroup2.class)</span> Student student, BindingResult result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//校验未通过，获取所有的异常信息并展示出来</span></span><br><span class="line">            List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line">            <span class="keyword">for</span> (ObjectError allError : allErrors) &#123;</span><br><span class="line">                System.out.println(allError.getObjectName()+<span class="string">&quot;:&quot;</span>+allError.getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后，属于 ValidationGroup2 这个组的校验规则，才会生效。</p><h2 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h2><p>数据回显就是当用户数据提交失败时，自动填充好已经输入的数据。一般来说，如果使用 Ajax 来做数据提交，基本上是没有数据回显这个需求的，但是如果是通过表单做数据提交，那么数据回显就非常有必要了。</p><h3 id="简单数据类型-1"><a href="#简单数据类型-1" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>看一下student.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/addstudent&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生编号：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;$&#123;id&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生邮箱：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;$&#123;email&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生年龄：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;$&#123;age&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>在接收数据时，使用简单数据类型去接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/addstudent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addStudent2</span><span class="params">(Integer id, String name, String email, Integer age, Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;email&quot;</span>, email);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;student&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式，相当于框架没有做任何工作，就是我们手动做数据回显的。此时访问页面，服务端会再次定位到该页面，而且数据已经预填好。</p><h3 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h3><p>SpringMVC 在页面跳转时，会自动将对象填充进返回的数据中</p><p>student.jsp：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/addstudent&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生编号：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;$&#123;student.id&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;$&#123;student.name&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生邮箱：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;$&#123;student.email&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生年龄：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;$&#123;student.age&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>这 student 就是服务端接收数据的变量名，服务端的变量名和这里的 student 要保持一直。服务端定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/addstudent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addStudent</span><span class="params">(<span class="meta">@Validated(ValidationGroup2.class)</span> Student student, BindingResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//校验未通过，获取所有的异常信息并展示出来</span></span><br><span class="line">        List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line">        <span class="keyword">for</span> (ObjectError allError : allErrors) &#123;</span><br><span class="line">            System.out.println(allError.getObjectName()+<span class="string">&quot;:&quot;</span>+allError.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>student 这个变量会被自动填充到返回的 Model 中。变量名就是填充时候的 key。如果想自定义这个 key，可以在参数中写出来 Model，然后手动加入 Student 对象，就像简单数据类型回显那样。</p><h3 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h3><p>@ModelAttribute 这个注解，主要有两方面的功能：</p><ol><li>在数据回显时，给变量定义别名</li><li>定义全局数据</li></ol><p><strong>定义别名</strong></p><p>在数据回显时，给变量定义别名，非常容易，直接加这个注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/addstudent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addStudent</span><span class="params">(<span class="meta">@ModelAttribute(&quot;s&quot;)</span> <span class="meta">@Validated(ValidationGroup2.class)</span> Student student, BindingResult result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//校验未通过，获取所有的异常信息并展示出来</span></span><br><span class="line">        List&lt;ObjectError&gt; allErrors = result.getAllErrors();</span><br><span class="line">        <span class="keyword">for</span> (ObjectError allError : allErrors) &#123;</span><br><span class="line">            System.out.println(allError.getObjectName()+<span class="string">&quot;:&quot;</span>+allError.getDefaultMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样定义完成后，在前端再次访问回显的变量时，变量名称就不是 student 了，而是 s：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/addstudent&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生编号：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;$&#123;s.id&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;$&#123;s.name&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生邮箱：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span> value=<span class="string">&quot;$&#123;s.email&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学生年龄：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;$&#123;s.age&#125;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>定义全局数据</strong></p><p>假设有一个 Controller 中有很多方法，每个方法都会返回数据给前端，但是每个方法返回给前端的数据又不太一样，虽然不太一样，但是没有方法的返回值又有一些公共的部分。可以将这些公共的部分提取出来单独封装成一个方法，用 @ModelAttribute 注解来标记。</p><p>在一个controller中加入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute(&quot;info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;setcreed&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;https://setcree.gitee.io&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户访问当前 Controller 中的任意一个方法，在返回数据时，都会将添加了 @ModelAttribute 注解的方法的返回值，一起返回给前端。@ModelAttribute 注解中的 info 表示返回数据的 key。</p><h2 id="json处理"><a href="#json处理" class="headerlink" title="json处理"></a>json处理</h2><h3 id="返回json"><a href="#返回json" class="headerlink" title="返回json"></a>返回json</h3><p>目前主流的 JSON 处理工具主要有三种：jackson、gson、fastjson</p><ul><li>在 SpringMVC 中，对 jackson 和 gson 都提供了相应的支持，就是如果使用这两个作为 JSON 转换器，只需要添加对应的依赖就可以了，返回的对象和返回的集合、Map 等都会自动转为 JSON。</li><li>如果使用 fastjson，除了添加相应的依赖之外，还需要自己手动配置 HttpMessageConverter 转换器。</li><li>jackson、gson也是使用 HttpMessageConverter 转换器，是SpringMVC 自动提供的，但SpringMVC 没有给 fastjson 提供相应的转换器。</li></ul><h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><p>在 SpringMVC 中使用 jackson ，只需要添加 jackson 的依赖即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.12</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>依赖添加成功后，凡是在接口中直接返回的对象，集合等等，都会自动转为 JSON。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略get、set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    book.setId(<span class="number">1</span>);</span><br><span class="line">    book.setName(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">    book.setAuthor(<span class="string">&quot;罗贯中&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里返回一个对象，但是在前端接收到的则是一个 JSON 字符串，这个对象会通过 HttpMessageConverter 自动转为 JSON 字符串。</p><p>如果想返回一个 JSON 数组，写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAllBooks</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Book&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(i);</span><br><span class="line">        book.setName(<span class="string">&quot;三国演义:&quot;</span> + i);</span><br><span class="line">        book.setAuthor(<span class="string">&quot;罗贯中:&quot;</span> + i);</span><br><span class="line">        list.add(book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加了 jackson ，就能够自动返回 JSON，这个依赖于一个名为 HttpMessageConverter 的类，这本身是一个接口，从名字上就可以看出，它的作用是 Http 消息转换器，既然是消息转换器，它提供了两方面的功能：</p><ul><li>将返回的对象转为json</li><li>将前端提交上来的json转为对象</li></ul><p>但是，HttpMessageConverter 只是一个接口，由各个 JSON 工具提供相应的实现，在 jackson 中，实现的名字叫做<code>MappingJackson2HttpMessageConverter</code>，而这个东西的初始化，则由 SpringMVC 来完成。除非自己有一些自定义配置的需求，否则一般来说不需要自己提供<code>MappingJackson2HttpMessageConverter</code>。</p><p>在上面的例子中，book对象有一个出版日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略get、set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在构造 Book 时添加日期属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    book.setId(<span class="number">1</span>);</span><br><span class="line">    book.setName(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">    book.setAuthor(<span class="string">&quot;罗贯中&quot;</span>);</span><br><span class="line">    book.setPublish(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 /book 接口，返回的 json 格式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210602102332.png" alt=""></p><p>如果我们想自己定制返回日期的格式，简单的办法，可以通过添加注解来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;,timezone = &quot;Asia/Shanghai&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就可以定制返回的日期格式了。</p><p>但是，这种方式有一个弊端，这个注解可以加在属性上，也可以加在类上，也就说，最大可以作用到一个类中的所有日期属性上。如果项目中有很多实体类都需要做日期格式化，使用这种方式就比较麻烦了，这个时候，我们可以自己提供一个 jackson 的 HttpMesageConverter 实例，在这个实例中，自己去配置相关属性，这里的配置将是一个全局配置。</p><p>在SpringMVC配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;httpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span> <span class="attr">id</span>=<span class="string">&quot;httpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.text.SimpleDateFormat&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeZone&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完成后，去掉 Book 实体类中日期格式化的注解，再进行测试，结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210602101016.png" alt=""></p><h4 id="gson"><a href="#gson" class="headerlink" title="gson"></a>gson</h4><p>gson 是 Google 推出的一个 JSON 解析器，主要在 Android 开发中使用较多，不过，Web 开发中也是支持这个的，而且 SpringMVC 还针对 Gson 提供了相关的自动化配置，我们只要添加依赖就可以使用了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果项目中，同时存在 jackson 和 gson 的话，那么默认使用的是 jackson</p><p>在 <code>org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter</code> 类的构造方法中，加载顺序就是先加载 jackson 的 HttpMessageConverter，后加载 gson 的 HttpMessageConverter</p><p>加完依赖之后，就可以直接返回 JSON 字符串了。使用 Gson 时，如果想做自定义配置，则需要自定义 HttpMessageConverter。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;httpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.GsonHttpMessageConverter&quot;</span> <span class="attr">id</span>=<span class="string">&quot;httpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gson&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.google.gson.Gson&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;gsonBuilder&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;create&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.google.gson.GsonBuilder&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gsonBuilder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h4><p>fastjson 号称最快的 JSON 解析器，但是也是这三个中 BUG 最多的一个。</p><p>SpringMVC 并没针对 fastjson 提供相应的 HttpMessageConverter，所以，fastjson 在使用时，一定要自己手动配置 HttpMessageConverter。</p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 SpringMVC 的配置文件中配置 HttpMessageConverter：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;httpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span> <span class="attr">id</span>=<span class="string">&quot;httpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;fastJsonConfig&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.config.FastJsonConfig&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>fastjson 默认中文乱码，添加如下配置解决：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;httpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;</span> <span class="attr">id</span>=<span class="string">&quot;httpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;fastJsonConfig&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.fastjson.support.config.FastJsonConfig&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="接收json"><a href="#接收json" class="headerlink" title="接收json"></a>接收json</h3><p>浏览器传来的参数，可以是 key/value 形式的，也可以是一个 JSON 字符串。在 Jsp/Servlet 中，我们接收 key/value 形式的参数，一般是通过 getParameter 方法。如果客户端是 JSON 数据，我们可以通过如下格式进行解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/addbook2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook2</span><span class="params">(HttpServletRequest req)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> om.readValue(req.getInputStream(), Book.class);</span><br><span class="line">    System.out.println(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种解析方式有点麻烦，在 SpringMVC 中，我们可以通过一个注解来快速的将一个 JSON 字符串转为一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/addbook3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBook3</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">    System.out.println(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以直接收到前端传来的 JSON 字符串了</p><h2 id="SpringMVC对RESTful的支持"><a href="#SpringMVC对RESTful的支持" class="headerlink" title="SpringMVC对RESTful的支持"></a>SpringMVC对RESTful的支持</h2><p>SpringMVC 对 RESTful 提供了非常全面的支持，主要有如下几个注解：</p><ul><li>@RestController</li></ul><p>这个注解是一个组合注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment"> * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor(annotation = Controller.class)</span></span><br><span class="line">String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般，直接用 @RestController 来标记 Controller，可以不使用 @Controller。</p><p>请求方法中，提供了常见的请求方法：</p><ul><li>@PostMapping</li><li>@GetMapping</li><li>@PutMapping</li><li>@DeleteMapping</li></ul><p>另外还有一个提取请求地址中的参数的注解 @PathVariable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/book/&#123;id&#125;&quot;)</span>  <span class="comment">//http://localhost:8080/book/2</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getBookById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">    book.setId(id);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数 2 将被传递到 id 这个变量上</p><h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><p>在 SpringMVC 中，静态资源，默认都是被拦截的，例如 html、js、css、jpg等等，都是无法直接访问的。因为所有请求都被拦截了，所以，针对静态资源，我们要做额外处理，处理方式很简单，直接在 SpringMVC 的配置文件中，添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/static/html/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/static/html/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>mapping 表示映射规则，也是拦截规则，就是说，如果请求地址是 /static/html 这样的格式的话，那么对应的资源就去 /static/html/ 这个目录下查找。</p><p><code>**</code>通配符表示匹配多层路径</p><p>为了省事，一般这样配：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>SpringMVC 中的拦截器，相当于 Jsp/Servlet 中的过滤器，只不过拦截器的功能更为强大。</p><p>拦截器的定义非常容易：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个是请求预处理的方法，只有当这个方法返回值为 true 的时候，后面的方法才会执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor1:preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor1:postHandle&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor1:afterCompletion&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor2</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个是请求预处理的方法，只有当这个方法返回值为 true 的时候，后面的方法才会执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor2:preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor2:postHandle&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor2:afterCompletion&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器定义好之后，需要在 SpringMVC 的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myInterceptor2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果存在多个拦截器，拦截规则如下：</p><ul><li>preHandle 按拦截器定义顺序调用</li><li>postHandler 按拦截器定义逆序调用</li><li>afterCompletion 按拦截器定义逆序调用</li><li>postHandler 在拦截器链内所有拦截器返成功调用</li><li>afterCompletion 只有 preHandle 返回 true 才调用</li></ul><h1 id="MyBastis"><a href="#MyBastis" class="headerlink" title="MyBastis"></a>MyBastis</h1><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p><strong>JDBC存在的问题</strong></p><ul><li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解决此问题</li><li>Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java 代码</li><li>……</li></ul><p>Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java 代码</p><p><strong>MyBatis介绍</strong></p><p>MyBatis 官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><p>MyBatis 是一个优秀的持久层框架，它对 jdbc 的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建 connection、创建 statement、手动设置参数、结果集检索等 jdbc 繁杂的过程代码。Mybatis 通过 xml 或注解的方式将要执行的各种 statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过 java 对象和 statement 中的 sql 进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射成 java 对象并返回。</p><p>与其他的对象关系映射框架不同，MyBatis 并没有将 Java 对象与数据库表关联起来，而是将 Java 方法与 SQL 语句关联。MyBatis 允许用户充分利用数据库的各种功能，例如存储过程、视图、各种复杂的查询以及某数据库的专有特性。如果要对遗留数据库、不规范的数据库进行操作，或者要完全控制 SQL 的执行，MyBatis 是一个不错的选择。</p><h2 id="Mybatis简单使用"><a href="#Mybatis简单使用" class="headerlink" title="Mybatis简单使用"></a>Mybatis简单使用</h2><p>首先来准备一个数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">8</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `<span class="keyword">user</span>`(`id`,`username`,`address`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;cwz&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建Maven工程，添加MyBatis依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，准备一个 Mapper 文件，Mapper 是用来在 MyBatis 中定义 SQL 的 XML 配置文件，由于在实际开发中，我们经常需要使用到 Mapper，经常需要自己创建 Mapper 文件，因此，我们可以将 Mapper 文件做成一个模板。具体操作如下：</p><p>在 IDEA 中，选择 resources 目录，右键单击，New–&gt;Edit File Templates:</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210602161104.png" alt=""></p><p>然后添加一个新的模板进来，给模板取名，同时设置扩展名，并将如下内容拷贝到模板中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;#[[$namespace$]]#&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样创建Mapper文件就很方便了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis01.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个新的 mapper ，需要首先给它取一个 namespace，这相当于是一个分隔符，因为我们在项目中，会存在很多个 Mapper，每一个 Mapper 中都会定义相应的增删改查方法，为了避免方法冲突，也为了便于管理，每一个 Mapper 都有自己的 namespace，而且这个 namespace 不可以重复。</p><p>接下来，在 Mapper 中，定义一个简单的查询方法，根据 所有用户：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis01.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis01.model.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id 表示查询方法的唯一标识符，resultType 定义了返回值的类型</p><p>定义的User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略get、set、toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，创建 MyBatis 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test1?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/cwz/mybatis01/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个配置文件中，我们只需要配置 environments 和 mapper 即可，environment 就是 MyBatis 所连接的数据库的环境信息，它放在一个 environments 节点中，意味着 environments 中可以有多个 environment，为社么需要多个呢？开发、测试、生产，不同环境各一个 environment，每一个 environment 都有一个 id，也就是它的名字，然后，在 environments 中，通过 default 属性，指定你需要的 environment。每一个 environment 中，定义一个数据的基本连接信息。</p><p>在 mappers 节点中，定义 Mapper，也就是指定我们上一步所写的 Mapper 的路径。</p><p><strong>注意：</strong>一般情况下我们把mapper文件与接口放在一起，但如果mapper文件不放在资源文件夹resources下，可能会报错，这是maven的问题。解决方案就是在pom.xml中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">&quot;com.cwz.mybatis01.mapper.UserMapper.getAllUser&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先，我们加载主配置文件，生成一个 SqlSessionFactory，再由 SqlSessionFactory 生成一个 SqlSession，一个 SqlSession 就相当于是我们的一个会话，类似于 JDBC 中的一个连接，在 SQL 操作完成后，这个会话是可以关闭的。</li><li>在这里，SqlSessionFactoryBuilder 用于创建 SqlSessionFacoty，SqlSessionFacoty 一旦创建完成就不需要 SqlSessionFactoryBuilder 了，因为 SqlSession 是通过 SqlSessionFactory 生产，所以可以将 SqlSessionFactoryBuilder 当成一个工具类使用，最佳使用范围是方法范围即方法体内局部变量。</li><li>SqlSessionFactory 是一个接口，接口中定义了 openSession 的不同重载方法，SqlSessionFactory 的最佳使用范围是整个应用运行期间，一旦创建后可以重复使用，通常以单例模式管理 SqlSessionFactory。</li><li>SqlSession 中封装了对数据库的操作</li></ul><p>对SqlSessionFactory进行封装：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSessionFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用log4j日志</strong></p><p>使用log4j需要添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在resources下新建日志文件log4j.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">debug, stdout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">[%-5p] %d&#123;yyyy-MM-dd&#125; method:%l%n%m%n</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis增删改查"><a href="#MyBatis增删改查" class="headerlink" title="MyBatis增删改查"></a>MyBatis增删改查</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>添加记录，id 有两种不同的处理方式，一种就是自增长，另一种则是 Java 代码传一个 ID 进来。这个 ID可以是一个UUID，也可以是其他的自定义的ID。在 MyBatis 中，对这两种方式都提供了相应的支持。</p><p><strong>主键自增长</strong></p><p>首先我们在 Mapper 中，添加 SQL 插入语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address) values (#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里有一个 parameterType 表示传入的参数类型。参数都是通过 # 来引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;com.cwz.mybatis.mapper.addUser&quot;</span>, user);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，SQL 插入完成后，一定要提交，即 sqlSession.commit()</p><p><strong>使用UUID做主键</strong></p><p>使用 UUID 做主键，又有两种不同的思路，第一种思路，就是在 Java 代码中生成 UUID，直接作为参数传入到 SQL 中，这种方式就和传递普通参数一样，另一种方式，就是使用 MySQL 自带的 UUID 函数来生成 UUID。</p><p>使用 MySQL 自带的 UUID 函数，整体思路是这样：首先调用 MySQL 中的 UUID 函数，获取到一个 UUID，然后，将这个 UUID 赋值给 User 对象的 ID 属性，然后再去执行 SQL 插入操作，再插入时使用这个 UUID。</p><p>mapper文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        select uuid();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user (id,username,address) values (#&#123;id&#125;,#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述xml文件中参数：</p><ul><li>selectKey 表示查询 key</li><li>keyProperty 属性表示将查询的结果赋值给传递进来的 User 对象的 id 属性</li><li>resultType 表示查询结果的返回类型</li><li>order 表示这个查询操作的执行时机，BEFORE 表示这个查询操作在 insert 之前执行</li><li>在 selectKey 节点的外面定义 insert 操作</li></ul><p>最后调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;com.cwz.mybatis.mapper.addUser&quot;</span>, user);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>在 UserMapper 中定义删除 SQL：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Java 代码中调用该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> sqlSession.delete(<span class="string">&quot;com.cwz.mybatis.mapper.deleteUserById&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(delete);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>查一条数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;com.cwz.mybatis.mapper.UserMapper.getUserById&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis-架构介绍"><a href="#MyBatis-架构介绍" class="headerlink" title="MyBatis 架构介绍"></a>MyBatis 架构介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210603095333.png" alt=""></p><ul><li>mybatis 配置:mybatis-config.xml，此文件作为 mybatis 的全局配置文件，配置了 mybatis 的运行环境等信息。另一个 mapper.xml 文件即 sql 映射文件，文件中配置了操作数据库的 sql 语句。此文件需要在 mybatis-config.xml 中加载</li><li>通过 mybatis 环境等配置信息构造 SqlSessionFactory 即会话工厂</li><li>由会话工厂创建 sqlSession 即会话，操作数据库需要通过 sqlSession 进行</li><li>mybatis 底层自定义了 Executor 执行器接口操作数据库，Executor 接口有两个实现，一个是基本执行器、一个是缓存执行器</li><li>Mapped Statement 也是 mybatis 一个底层封装对象，它包装了 mybatis 配置信息及 sql 映射信息等。mapper.xml 文件中一个 sql 对应一个 Mapped Statement 对象，sql 的 id 即是Mapped statement 的 id</li><li>Mapped Statement 对 sql 执行输入参数进行定义，包括 HashMap、基本类型、pojo，Executor 通过 Mapped Statement 在执行 sql 前将输入的 java 对象映射至 sql 中，输入参数映射就是 jdbc 编程中对 preparedStatement 设置参数</li><li>Mapped Statement 对 sql 执行输出结果进行定义，包括 HashMap、基本类型、pojo，Executor 通过 Mapped Statement 在执行 sql 后将输出结果映射至 java 对象中，输出结果映射过程相当于 jdbc 编程中对结果的解析处理过程</li></ul><h2 id="MyBatis中主键回填的两种实现方式"><a href="#MyBatis中主键回填的两种实现方式" class="headerlink" title="MyBatis中主键回填的两种实现方式"></a>MyBatis中主键回填的两种实现方式</h2><p>在数据添加的过程中，我们经常需要添加完数据之后，需要获取刚刚添加的数据 id</p><h3 id="使用JDBC"><a href="#使用JDBC" class="headerlink" title="使用JDBC"></a>使用JDBC</h3><p>JDBC 中实现主键回填，主要是在构造 PreparedStatement 时指定需要主键回填，然后在插入成功后，查询刚刚插入数据的 id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    con = DBUtils.getConnection();</span><br><span class="line">    ps = con.prepareStatement(<span class="string">&quot;INSERT INTO person(username,password,money) VALUES(?,?,?)&quot;</span>, PreparedStatement.RETURN_GENERATED_KEYS);</span><br><span class="line">    ps.setObject(<span class="number">1</span>, person.getUsername());</span><br><span class="line">    ps.setObject(<span class="number">2</span>, person.getPassword());</span><br><span class="line">    ps.setObject(<span class="number">3</span>, person.getMoney());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">    rs = ps.getGeneratedKeys();</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">        id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造 PreparedStatement 时，多了一个参数，指定了需要主键回填</li><li>在更新操作执行完成之后，调用 getGeneratedKeys ，然后又会获取到一个 ResultSet 对象，从而可以获取到刚刚插入数据的id</li></ul><h3 id="MyBatis的写法"><a href="#MyBatis的写法" class="headerlink" title="MyBatis的写法"></a>MyBatis的写法</h3><p>方法1：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address) values (#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式比较简单，就是在插入节点上添加 useGeneratedKeys 属性，同时设置接收回传主键的属性。配置完成后，我们执行一个插入操作，插入时传入一个对象，插入完成后，这个对象的 id 就会被自动赋值，值就是刚刚插入成功的id。</p><p>方法2：</p><p>利用MySQL自带的 <code>last_insert_id()</code> 函数查询刚刚插入的id</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        SELECT LAST_INSERT_ID()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user (username,address) values (#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式是在 insert 节点中添加 selectKey 来实现主键回填</p><p>selectKey 节点中的 SQL可以在插入之前或者插入之后执行，这可以通过设置节点的 Order 属性为 AFTER 或者 BEFORE 来实现</p><h2 id="MyBatis-Mapper"><a href="#MyBatis-Mapper" class="headerlink" title="MyBatis Mapper"></a>MyBatis Mapper</h2><h3 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h3><p>之前简单写的增删改查 冗余代码太多。比如我想写一个UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> SqlSessionFactoryUtils.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) sqlSession.selectOne(<span class="string">&quot;com.cwz.mybatis.mapper.UserDao.getUserById&quot;</span>, id);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;com.cwz.mybatis.mapper.UserDao.addUser&quot;</span>, user);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> insert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">deleteUserById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> sqlSession.delete(<span class="string">&quot;com.cwz.mybatis.mapper.UserDao.deleteUserById&quot;</span>, id);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> delete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> sqlSession.delete(<span class="string">&quot;com.cwz.mybatis.mapper.UserDao.updateUser&quot;</span>, user);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> delete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;com.cwz.mybatis.mapper.UserDao.getAllUser&quot;</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与之对应的UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis.mapper.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,address) values (#&#123;username&#125;,#&#123;address&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125; where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码有很多优化的地方，比如：每个方法中都要获取 SqlSession，然后要commit之类的操作。我们可以将当前方法简化成一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">deleteUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口对应的mapper文件内容还是不变。</p><p>这个接口提供了 UserDao 所需要的最核心的东西，根据这个接口，就可以自动生成 UserDao：</p><ul><li>UserDao 中定义了 SqlSessionFactory，这是一套固定的代码</li><li>UserDao 中定义了 SqlSessionFactory，这是一套固定的代码</li></ul><p>在MyBatis配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test1?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.cwz.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>值得注意的是：</p><p>默认情况下，Maven 要求我们将 XML 配置、properties 配置等，都放在 resources 目录下，如果我们强行放在 java 目录下，默认情况下，打包的时候这个配置文件会被自动忽略掉，我们可以这样解决：</p><ul><li>在pom.xml中添加配置，让 Maven 不要忽略我在 java 目录下的 XML 配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>手动在 resources 目录下，创建一个和 UserMapper 接口相同的目录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210603101147.png" alt=""></p><h3 id="Mapper映射文件"><a href="#Mapper映射文件" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h3><p>mapper映射文件有很多的参数使用细节</p><h4 id="parameterType"><a href="#parameterType" class="headerlink" title="parameterType"></a>parameterType</h4><p>这个表示输入的参数类型</p><h5 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$和#的区别"></a><code>$</code>和<code>#</code>的区别</h5><p>在 MyBatis 中，我们在 mapper 引用变量时，默认使用的是 <code>#</code>，像下面这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了使用 <code>#</code> 之外，我们也可以使用 <code>$</code> 来引用一个变量：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id=$&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在旧的MyBatis版本中，这两者是有很大区别的：如果使用 <code>$</code>，变量需要通过 @Param 取别名；而新版本中，不用取别名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>#</code> 和 <code>$</code> 符号的根本区别其实就是Statement 和 PreparedStatement 之间的区别</p><ul><li><code>$</code>  使用时  SQL是直接参数拼接好的，一般来说这样有SQL注入的问题</li><li><code>#</code> 使用了预编译的方式，通过占位符的方式传递参数</li></ul><p>有些时候使用<code>$</code>进行SQL拼接可以使用数据库函数解决，如进行模糊查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where username like concat(&#x27;%&#x27;,$&#123;name&#125;,&#x27;%&#x27;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是有的 SQL 无法使用 <code>#</code> 来拼接，例如传入一个动态字段进来，假设我想查询所有数据，要排序查询，但是排序的字段不确定，需要通过参数传入，这种场景就只能使用 <code>$</code>，例如如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">(String orderBy)</span>;</span><br></pre></td></tr></table></figure><p>XML 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserOrderBy&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">    select * from user order by $&#123;order&#125; desc;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="简单类型的传递"><a href="#简单类型的传递" class="headerlink" title="简单类型的传递"></a>简单类型的传递</h5><p>像前面根据id查询只需要传一个参数就行了。但是多个参数传递会怎么样？</p><p>比如根据id修改名字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer <span class="title function_">updateUsernameById</span><span class="params">(String username, Integer id)</span>;</span><br></pre></td></tr></table></figure><p>但是对应的mapper怎么传递参数？</p><p>其实可以这样传递：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUsernameById&quot;</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;arg0&#125; where id=#&#123;arg1&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUsernameById&quot;</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;param1&#125; where id=#&#123;param2&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认就是：[arg0,arg1,…] 或者 [param1,param2,…]</p><p>但是参数很多，这样是不容易记住的，我们可以给参数添加@Param注解来指定参数名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer <span class="title function_">updateUsernameById</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure><p>对应的mapper：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUsernameById&quot;</span>&gt;</span></span><br><span class="line">    update user set username=#&#123;username&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="对象参数的传递"><a href="#对象参数的传递" class="headerlink" title="对象参数的传递"></a>对象参数的传递</h5><p>添加用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>对应的mapper：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address) values(#&#123;username&#125;, #&#123;address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在引用的时候，直接使用属性名就能够定位到对象了。如果对象存在多个，我们也需要给对象添加 @Param 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer <span class="title function_">addUser</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> User user)</span>;</span><br></pre></td></tr></table></figure><p>对应的mapper：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address) values(#&#123;user.username&#125;, #&#123;user.address&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Map参数传递"><a href="#Map参数传递" class="headerlink" title="Map参数传递"></a>Map参数传递</h5><p>一般在项目中不适用Map参数，一般使用传对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer <span class="title function_">updateUsernameById</span><span class="params">(HashMap&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>mapper：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUsernameById&quot;</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用的变量名，就是 map 中的 key。基本上和实体类是一样的</p><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>resultType 是返回类型，在实际开发中，如果返回的数据类型比较复杂，一般我们使用 resultMap，但是，对于一些简单的返回，使用 resultType 就够用了。</p><p>resultType返回的可以是简单类型，也可以是对象、集合等</p><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>在实际开发中，resultMap 是使用较多的返回数据类型配置。因为实际项目中，一般的返回数据类型比较丰富，字段和属性名对应不上。我们需要使用 resultMap，自定义映射的结果集</p><p>看一下book实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库中书名的字段名是<code>b_name</code>，和实体类的属性不对应</p><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line">    List&lt;Book&gt; <span class="title function_">getAllBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的mapper：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BookMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;b_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">column</span>=<span class="string">&quot;author&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllBooks&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BookMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_book;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个 resultMap 中，id 用来描述主键，column 是数据库查询出来的列名，property 则是对象中的属性名。</p><p>以前老版本的MyBatis要求实体类要有无参构造方法，新版的没这个要求了。一般有参和无参构造方法都有，会先调用无参的。</p><p>我们也可以在 resultMap 中，自己指定要调用的构造方法，指定方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BookMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">idArg</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;b_name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;author&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个就表示使用两个参数的构造方法取构造一个 Book实例。需要注意的是，name 属性表示构造方法中的变量名，默认情况下，变量名是 arg0、arg1或者param1、param2      如果需要自定义，我们可以在构造方法中，手动加上 @Param 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Book-----init-----无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id, <span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;author&quot;)</span> String author)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Book-----init---有参&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>if 是一个判断节点，如果满足某个条件，节点中的 SQL 就会生效。比如分页查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; <span class="title function_">getBooksByPage</span><span class="params">(<span class="meta">@Param(&quot;start&quot;)</span> Integer start, <span class="meta">@Param(&quot;size&quot;)</span> Integer size)</span>;</span><br></pre></td></tr></table></figure><p>在 XML 中定义 SQL：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBooksByPage&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BookMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_book</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;start != null and size!=null&quot;</span>&gt;</span></span><br><span class="line">        limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>if 节点中，test 表示判断条件，如果判断结果为 true，则 if 节点的中的 SQL 会生效，否则不会生效。也就是说，在方法调用时，如果分页的两个参数都为 null，则表示查询所有数据</p><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>where 用来处理查询参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; <span class="title function_">getBookByNameOrAuthor</span><span class="params">(Book book)</span>;</span><br></pre></td></tr></table></figure><p>xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBookByNameOrAuthor&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BookMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Book&quot;</span>&gt;</span></span><br><span class="line">    select * from t_book</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and b_name=#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null and author!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and author=#&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 where 节点将所有的查询条件包起来，如果有满足的条件，where 节点会自动加上，如果没有，where 节点也将不存在，在有满足条件的情况下，where 还会自动处理 and 关键字。</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set 关键字一般用在更新中。因为大部分情况下，更新的字段可能不确定，如果对象中存在该字段的值，就更新该字段，不存在，就不更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer <span class="title function_">updateBook</span><span class="params">(Book book)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Book&quot;</span>&gt;</span></span><br><span class="line">    update t_book</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            b_name = #&#123;name&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null and author!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            author=#&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p>可以代替where  set</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBookByNameOrAuthor2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BookMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Book&quot;</span>&gt;</span></span><br><span class="line">    select * from t_book</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and &quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and b_name=#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null and author!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and author=#&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>prefixOverrides指定条件关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Book&quot;</span>&gt;</span></span><br><span class="line">    update t_book</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            b_name = #&#123;name&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null and author!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            author=#&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>foreach 用来处理数组/集合参数</p><p>如批量查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; <span class="title function_">getBooksByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Integer&gt; ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBooksByIds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BookMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_book where id in </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 mapper 中，通过 foreach 节点来遍历数组，collection 表示数组变量，open 表示循环结束后，左边的符号，close 表示循环结束后，右边的符号，item 表示循环时候的单个变量，separator 表示循环的元素之间的分隔符。</p><p>批量插入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer <span class="title function_">batchAddBooks</span><span class="params">(<span class="meta">@Param(&quot;books&quot;)</span> List&lt;Book&gt; books)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchAddBooks&quot;</span>&gt;</span></span><br><span class="line">    insert into t_book (b_name,author) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;books&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;book&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;book.name&#125;,#&#123;book.author&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><p>bind 相当于在mapper文件中定义变量然后引用这个变量</p><p>比如模糊查询，根据书的作者的姓氏查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; <span class="title function_">getBooksByAuthorFirstName</span><span class="params">(String author)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBooksByAuthorFirstName&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BookMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;authorLike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;author+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    select * from t_book where author like #&#123;authorLike&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h4><p>在 SQL 查询中，一般不建议写 <code>*</code>，因为 select <code>*</code> 会降低查询效率。但是，每次查询都要把字段名列出来，太麻烦。这种使用，我们可以利用 SQL 片段来解决这个问题。</p><p>先在 mapper 中定义一个 SQL 片段：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column&quot;</span>&gt;</span></span><br><span class="line">    id,usename,address</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，在其他 SQL 中，就可以引用这个变量：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column&quot;</span> /&gt;</span> from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis进阶查询"><a href="#MyBatis进阶查询" class="headerlink" title="MyBatis进阶查询"></a>MyBatis进阶查询</h2><h3 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h3><p>比如每篇博客有一个作者，作者有自己的属性。</p><p>数据库两张表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `article` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` text,</span><br><span class="line">  `aid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `author` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>先定义两个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Article</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> Author author;</span><br><span class="line">    <span class="comment">// 省略get、set</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="comment">// 省略get、set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个ArticleMapper.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleMapper</span> &#123;</span><br><span class="line">    Article <span class="title function_">getArticleById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArticleMapper中定义了一个查询Article的方法，希望查出Article的同时也能查出Author。</p><p>ArticleMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.ArticleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getArticleById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Article&quot;</span>&gt;</span></span><br><span class="line">        select a.*,au.id as &#x27;author.id&#x27;,au.name as &#x27;author.name&#x27;,au.age as &#x27;author.age&#x27; from article a,author au where a.aid=au.id and a.id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样写太low了，而且很容易写错。</p><p>优化：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.ArticleMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ArticleMap2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Author&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;author_&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getArticleById2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ArticleMap2&quot;</span>&gt;</span></span><br><span class="line">        select a.*,au.id as author_id,au.name as author_name,au.age as author_age from article a,author au where a.aid=au.id and a.id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个查询 SQL 中，首先应该做好一对一查询，返回值一定要定义成 resultMap，注意，这里千万不能写错。然后，在 resultMap 中，来定义查询结果的映射关系。其中，association 节点用来描述一对一的关系。这个节点中的内容，和 resultMap 一样，也是 id，result 等，在这个节点中，我们还可以继续描述一对一。<code>columnPrefix</code>表示的是查询SQL字段的前缀。</p><p>由于在实际项目中，每次返回的数据类型可能都会有差异，这就需要定义多个 resultMap，而这多个 resultMap 中，又有一部份属性是相同的，所以，我们可以将相同的部分抽出来，做成一个公共的模板，然后被其他 resultMap 继承：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseArticleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Article&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ArticleMap2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Article&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseArticleMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Author&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;author_&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.AuthorMapper.AuthorMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;result property=&quot;name&quot; column=&quot;name&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;result property=&quot;age&quot; column=&quot;age&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getArticleById3&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ArticleMap3&quot;</span>&gt;</span></span><br><span class="line">    select a.*,au.id as author_id,au.name as author_name,au.age as author_age from article a,author au where a.aid=au.id and a.id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AuthorMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.AuthorMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;AuthorMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Author&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在association节点中，还有有一个resultMap属性，可以用来指定其他查询的mapper</p><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>上面这种加载方式，是一次性的读取到所有数据。然后在 resultMap 中做映射。如果一对一的属性使用不是很频繁，可能偶尔用一下，这种情况下，我们也可以启用懒加载。</p><p>懒加载，就是先查询 article，查询 article的过程中，不去查询 author，当用户第一次调用了 article 中的 author 属性后，再去查询 author。</p><p>定义一个 Article的查询方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Article <span class="title function_">getArticleById4</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><p>ArticleMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseArticleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Article&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ArticleMap4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Article&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseArticleMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;author&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Author&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.AuthorMapper.getAuthorById&quot;</span> <span class="attr">column</span>=<span class="string">&quot;&#123;id=aid&#125;&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getArticleById4&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ArticleMap4&quot;</span>&gt;</span></span><br><span class="line">    select * from article where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里定义 association 的时候，不直接指定映射的字段，而是指定要执行的方法，通过 select 字段来指定查询author的方法，column 表示执行方法时传递的参数字段，最后的 fetchType 表示开启懒加载。</p><p>AuthorMapper.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthorMapper</span> &#123;</span><br><span class="line">    Author <span class="title function_">getAuthorById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AuthorMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.AuthorMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;AuthorMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Author&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAuthorById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AuthorMap&quot;</span>&gt;</span></span><br><span class="line">        select * from author where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h3><p>比如，用户和角色，一个用户可以有多个角色</p><p>先准备三张表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 连接表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>创建实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个根据 id 查询用户的方法：</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getAllUsersWithRole</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>对应的xml UserMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMapWithRole&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseUserMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Role&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;role_&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.RoleMapper.BaseRoleMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsersWithRole&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMapWithRole&quot;</span>&gt;</span></span><br><span class="line">    select u.*,r.id as role_id,r.name as role_name from user u left join user_role ur on u.id=ur.uid left join role r on ur.rid=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>RoleMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.RoleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 resultMap 中，通过 collection 节点来描述集合的映射关系。在映射时，会自动将一的一方数据集合并，然后将多的一方放到集合中，能实现这一点，靠的就是 id 属性。</p><p>当然，这个一对多，也可以做成懒加载的形式：</p><p>查询的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getAllUsersWithRole2</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>对应的mapper：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMapWithRole2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseUserMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Role&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.RoleMapper.getRoleByUid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;&#123;uid=id&#125;&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsersWithRole2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMapWithRole2&quot;</span>&gt;</span></span><br><span class="line">    select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>RoleMapper.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> &#123;</span><br><span class="line">    List&lt;Role&gt; <span class="title function_">getRoleByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RoleMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.RoleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.Role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRoleByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseRoleMap&quot;</span>&gt;</span></span><br><span class="line">        select r.* from role r,user_role ur where r.id=ur.rid and ur.uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="鉴别映射器"><a href="#鉴别映射器" class="headerlink" title="鉴别映射器"></a>鉴别映射器</h3><p>将上面的user表改一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `enabled` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>加了一个enabled字段，表示这个角色是可用的，就把它映射进来。如果不可用，就不把角色的映射进来，直接返回user本身。</p><p>先定义一个查询方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getAllUsersWithRole3</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>对应的mapper：</p><p>UserMapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;enabled&quot;</span> <span class="attr">column</span>=<span class="string">&quot;enabled&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMapWithRole&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseUserMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.cwz.mybatis02.model.Role&quot;</span> <span class="attr">columnPrefix</span>=<span class="string">&quot;role_&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;com.cwz.mybatis02.mapper.RoleMapper.BaseRoleMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMapWithRole3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">column</span>=<span class="string">&quot;enabled&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMapWithRole&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseUserMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsersWithRole3&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMapWithRole3&quot;</span>&gt;</span></span><br><span class="line">    select u.*,r.id as role_id,r.name as role_name from user u left join user_role ur on u.id=ur.uid left join role r on ur.rid=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当enabled为0代表角色不可用，直接使用BaseUserMap映射，不返回role，只返回user本身</p><h3 id="自定义类型处理器"><a href="#自定义类型处理器" class="headerlink" title="自定义类型处理器"></a>自定义类型处理器</h3><p>比如在上面的user表中新增一个字段：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210604110413.png" alt=""></p><p>新增了一个字段favorites，类型是varchar</p><p>实体类修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enabled;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; favorites;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里favorites存的是list，爱好可能不只一个。</p><p>MyBatis有默认的类型处理器，但是没有把list转为varchar的，所以需要自定义类型处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.mybatis02.typehandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.TypeHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span>  <span class="comment">// jdbc类型是varchar</span></span><br><span class="line"><span class="meta">@MappedTypes(List.class)</span>  <span class="comment">// java是list</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">List2Varchar</span> <span class="keyword">implements</span> <span class="title class_">TypeHandler</span>&lt;List&lt;String&gt;&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存到数据库的格式：跑步,跳绳</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameter</span><span class="params">(PreparedStatement ps, <span class="type">int</span> i, List&lt;String&gt; parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : parameter) &#123;</span><br><span class="line">            sb.append(s).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ps.setString(i, sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> rs.getString(columnName);</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(s.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getResult</span><span class="params">(ResultSet rs, <span class="type">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> rs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(s.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getResult</span><span class="params">(CallableStatement cs, <span class="type">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> cs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(s.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个添加用户的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer <span class="title function_">addUser3</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>对应的sql：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser3&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,address,favorites) values(#&#123;username&#125;,#&#123;address&#125;,#&#123;favorites,typeHandler=com.cwz.mybatis02.typehandler.List2Varchar&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;赵子龙&quot;</span>);</span><br><span class="line">    user.setFavorites(Arrays.asList(<span class="string">&quot;足球&quot;</span>, <span class="string">&quot;篮球&quot;</span>));</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.addUser3(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就实现了类型转换插入数据</p><p>但是查询的时候也要指定类型处理器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cwz.mybatis02.model.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;enabled&quot;</span> <span class="attr">column</span>=<span class="string">&quot;enabled&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;favorites&quot;</span> <span class="attr">column</span>=<span class="string">&quot;favorites&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.cwz.mybatis02.typehandler.List2Varchar&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis查询缓存"><a href="#MyBatis查询缓存" class="headerlink" title="MyBatis查询缓存"></a>MyBatis查询缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>Mybatis 一级缓存的作用域是同一个 SqlSession，在同一个 sqlSession 中两次执行相同的 sql 语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。当一个 sqlSession 结束后该 sqlSession 中的一级缓存也就不存在了。</p><p>Mybatis 默认开启一级缓存。</p><p>如果开启了一个新的 SqlSession，则新的 SqlSession 无法就是之前的缓存，必须是同一个 SqlSession 中，缓存才有效</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li>Mybatis 二级缓存是多个 SqlSession 共享的，其作用域是 mapper 的同一个 namespace，不同的 sqlSession 两次执行相同 namespace 下的 sql 语句且向 sql 中传递参数也相同即最终执行相同的 sql 语句</li><li>第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率</li><li>Mybatis 默认没有开启二级缓存，需要在 setting 全局参数中配置开启二级缓存</li></ul><p>在mybatis-config.xml中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在对应的mapper加上<code>&lt;cache/&gt;</code>即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.mybatis03.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis03.model.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>cache节点有一些参数：</p><ul><li><code>&lt;cache eviction=&quot;LRU&quot;/&gt;</code>  缓存默认使用的策略是LRU</li><li><code>&lt;cache flushInterval=&quot;60000&quot;/&gt;</code> flushInterval 配置刷新间隔，一般不用配置</li><li><code>&lt;cache size=&quot;2048&quot;/&gt;</code>     size 缓存对象的数目，最多可以缓存多少个对象，默认1024</li><li><code>&lt;cache readOnly=&quot;true&quot;/&gt;</code>   readOnly 为true，缓存会给调用者返回缓存对象的相同实例，这相同实例不可被修改</li></ul><p>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session1</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">um1</span> <span class="operator">=</span> session1.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> um1.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user1 = &quot;</span> + user1);</span><br><span class="line">    user1.setUsername(<span class="string">&quot;666666666&quot;</span>);</span><br><span class="line">    session1.close();</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session2</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">um2</span> <span class="operator">=</span> session2.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> um2.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;user2 = &quot;</span> + user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义MyBatis插件"><a href="#自定义MyBatis插件" class="headerlink" title="自定义MyBatis插件"></a>自定义MyBatis插件</h2><h3 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h3><p>在UserMapper.java中新增方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getAllUsersByPage</span><span class="params">(RowBounds rowBounds)</span>;</span><br></pre></td></tr></table></figure><p>对应的mapper：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsersByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis03.model.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSessionFactory.openSession().getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; list = userMapper.getAllUsersByPage(<span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在RowBounds中传递分页参数，SQL中不用写就可以内存分页。但是数据量大这种分页没有意义，需要的是物理分页。</p><h3 id="MyBatis-插件接口"><a href="#MyBatis-插件接口" class="headerlink" title="MyBatis 插件接口"></a>MyBatis 插件接口</h3><p>MyBatis 插件是通过拦截器来起作用的，MyBatis 框架在设计的时候，就已经为插件的开发预留了相关接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">  Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">    <span class="comment">// NOP</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口中就三个方法，第一个方法必须实现，后面两个方法都是可选的。三个方法作用分别如下：</p><ul><li>intercept：具体的拦截方法，自定义 MyBatis 插件时，一般都需要重写该方法</li><li>plugin：这个方法的参数 target 就是拦截器要拦截的对象，一般来说我们不需要重写该方法。Plugin.wrap 方法会自动判断拦截器的签名和被拦截对象的接口是否匹配，如果匹配，才会通过动态代理拦截目标对象</li><li>setProperties：这个方法用来传递插件的参数，可以通过参数来改变插件的行为。我们定义好插件之后，需要对插件进行配置，在配置的时候，可以给插件设置相关属性，设置的属性可以通过该方法获取到</li></ul><h3 id="MyBatis拦截器签名"><a href="#MyBatis拦截器签名" class="headerlink" title="MyBatis拦截器签名"></a>MyBatis拦截器签名</h3><p>拦截器签名是一个名为 @Intercepts 的注解，该注解中可以通过 @Signature 配置多个签名。@Signature 注解中则包含三个属性：</p><ul><li>type: 拦截器需要拦截的接口，有 4 个可选项，分别是：Executor、ParameterHandler、ResultSetHandler 以及 StatementHandler。</li><li>method: 拦截器所拦截接口中的方法名，也就是前面四个接口中的方法名，接口和方法要对应上。</li><li>args: 拦截器所拦截方法的参数类型，通过方法名和参数类型可以锁定唯一一个方法。</li></ul><h3 id="被拦截的对象"><a href="#被拦截的对象" class="headerlink" title="被拦截的对象"></a>被拦截的对象</h3><p>根据前面的介绍，被拦截的对象主要有如下四个：</p><p><strong>Executor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">ResultHandler</span> <span class="variable">NO_RESULT_HANDLER</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey cacheKey, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  List&lt;BatchResult&gt; <span class="title function_">flushStatements</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> required)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(<span class="type">boolean</span> required)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  CacheKey <span class="title function_">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">isCached</span><span class="params">(MappedStatement ms, CacheKey key)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">clearLocalCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">deferLoad</span><span class="params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span>;</span><br><span class="line"></span><br><span class="line">  Transaction <span class="title function_">getTransaction</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(<span class="type">boolean</span> forceRollback)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">isClosed</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setExecutorWrapper</span><span class="params">(Executor executor)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各方法含义分别如下：</p><ul><li>update：该方法会在所有的 INSERT、 UPDATE、 DELETE 执行时被调用，如果想要拦截这些操作，可以通过该方法实现。</li><li>query：该方法会在 SELECT 查询方法执行时被调用，方法参数携带了很多有用的信息，如果需要获取，可以通过该方法实现。</li><li>queryCursor：当 SELECT 的返回类型是 Cursor 时，该方法会被调用。</li><li>flushStatements：当 SqlSession 方法调用 flushStatements 方法或执行的接口方法中带有 @Flush 注解时该方法会被触发。</li><li>commit：当 SqlSession 方法调用 commit 方法时该方法会被触发。</li><li>rollback：当 SqlSession 方法调用 rollback 方法时该方法会被触发。</li><li>getTransaction：当 SqlSession 方法获取数据库连接时该方法会被触发。</li><li>close：该方法在懒加载获取新的 Executor 后会被触发。</li><li>isClosed：该方法在懒加载执行查询前会被触发。</li></ul><p><strong>ParameterHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ParameterHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  Object <span class="title function_">getParameterObject</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setParameters</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各方法含义分别如下：</p><ul><li>getParameterObject：在执行存储过程处理出参的时候该方法会被触发。</li><li>setParameters：设置 SQL 参数时该方法会被触发。</li></ul><p><strong>ResultSetHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResultSetHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">handleCursorResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">handleOutputParameters</span><span class="params">(CallableStatement cs)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>handleResultSets：该方法会在所有的查询方法中被触发（除去返回值类型为 Cursor 的查询方法），一般来说，如果我们想对查询结果进行二次处理，可以通过拦截该方法实现。</li><li>handleCursorResultSets：当查询方法的返回值类型为 Cursor 时，该方法会被触发。</li><li>handleOutputParameters：使用存储过程处理出参的时候该方法会被调用。</li></ul><p><strong>StatementHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StatementHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  Statement <span class="title function_">prepare</span><span class="params">(Connection connection, Integer transactionTimeout)</span></span><br><span class="line">      <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span></span><br><span class="line">      <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">(Statement statement)</span></span><br><span class="line">      <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">update</span><span class="params">(Statement statement)</span></span><br><span class="line">      <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span></span><br><span class="line">      <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(Statement statement)</span></span><br><span class="line">      <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  BoundSql <span class="title function_">getBoundSql</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  ParameterHandler <span class="title function_">getParameterHandler</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prepare：该方法在数据库执行前被触发。</li><li>parameterize：该方法在 prepare 方法之后执行，用来处理参数信息。</li><li>batch：如果 MyBatis 的全剧配置中配置了 <code>defaultExecutorType=”BATCH”</code>，执行数据操作时该方法会被调用。</li><li>update：更新操作时该方法会被触发。</li><li>query：该方法在 SELECT 方法执行时会被触发。</li><li>queryCursor：该方法在 SELECT 方法执行时，并且返回值为 Cursor 时会被触发。</li></ul><p>在开发一个具体的插件时，我们应当根据自己的需求来决定到底拦截哪个方法。</p><h3 id="自定义分页插件"><a href="#自定义分页插件" class="headerlink" title="自定义分页插件"></a>自定义分页插件</h3><p>首先我们需要自定义一个 RowBounds，因为 MyBatis 原生的 RowBounds 是内存分页，并且没有办法获取到总记录数（一般分页查询的时候我们还需要获取到总记录数），所以我们自定义 PageRowBounds，对原生的 RowBounds 功能进行增强，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageRowBounds</span> <span class="keyword">extends</span> <span class="title class_">RowBounds</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageRowBounds</span><span class="params">(<span class="type">int</span> offset, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(offset, limit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageRowBounds</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(Long total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的 PageRowBounds 中增加了 total 字段，用来保存查询的总记录数。</p><p>接下来我们自定义拦截器 PageInterceptor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.mybatis03.plugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cache.CacheKey;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.Executor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.BoundSql;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.MappedStatement;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.ResultMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Interceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Intercepts;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Invocation;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.plugin.Signature;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts(@Signature(</span></span><br><span class="line"><span class="meta">        type = Executor.class,</span></span><br><span class="line"><span class="meta">        method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">        args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = invocation.getArgs();</span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> (MappedStatement) args[<span class="number">0</span>];  <span class="comment">// 拦截方法的MappedStatement xml中mapper的节点(select、insert等)会封装成MappedStatement对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> args[<span class="number">1</span>];  <span class="comment">// 拦截方法的参数</span></span><br><span class="line">        <span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> (RowBounds) args[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 需要分页</span></span><br><span class="line">        <span class="keyword">if</span> (rowBounds != RowBounds.DEFAULT) &#123;</span><br><span class="line">            <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> (Executor) invocation.getTarget();</span><br><span class="line">            <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> ms.getBoundSql(parameterObject);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">additionalParametersFields</span> <span class="operator">=</span> BoundSql.class.getDeclaredField(<span class="string">&quot;additionalParameters&quot;</span>);</span><br><span class="line">            additionalParametersFields.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Map&lt;String, Object&gt; additionalParameters = (Map&lt;String, Object&gt;) additionalParametersFields.get(boundSql);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rowBounds <span class="keyword">instanceof</span> PageRowBounds) &#123;</span><br><span class="line">                <span class="type">MappedStatement</span> <span class="variable">countMs</span> <span class="operator">=</span> newMappedStatement(ms, Integer.class);</span><br><span class="line">                <span class="type">CacheKey</span> <span class="variable">countKey</span> <span class="operator">=</span> executor.createCacheKey(countMs, parameterObject, RowBounds.DEFAULT, boundSql);</span><br><span class="line">                <span class="type">String</span> <span class="variable">countSql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from (&quot;</span> + boundSql.getSql() + <span class="string">&quot;) temp&quot;</span>;</span><br><span class="line">                <span class="type">BoundSql</span> <span class="variable">countBoundSql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoundSql</span>(ms.getConfiguration(), countSql, boundSql.getParameterMappings(), parameterObject);</span><br><span class="line">                Set&lt;String&gt; keySet = additionalParameters.keySet();</span><br><span class="line">                <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">                    countBoundSql.setAdditionalParameter(key, additionalParameters.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;Object&gt; countQueryResult = executor.query(countMs, parameterObject, RowBounds.DEFAULT, ((ResultHandler) args[<span class="number">3</span>]), countKey, countBoundSql);</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">total</span> <span class="operator">=</span> (Integer) countQueryResult.get(<span class="number">0</span>);</span><br><span class="line">                ((PageRowBounds) rowBounds).setTotal(total);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">CacheKey</span> <span class="variable">pageKey</span> <span class="operator">=</span> executor.createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class="line">            pageKey.update(<span class="string">&quot;RowBounds&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pageSql</span> <span class="operator">=</span> boundSql.getSql() + <span class="string">&quot; limit &quot;</span> + rowBounds.getOffset() + <span class="string">&quot;,&quot;</span> + rowBounds.getLimit();</span><br><span class="line">            <span class="type">BoundSql</span> <span class="variable">pageBoundSql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoundSql</span>(ms.getConfiguration(), pageSql, boundSql.getParameterMappings(), parameterObject);</span><br><span class="line">            Set&lt;String&gt; keySet = additionalParameters.keySet();</span><br><span class="line">            <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">                pageBoundSql.setAdditionalParameter(key, additionalParameters.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Object&gt; list = executor.query(ms, parameterObject, RowBounds.DEFAULT, (ResultHandler) args[<span class="number">3</span>], pageKey, pageBoundSql);</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不需要分页，直接返回结果</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MappedStatement <span class="title function_">newMappedStatement</span><span class="params">(MappedStatement ms, Class&lt;Integer&gt; typeClass)</span> &#123;</span><br><span class="line">        MappedStatement.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappedStatement</span>.Builder(ms.getConfiguration(), ms.getId() + <span class="string">&quot;_count&quot;</span>, ms.getSqlSource(), ms.getSqlCommandType());</span><br><span class="line">        <span class="type">ResultMap</span> <span class="variable">resultMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultMap</span>.Builder(ms.getConfiguration(), ms.getId(), typeClass, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">0</span>)).build();</span><br><span class="line">        builder.resource(ms.getResource())</span><br><span class="line">                .fetchSize(ms.getFetchSize())</span><br><span class="line">                .statementType(ms.getStatementType())</span><br><span class="line">                .timeout(ms.getTimeout())</span><br><span class="line">                .parameterMap(ms.getParameterMap())</span><br><span class="line">                .resultSetType(ms.getResultSetType())</span><br><span class="line">                .cache(ms.getCache())</span><br><span class="line">                .flushCacheRequired(ms.isFlushCacheRequired())</span><br><span class="line">                .useCache(ms.isUseCache())</span><br><span class="line">                .resultMaps(Arrays.asList(resultMap));</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>首先通过 @Intercepts 注解配置拦截器签名，从 @Signature 的定义中我们可以看到，拦截的是 Executor的query 方法，该方法有一个重载方法，通过 args 指定了方法参数，进而锁定了重载方法</li><li>将查询操作拦截下来之后，接下来我们的操作主要在 PageInterceptor的intercept 方法中完成，该方法的参数重包含了拦截对象的诸多信息</li><li>通过 <code>invocation.getArgs()</code> 获取拦截方法的参数，获取到的是一个数组，正常来说这个数组的长度为 4。<ul><li>数组第一项是一个 MappedStatement，我们在 Mapper.xml 中定义的各种操作节点和 SQL，都被封装成一个个的 MappedStatement 对象了</li><li>数组第二项就是所拦截方法的具体参数，也就是你在 Mapper 接口中定义的方法参数</li><li>数组的第三项是一个 RowBounds 对象，我们在 Mapper 接口中定义方法时不一定使用了 RowBounds 对象，如果我们没有定义 RowBounds 对象，系统会给我们提供一个默认的 RowBounds.DEFAULT</li><li>数组第四项则是一个处理返回值的 ResultHandler</li></ul></li><li>接下来判断上一步提取到的 rowBounds 对象是否不为 <code>RowBounds.DEFAULT</code>，如果为<code>RowBounds.DEFAULT</code>，说明用户不想分页；如果不为 <code>RowBounds.DEFAULT</code>，则说明用户想要分页，如果用户不想分页，则直接执行最后的 <code>return invocation.proceed();</code>，让方法继续往下走就行了。</li><li>如果需要进行分页，则先从 invocation 对象中取出执行器 Executor、BoundSql 以及通过反射拿出来 BoundSql 中保存的额外参数（如果我们使用了动态 SQL，可能会存在该参数）。BoundSql 中封装了我们执行的 Sql 以及相关的参数</li><li>接下来判断 rowBounds 是否是 PageRowBounds 的实例，如果是，说明除了分页查询，还想要查询总记录数，如果不是，则说明 rowBounds 可能是 RowBounds 实例，此时只要分页即可，不用查询总记录数</li><li>如果需要查询总记录数，则首先调用 newMappedStatement 方法构造出一个新的 MappedStatement 对象出来，这个新的 MappedStatement 对象的返回值是 Long 类型的。然后分别创建查询的 CacheKey、拼接查询的 countSql，再根据 countSql 构建出 countBoundSql，再将额外参数添加进 countBoundSql 中。最后通过 executor.query 方法完成查询操作，并将查询结果赋值给 PageRowBounds 中的 total 属性。</li><li>接下来进行分页查询，需要强调的是，当我们启动了这个分页插件之后，MyBatis 原生的 RowBounds 内存分页会变成物理分页，原因就在这里我们修改了查询 SQL</li><li>将查询结果返回</li></ul><h3 id="测试插件"><a href="#测试插件" class="headerlink" title="测试插件"></a>测试插件</h3><p>在全局配置中配置分页插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.cwz.mybatis03.plugin.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来我们在 Mapper 中定义查询接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUsersByPage</span><span class="params">(RowBounds rowBounds)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 UserMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsersByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cwz.mybatis03.model.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSessionFactory.openSession().getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">PageRowBounds</span> <span class="variable">pageRowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageRowBounds</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.getAllUsersByPage(pageRowBounds);</span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;pageRowBounds.getTotal() = &quot;</span> + pageRowBounds.getTotal());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ssm整合"><a href="#ssm整合" class="headerlink" title="ssm整合"></a>ssm整合</h1><p>先创建一个maven工程，添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建java web工程：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210604180041.png" alt=""></p><p>配置web.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库资源文件db.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">db.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">db.url</span>=<span class="string">jdbc:mysql:///test1?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">db.driverClass</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>配置spring配置文件applicationContext.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz.ssm&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.cwz.ssm.model&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:com/cwz/ssm/mapper/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.cwz.ssm.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置springmvc  spring-servlet.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cwz.ssm&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实体类User.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.ssm.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义查询方法UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.ssm.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cwz.ssm.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的mapper文件UserMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cwz.ssm.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于UseMapper.xml和UserMapper.java放在一起，需要在maven中build配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UserService.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cwz.ssm.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.cwz.ssm.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserController.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cwz.ssm.comtroller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cwz.ssm.model.User;</span><br><span class="line"><span class="keyword">import</span> com.cwz.ssm.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getAllUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring入门&quot;&gt;&lt;a href=&quot;#spring入门&quot; class=&quot;headerlink&quot; title=&quot;spring入门&quot;&gt;&lt;/a&gt;spring入门&lt;/h1&gt;&lt;h2 id=&quot;spring简介&quot;&gt;&lt;a href=&quot;#spring简介&quot; class=&quot;head</summary>
      
    
    
    
    <category term="ssm" scheme="https://setcreed.github.io/categories/ssm/"/>
    
    
    <category term="ssm" scheme="https://setcreed.github.io/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>01-java基础</title>
    <link href="https://setcreed.github.io/posts/91b391ad/"/>
    <id>https://setcreed.github.io/posts/91b391ad/</id>
    <published>2022-03-04T13:58:19.000Z</published>
    <updated>2023-11-14T23:51:51.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量的声明和使用"><a href="#变量的声明和使用" class="headerlink" title="变量的声明和使用"></a>变量的声明和使用</h1><p>变量的声明方式</p><ul><li>数据类型 变量名 = 初始值;</li><li><code>=初始值</code>可以省略</li></ul><p>举例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main方法是执行入口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;age = &quot;</span> + age); <span class="comment">// age = 18</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>使用变量的注意事项</p><ul><li>使用变量之前需要声明</li><li>使用变量之前需要初始化</li><li>变量不能重复声明</li></ul><p>标识符的命令法则</p><ul><li>由数字、字母、下划线以及$等组成，其中不能以数字开头</li><li>不能使用java语言的关键字。</li><li>区分大小写，长度没有限制但不宜过长</li><li>尽量做到见名知意，支持中文但不推荐使用</li><li>标识符可以给类/变量/属性/方法/包 起名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210203192933.png" alt=""></p><p>数据类型分类</p><ul><li>基本数据类型<ul><li>byte、short、int、long、float、double、boolean、char</li></ul></li><li>引用数据类型<ul><li>数组、类、接口、枚举、标注</li></ul></li></ul><p>整数类型</p><ul><li>Java语言中描述整数数据的类型有：byte、short、int、long</li><li>其中byte类型在内存空间中占1个字节，表示的范围是: -2^7 ~ 2^7-1</li><li>其中short类型在内存空间中占2个字节，表示范围是：-2^15 ~ 2^15-1</li><li>其中int类型在内存空间中占4个字节，表示范围是：-2^31 ~ 2^31-1</li><li>其中long类型在内存空间中占8个字节，表示范围是：-2^63 ~ 2^63-1</li></ul><p>浮点类型</p><ul><li>Java语言中用于描述小数数据的类型：float 和 double，推荐double类型</li><li>其中float类型在内存空间占4个字节，叫做单精度浮点数，可以表示7位 有效数字，范围：-3.403E38~3.403E38</li><li>其中double类型在内存空间占8个字节，叫做双精度浮点数，可以表示15 位有效数字，范围：-1.798E308~1.798E308</li></ul><p>布尔类型</p><ul><li>Java语言中用于描述真假信息类型有：boolean，数值只有：true 和 false</li><li>布尔类型在内存空间中所占大小没有明确的规定，可以认为是1个字节</li></ul><p>字符类型</p><ul><li>Java语言中用于描述单个字符的数据类型：char类型。如：’a’、 ‘中’等</li><li>其中char类型在内存空间中占2个字节并且没有符号位，表示的范围是： 0 ~ 65535，由于现实生活中很少有数据能够被单个字符描述，因此以后 的开发中更多的使用由多个字符串起来组成的字符串，使用String类型加 以描述，如：“hello”等。</li></ul><p>基本数据类型之间的转换</p><ul><li>Java语言中基本数据类型之间的转换方式：自动类型转换和强制类型转换</li><li>其中自动类型转换主要指从小类型到大类型之间的转换</li><li>其中强制类型转换主要指从大类型到小类型之间的转换，语法格式如下： 目标类型 变量名 = (目标类型)源类型变量名; </li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210203204637.png" alt=""></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>算术运算符</p><ul><li>+表示加法运算符</li><li>-表示减法运算符</li><li>*表示乘法运算符</li><li>/表示除法运算符</li><li>%表示取余运算符</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提示用户输入正整数类型的秒数，拆分秒数后输出x小时x分x秒。 ` </span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.提示用户输入一个正整数的秒数并使用变量记录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个正整数的秒数：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.将正整数的秒数拆分为时分秒后并使用变量记录</span></span><br><span class="line">        <span class="comment">// 3666秒 =&gt; 1小时1分钟6秒钟</span></span><br><span class="line">        <span class="comment">// 3666 / 3600 = 1 小时     3666 % 3600 = 66 / 60 = 1 分钟     3666 % 60 = 6 秒钟</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> num / <span class="number">3600</span>;      <span class="comment">// 拆分小时数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> num % <span class="number">3600</span> / <span class="number">60</span>;  <span class="comment">// 拆分分钟数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sec</span> <span class="operator">=</span> num % <span class="number">60</span>;         <span class="comment">// 拆分秒数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.打印最终的拆分结果</span></span><br><span class="line">        System.out.println(num + <span class="string">&quot;秒转换为&quot;</span> + hour + <span class="string">&quot;小时&quot;</span> + min + <span class="string">&quot;分钟&quot;</span> + sec + <span class="string">&quot;秒钟&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关系运算符</p><ul><li><code>&gt;，&gt;=，&lt;，&lt;=，==，!=</code></li><li>所有以关系运算符作为最终运算的表达式结果一定是boolean类型</li></ul><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    编程使用关系运算符实现负数的判断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RelationJudgeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.提示用户输入一个整数并使用变量记录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.判断该整数是否为负数并打印</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> num &lt; <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;b1 = &quot;</span> + b1);</span><br><span class="line">        System.out.println(num &lt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自增减运算符</p><ul><li>++表示自增，用于使得当前变量自身的数值加1</li><li>—表示自减，用于使得当前变量自身的数值减1</li></ul><p>前后加加的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    编程实现自增减运算符的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelfTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.声明一个int类型的变量并初始化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ia</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 2.打印变量的数值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.实现自增减运算符的使用</span></span><br><span class="line">        <span class="comment">// 表示让变量ia自身的数值加1，并覆盖该变量原来的数值</span></span><br><span class="line">        ia++;   <span class="comment">// ia = ia + 1;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 11</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示让变量ia自身的数值加1，并覆盖该变量原来的数值</span></span><br><span class="line">        ++ia;</span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 12</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示让变量ia自身的数值减1，并覆盖该变量原来的数值</span></span><br><span class="line">        --ia;</span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 11</span></span><br><span class="line"></span><br><span class="line">        ia--;</span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// ia = 10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.简单的变换</span></span><br><span class="line">        <span class="comment">// 其中ia++这个整体叫做表达式   其中ia叫做操作数/变量       也就是ia++和ia表示不同的含义，因此所占的内存空间应该不同</span></span><br><span class="line">        <span class="comment">// 下面的代码是在打印表达式的结果</span></span><br><span class="line">        <span class="comment">// 后++表示先让变量ia的数值作为整个表达式的最终结果，然后再让ia变量自身的数值加1</span></span><br><span class="line">        System.out.println(ia++);         <span class="comment">// 10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 11</span></span><br><span class="line">        <span class="comment">// 前++表示先让变量自身的数值加1，然后再让变量的数值作为整个表达式的结果</span></span><br><span class="line">        System.out.println(++ia);         <span class="comment">// 12</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ib</span> <span class="operator">=</span> ia++;</span><br><span class="line">        System.out.println(<span class="string">&quot;ib = &quot;</span> + ib); <span class="comment">// 12</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 13</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ic</span> <span class="operator">=</span> ++ia;</span><br><span class="line">        System.out.println(<span class="string">&quot;ic = &quot;</span> + ic); <span class="comment">// 14</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 14</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//                  14  + 16</span></span><br><span class="line">        System.out.println(ia++ + ++ia);  <span class="comment">// 30</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑运算符</p><ul><li><code>&amp;&amp;</code> 表示逻辑与运算符，“并且”，同真为真，一假为假</li><li><code>||</code>表示逻辑或运算符，“或者”，一真为真，同假为假</li><li><code>!</code>表示逻辑非运算符，“取反”，真为假，假为真</li><li>逻辑运算符的操作数均为boolean表达式</li><li>对于逻辑与运算符来说，若第一个表达式为假则结果为假，此时跳过第 二个表达式</li><li>对于逻辑或运算符来说，若第一个表达式为真则结果为真，此时跳过第 二个表达式</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.声明两个boolean类型的变量并初始化</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 2.打印变量的数值</span></span><br><span class="line">System.out.println(<span class="string">&quot;b1 = &quot;</span> + b1); <span class="comment">// b1 = true</span></span><br><span class="line">System.out.println(<span class="string">&quot;b2 = &quot;</span> + b2); <span class="comment">// b2 = false</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 3.使用上述变量实现逻辑运算符的使用</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span> b1 &amp;&amp; b2;</span><br><span class="line">System.out.println(<span class="string">&quot;b3 = &quot;</span> + b3); <span class="comment">// false</span></span><br><span class="line">System.out.println(b1 &amp;&amp; b2); <span class="comment">// false   并且</span></span><br><span class="line">System.out.println(b1 || b2); <span class="comment">// true    或者</span></span><br><span class="line">System.out.println(!b1);  <span class="comment">// false       取反</span></span><br><span class="line">System.out.println(!b2);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 4.测试一下短路特性</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ia</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">ib</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 对于逻辑与运算符来说，若第一个条件为假则整个表达式为假，此时跳过第二个表达式不执行</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b4</span> <span class="operator">=</span> (++ia == <span class="number">3</span>) &amp;&amp; (++ib == <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;b4 = &quot;</span> + b4); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 4</span></span><br><span class="line">System.out.println(<span class="string">&quot;ib = &quot;</span> + ib); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于逻辑或运算符来说，若第一个条件为真则整个表达式为真，此时跳过第二个表达式不执行</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b5</span> <span class="operator">=</span> (++ia == <span class="number">5</span>) || (++ib == <span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;b5 = &quot;</span> + b5); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">&quot;ia = &quot;</span> + ia); <span class="comment">// 5</span></span><br><span class="line">System.out.println(<span class="string">&quot;ib = &quot;</span> + ib); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三目运算符</p><ul><li>条件表达式? 表达式1: 表达式2</li><li>判断条件表达式是否成立，若成立则执行表达式1，否则执行表达式2</li></ul><p>赋值运算符</p><ul><li>= 表示赋值运算符，用于将=右边的数据赋值给=左边的变量，覆盖变量 原来的数值</li></ul><p>移位运算符</p><ul><li>&lt;&lt; 左移运算符，用于将数据的二进制位向左移动，右边使用0补充</li><li>>&gt; 右移运算符，用于将数据的二进制位向右移动，左边使用符号位补充</li><li>>&gt;&gt; 表示逻辑右移运算符，用于将数据的二进制位向右移动，左边使用0 补充</li></ul><p>位运算符</p><ul><li>&amp; 表示按位与运算符，按照二进制位进行与运算，同1为1，有一个为0就为0</li><li>|表示按位或运算符，按照二进制位进行或运算，有一个为1就为1，同0为0</li><li>~ 表示按位取反运算符，按照二进制位进行取反，1为0，0为1</li><li>^ 表示按位异或运算符，按照二进制位进行异或运算，同为0，不同为1</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.声明两个byte类型的变量并初始化</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line"><span class="comment">// 2.打印变量的数值</span></span><br><span class="line">System.out.println(<span class="string">&quot;b1 = &quot;</span> + b1); <span class="comment">// b1 = 11</span></span><br><span class="line">System.out.println(<span class="string">&quot;b2 = &quot;</span> + b2); <span class="comment">// b2 = 13</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;---------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 3.实现位运算符的使用</span></span><br><span class="line"><span class="comment">// b1的二进制为： 0000 1011          </span></span><br><span class="line"><span class="comment">// b2的二进制为： 0000 1101</span></span><br><span class="line">System.out.println( b1 &amp; b2);  <span class="comment">// 按位与：同1为1，一0为0      按位与后的二进制为：0000 1001  =&gt; 转为十进制是：9</span></span><br><span class="line">System.out.println( b1 | b2);  <span class="comment">// 按位或：一1为1，同0为0      按位或后的二进制为：0000 1111  =&gt; 转为十进制是：15</span></span><br><span class="line">System.out.println( b1 ^ b2);  <span class="comment">// 按位异或：相同为0，不同为1  按位异或的二进制为：0000 0110  =&gt; 转为十进制是：6</span></span><br><span class="line">System.out.println( ~ b1);     <span class="comment">// 按位取反：1为0,0为1         按位取反的二进制为：1111 0100 </span></span><br><span class="line"><span class="comment">// 二进制1111 0100转为十进制 =&gt; 先减1: 1111 0011 =&gt; 按位取反：0000 1100 =&gt; 转为十进制：12  =&gt; 添加负号：-12</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>if…else…</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断输入的整数是否为负数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    编程使用if else分支结构判断是否为负数和非负数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfElseTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.提示用户输入一个整数并使用变量记录</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用if else分支结构判断负数和非负数并打印</span></span><br><span class="line"><span class="keyword">if</span>(num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(num + <span class="string">&quot;是负数！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//System.out.println(num + &quot;是非负数！&quot;);</span></span><br><span class="line"><span class="comment">// 针对目前的非负数再次判断是正数还是零</span></span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(num + <span class="string">&quot;是正数!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(num + <span class="string">&quot;是零！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch case分支结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量/表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>: 语句块<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>: 语句块<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">default</span>:语句块n </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210205202548.png" alt=""></p><ul><li>switch()中支持的数据类型有：byte、short、char以及int类型，从jdk1.5 开始支持枚举类型，从jdk1.7开始支持String类型。</li></ul><p>循环结构</p><p>for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式; 条件表达式; 修改初始值表达式)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1: for循环打印1-100的所有奇数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForNumTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.使用for循环打印1 ~ 100之间的所有奇数</span></span><br><span class="line"><span class="comment">// 方式一：根据奇数的概念进行打印</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 若当前i的数值是奇数时则打印，否则不打印   奇数就是不能被2整除的数，也就是对2取余的结果不为0</span></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：根据等差数列的概念来打印  每两个数据之间相差2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2：for循环实现1 ~ 10000之间所有整数的累加和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForSumTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.声明一个变量负责记录累加的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.使用for循环打印1 ~ 10000之间的所有整数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 打印后不换行</span></span><br><span class="line"><span class="comment">//System.out.print(i + &quot; &quot;);</span></span><br><span class="line"><span class="comment">// 将所有i的取值都累加到变量sum中</span></span><br><span class="line">sum += i; <span class="comment">// sum = sum + i;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 专门用于换行</span></span><br><span class="line"><span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.打印最终的累加结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>continue关键字</p><ul><li>continue语句用在循环体中，用于结束本次循环而开始下一次循环</li></ul><p>break关键字</p><ul><li>break用于退出当前语句块，break用在循环体中用于退出循环</li><li>for(;;) - 这种没有循环条件的循环叫做 无限循环，俗称“死循环”</li></ul><p>双重for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印九九乘法表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(j + <span class="string">&quot;x&quot;</span> + i + <span class="string">&quot;=&quot;</span> + j * i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while循环和for循环区别</p><ul><li>while循环和for循环完全可以互换，当然推荐使用for循环</li><li>while循环更适合于明确循环条件但不明确循环次数的场合中</li><li>for循环更适合于明确循环次数或范围的场合中</li><li>while(true) 等价于 for(;;) 都表示无限循环</li></ul><p>do while循环</p><ul><li>do-while循环主要用于至少执行一次循环体的场合中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>一维数组的基本概念</p><ul><li>当需要在Java程序中记录单个数据内容时，则声明一个变量即可。</li><li>当需要在Java程序中记录多个类型相同的数据内容时，则声明一个一维数 组即可，一维数组本质上就是在内存空间中申请一段连续的存储单元</li><li>数组是相同数据类型的多个元素的容器，元素按线性顺序排列，在Java语 言中体现为一种引用数据类型。</li></ul><p>一维数组的声明方式</p><ul><li>数据类型[] 数组名称 = new 数据类型[数组的长度];</li><li>调用数组的length属性可以获取数组的长度</li></ul><p>一维数组的初始化方式</p><ul><li>基本类型的数组（数据元素为基本类型）创建后，其元素的初始值：byte、 short、char、int、long为0；float和double为0.0；boolean为false</li><li>可以在数组声明的同时进行初始化，具体如下： 数据类型[] 数组名称 = {初始值1, 初始值2, …};</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    编程实现一维数组的声明和使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.声明一个长度为2元素类型为int类型的一维数组</span></span><br><span class="line"><span class="comment">// 数据类型[] 数组名称 = new 数据类型[数组的长度];</span></span><br><span class="line"><span class="comment">//int arr1[] = new int[2];    // 两种方式从结果上来说是一样的，不推荐使用</span></span><br><span class="line"><span class="comment">//int num = 2;                // 声明一个初始值为2的变量 </span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];      <span class="comment">// 推荐该方式，更容易与变量的声明区分，提高了代码的可读性   动态方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.打印一维数组的长度以及每个元素的数值</span></span><br><span class="line">System.out.println(<span class="string">&quot;数组的长度是：&quot;</span> + arr1.length); <span class="comment">// 2   下标从0 ~ 1</span></span><br><span class="line">System.out.println(<span class="string">&quot;下标为0的元素是：&quot;</span> + arr1[<span class="number">0</span>]);  <span class="comment">// 0  默认值</span></span><br><span class="line">System.out.println(<span class="string">&quot;下标为1的元素是：&quot;</span> + arr1[<span class="number">1</span>]); <span class="comment">// 0  </span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;下标为2的元素是：&quot; + arr1[2]); // 编译ok，运行发生ArrayIndexOutOfBoundsException数组下标越界异常</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 3.使用for循环打印数组中的所有元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;下标为&quot;</span> + i + <span class="string">&quot;的元素是：&quot;</span> + arr1[i]); <span class="comment">// 全是0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7.直接通过数组名来打印数组中的所有元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;arr1 = &quot;</span> + arr1); <span class="comment">// 地址信息</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 4.声明一个长度为5元素类型为double类型的一维数组</span></span><br><span class="line"><span class="type">double</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 打印数组中每个元素值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;下标为&quot;</span> + i + <span class="string">&quot;的元素是：&quot;</span> + arr2[i]); <span class="comment">// 全是0.0 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 5.声明数组的同时就对数组中的元素进行初始化   静态方式的简化版</span></span><br><span class="line"><span class="type">char</span>[] arr3 = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// 打印数组中的每个元素值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;下标为&quot;</span> + i + <span class="string">&quot;的元素是：&quot;</span> + arr3[i]); <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 6.特殊的写法   静态方式</span></span><br><span class="line"><span class="type">boolean</span>[] arr4 = <span class="keyword">new</span> <span class="title class_">boolean</span>[]&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">// 打印数组中的每个元素值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr4.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;下标为&quot;</span> + i + <span class="string">&quot;的元素是：&quot;</span> + arr4[i]); <span class="comment">// true true false false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存结构</p><ul><li>栈用于存放程序运行过程当中所有的局部变量。一个运行的Java程序从开 始到结束会有多次变量的声明</li><li>JVM会在其内存空间中开辟一个称为“堆”的存储空间，这部分空间用于存 储使用new关键字创建的数组和对象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206214806.png" alt=""></p><p>数组的优缺点</p><ul><li>可以直接通过下标(或索引)的方式访问指定位置的元素，速度很快。</li><li>数组要求所有元素的类型相同。</li><li>数组要求内存空间连续，并且长度一旦确定就不能修改。</li><li>增加和删除元素时可能移动大量元素，效率低。</li></ul><p>一维数组的拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayCopyTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.声明一个初始值为11、22、33、44、55的一维数组</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"><span class="comment">// 打印数组中的所有元素</span></span><br><span class="line">System.out.print(<span class="string">&quot;第一个数组中的元素有：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>); <span class="comment">// 11 22 33 44 55</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 2.声明一个长度为3元素类型为int类型的一维数组</span></span><br><span class="line"><span class="type">int</span>[] brr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 打印数组中的所有元素</span></span><br><span class="line">System.out.print(<span class="string">&quot;第二个数组中的元素有：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; brr.length; i++) &#123;</span><br><span class="line">System.out.print(brr[i] + <span class="string">&quot; &quot;</span>); <span class="comment">// 0 0 0</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 3.将第一个数组中的中间3个元素赋值到第二个数组中</span></span><br><span class="line"><span class="comment">// 可以直接使用Java官方提供的拷贝功能</span></span><br><span class="line"><span class="comment">// 表示将数组arr中下标从1开始的3个元素拷贝到数组brr中下标从0开始的位置</span></span><br><span class="line">System.arraycopy(arr, <span class="number">1</span>, brr, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 打印第二个数组中的所有元素</span></span><br><span class="line">System.out.print(<span class="string">&quot;第二个数组中的元素有：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; brr.length; i++) &#123;</span><br><span class="line">System.out.print(brr[i] + <span class="string">&quot; &quot;</span>); <span class="comment">// 22 33 44</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------------------------&quot;</span>);</span><br><span class="line"><span class="comment">// 表示将变量arr的数值赋值给变量brr，覆盖变量brr中原来的数值</span></span><br><span class="line"><span class="comment">// 数组名arr的内存空间中存放的是数据在堆区中的内存地址信息，赋值后让brr变量中存放了arr所指向堆区的内存地址</span></span><br><span class="line"><span class="comment">// 也就是让brr和arr指向了同一块堆区空间，有本质上就是改变指向而已</span></span><br><span class="line">brr = arr;</span><br><span class="line"><span class="comment">// 打印第二个数组中的所有元素</span></span><br><span class="line">System.out.print(<span class="string">&quot;第二个数组中的元素有：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; brr.length; i++) &#123;</span><br><span class="line">System.out.print(brr[i] + <span class="string">&quot; &quot;</span>); <span class="comment">// 22 33 44</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><ul><li>编程统计用户输入任意一个正整数中每个数字出现次数的统计并打印</li><li>如：123123 =&gt; 1出现2次，2出现2次，3出现2次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayCountTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个正整数：&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备一个长度为10元素类型int类型的一维数组，默认值为0</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆分正整数中的每个数字并统计到一维数组中</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> num;</span><br><span class="line"><span class="keyword">while</span>(temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">arr[temp%<span class="number">10</span>]++;</span><br><span class="line">temp /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印最终的统计结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;数字&quot;</span> + i + <span class="string">&quot;出现了&quot;</span> + arr[i] + <span class="string">&quot;次！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组工具类</p><ul><li>java.util.Arrays类可以实现对数组中元素的遍历、查找、排序等操作。</li></ul><p>常用方法：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206215853.png" alt=""></p><p>二维数组</p><ul><li>二维数组本质上就是由多个一维数组摞在一起组成的数组，二维数组中 的每个元素都是一维数组，而一维数组中的每个元素才是数据内容</li><li>数据类型<code>[][]</code> 数组名称 = new 数据类型<code>[行数][列数]</code>; </li><li>数据类型<code>[][]</code>数组名称 = </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;变量的声明和使用&quot;&gt;&lt;a href=&quot;#变量的声明和使用&quot; class=&quot;headerlink&quot; title=&quot;变量的声明和使用&quot;&gt;&lt;/a&gt;变量的声明和使用&lt;/h1&gt;&lt;p&gt;变量的声明方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据类型 变量名 = 初始值;&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="java" scheme="https://setcreed.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://setcreed.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java学习目录</title>
    <link href="https://setcreed.github.io/posts/c211d881/"/>
    <id>https://setcreed.github.io/posts/c211d881/</id>
    <published>2022-03-04T13:53:40.000Z</published>
    <updated>2023-11-14T23:51:51.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java学习"><a href="#Java学习" class="headerlink" title="Java学习"></a>Java学习</h1><p><a href="https://setcreed.github.io/posts/91b391ad">01 java基础</a></p><p><a href="https://setcreed.github.io/posts/35d09233">02 ssm基础</a></p><p><a href="https://setcreed.github.io/posts/5694ead3">03 springboot基础</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java学习&quot;&gt;&lt;a href=&quot;#Java学习&quot; class=&quot;headerlink&quot; title=&quot;Java学习&quot;&gt;&lt;/a&gt;Java学习&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://setcreed.github.io/posts/91b391ad&quot;&gt;01</summary>
      
    
    
    
    <category term="java" scheme="https://setcreed.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://setcreed.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>01-vim学习</title>
    <link href="https://setcreed.github.io/posts/71c39997/"/>
    <id>https://setcreed.github.io/posts/71c39997/</id>
    <published>2022-03-04T13:45:04.000Z</published>
    <updated>2023-11-14T23:51:51.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim基本认识"><a href="#vim基本认识" class="headerlink" title="vim基本认识"></a>vim基本认识</h1><h2 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h2><p>服务器上编写文件配置</p><p>后端和运维工程师必须掌握的编辑器，不然服务器上操作很不习惯</p><p>纯键盘操作，可以提高编辑效率</p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>vim难上手学习曲线陡峭</p><p>vim资料少，网上的博客资料都比较零散，学习困难</p><p>vim命令多，难以记忆</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>linux 自带</p><h2 id="初识vim"><a href="#初识vim" class="headerlink" title="初识vim"></a>初识vim</h2><ul><li>输入vim命令进入vim</li><li>进去之后似乎没法输入东西，起始默认进去是normal模式</li><li>使用<code>:q</code>可以退出vim</li></ul><h2 id="开始编辑"><a href="#开始编辑" class="headerlink" title="开始编辑"></a>开始编辑</h2><p>进入编辑模式就可以像其他编辑模式一样编辑</p><ul><li>使用<code>i(insert)</code>进入编辑模式，开始输入文字</li><li>或者输入 <code>a(append), o(open a line below)</code></li><li>使用Esc又可以回到normal模式， 输入<code>:wq</code>保存退出</li><li>a、i、o   /  A、I、O</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a append        a 往后追加</span><br><span class="line">i insert         i往前追加</span><br><span class="line">o open a line below     o下一行写</span><br><span class="line"></span><br><span class="line">A append after line        A 在一行的结尾写</span><br><span class="line">I insert before line       I 在一行的前面写</span><br><span class="line">O append a line above   O 在上一行写</span><br></pre></td></tr></table></figure><h2 id="vim多种模式"><a href="#vim多种模式" class="headerlink" title="vim多种模式"></a>vim多种模式</h2><p>vim和其他编辑器的区别在于多种模式</p><ul><li>进入vim默认是normal模式</li><li>使用a、i 等进入编辑模式</li><li><code>:cmd</code>模式和 <code>v(visual)</code>可视化模式</li></ul><h3 id="为什么vim进入之后不像其他编辑器一样直接插入"><a href="#为什么vim进入之后不像其他编辑器一样直接插入" class="headerlink" title="为什么vim进入之后不像其他编辑器一样直接插入"></a>为什么vim进入之后不像其他编辑器一样直接插入</h3><ul><li>进入vim模式是normal模式，使用    esc从插入进入普通模式</li><li>普通模式下可以进行各种命令的操作和移动</li><li>大部分情况下是在浏览而不是编辑，所以vim默认是normal模式</li></ul><h2 id="Insert插入模式"><a href="#Insert插入模式" class="headerlink" title="Insert插入模式"></a>Insert插入模式</h2><ul><li>使用a、i、o    A、I、O进入插入模式</li></ul><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>normal模式输入<code>:之后的命令</code>，比如说保存退出命令<code>:wq</code></p><ul><li>w q命令</li><li>分屏 ： <code>vs(vertical split)</code>      <code>sp(split)</code></li><li>比如说使用：<code>%s/foo/bar</code></li><li><code>/g</code>全局替换</li></ul><h2 id="visual（可视）模式"><a href="#visual（可视）模式" class="headerlink" title="visual（可视）模式"></a>visual（可视）模式</h2><ul><li>Normal模式下使用v进入visual选择</li><li>使用  <code>V</code>选择整行</li><li>使用<code>ctrl+v</code>进行方块选择</li></ul><h2 id="vim插入模式小技巧"><a href="#vim插入模式小技巧" class="headerlink" title="vim插入模式小技巧"></a>vim插入模式小技巧</h2><h3 id="快速纠错"><a href="#快速纠错" class="headerlink" title="快速纠错"></a>快速纠错</h3><ul><li>进入vim之后首先使用<code>a/i/o</code>之一进入插入模式</li><li><code>ctrl+h</code>删除上一个字符，<code>ctrl+w</code>删除上一个单词，<code>ctrl+u</code>删除当前行</li></ul><h3 id="快速切换insert和normal模式"><a href="#快速切换insert和normal模式" class="headerlink" title="快速切换insert和normal模式"></a>快速切换insert和normal模式</h3><p>很多键盘的键位设置，Esc按起来不方便，不方便切换到normal</p><ul><li>使用<code>ctrl+c</code>代替Esc 或者 <code>ctrl+[</code></li><li>在normal模式下用 <code>gi</code>快速跳转到你最后一次编辑的地方并进入插入模式</li></ul><h2 id="vim快速移动"><a href="#vim快速移动" class="headerlink" title="vim快速移动"></a>vim快速移动</h2><h3 id="反人类的hjkl"><a href="#反人类的hjkl" class="headerlink" title="反人类的hjkl"></a>反人类的hjkl</h3><p>众所周知，vim normal 模式使用了反人类的 <strong>hjkl</strong> 来移动</p><ul><li>据说编辑器的作者在编写vim的时候键盘还没有流行上下左右按键</li><li>左（h）   右（l）   上（k）      下（j），移动也不会让手指脱离主键盘区</li></ul><h3 id="在单词之间移动"><a href="#在单词之间移动" class="headerlink" title="在单词之间移动"></a>在单词之间移动</h3><ul><li><code>w/W</code>移动到下一个<code>word/WORD</code>开头，<code>e/E</code>下一个<code>word/WORD</code>尾</li><li><code>b/B</code>回到上一个<code>word/WORD</code>开头，可以理解成backword</li><li><code>word</code>指的是以非空白符分割的单词，<code>WORD</code>以空白符分割的单词</li></ul><h3 id="行间搜索移动"><a href="#行间搜索移动" class="headerlink" title="行间搜索移动"></a>行间搜索移动</h3><p>同一行快速移动的方式其实是搜索一个字符并且移动到该字符</p><ul><li>使用<code>f&#123;char&#125;</code>可以移动到char字符上，t 移动到char的前一个字符</li><li>如果第一次没搜到，可以用分号(;) /  逗号(,) 继续搜索该行下一个 / 上一个</li><li>大写的F表示反过来搜前面的字符</li></ul><h3 id="vim水平移动"><a href="#vim水平移动" class="headerlink" title="vim水平移动"></a>vim水平移动</h3><ul><li><code>0</code>移动到行首第一个字符， <code>^</code>移动到第一个非空白的字符</li><li><code>$</code>移动到行尾，<code>g_</code>移动到行尾非空白字符</li><li>记住常用的 <code>0</code>和<code>$</code> 就可以满足日常需求了</li></ul><h3 id="vim垂直移动"><a href="#vim垂直移动" class="headerlink" title="vim垂直移动"></a>vim垂直移动</h3><ul><li>使用括号()在句子间移动，你可以用<code>:help (</code>来查看帮助文档</li><li>使用<code>&#123;&#125;</code>在段落之间移动</li></ul><h3 id="vim页面移动"><a href="#vim页面移动" class="headerlink" title="vim页面移动"></a>vim页面移动</h3><ul><li><code>gg/G</code>移动到文件开头和结尾，你可以使用<code>ctrl+o</code>快速返回</li><li><code>H / M / L</code>跳转到屏幕的开头(Head)，中间(Middle)和结尾(Lower)</li><li><code>ctrl+u</code>与<code>ctrl+f</code>上下翻页（upword / forward）。<code>zz</code>把屏幕置为中间</li></ul><h1 id="vim快速增删改查"><a href="#vim快速增删改查" class="headerlink" title="vim快速增删改查"></a>vim快速增删改查</h1><h2 id="vim增加字符"><a href="#vim增加字符" class="headerlink" title="vim增加字符"></a>vim增加字符</h2><ul><li>进入插入模式编辑文本</li><li>使用<code>a / i/ o</code>进入插入模式</li></ul><h2 id="vim快速删除"><a href="#vim快速删除" class="headerlink" title="vim快速删除"></a>vim快速删除</h2><ul><li>vim在normal模式下使用<code>x</code>快速删除一个字符</li><li>使用<code>d(delete)</code>配合文本对象快速删除一个单词</li><li><code>d</code>和<code>x</code>可以搭配数字来执行多次，数字+命令表示多次执行命令</li></ul><h2 id="vim快速修改"><a href="#vim快速修改" class="headerlink" title="vim快速修改"></a>vim快速修改</h2><ul><li>常用有三个，<code>r(replace)</code>，<code>c(change)</code>，<code>s(substitute)</code></li><li>normal模式下使用<code>r</code>可以替换一个字符。<code>s</code>替换并进入插入模式</li><li>使用<code>c</code>配合文本对象，我们可以快速进行修改</li></ul><h2 id="vim查询"><a href="#vim查询" class="headerlink" title="vim查询"></a>vim查询</h2><ul><li>使用<code>/</code>或者<code>?</code>进行前向或者反向搜索</li><li>使用<code>n/N</code>跳转到下一个或者上一个匹配</li><li>使用<code>*</code>或者<code>#</code>进行当前单词的前向和后向匹配</li></ul><h1 id="vim如何搜索替换"><a href="#vim如何搜索替换" class="headerlink" title="vim如何搜索替换"></a>vim如何搜索替换</h1><h2 id="vim替换命令"><a href="#vim替换命令" class="headerlink" title="vim替换命令"></a>vim替换命令</h2><p>substitute命令允许我们查找并且替换文本，并且支持正则</p><ul><li>:[range]s[ubstitute]/{pattern}/{string}/[flags]</li><li>range表示范围，比如<code>:10,20</code>表示10-20行，<code>%</code>表示全部</li><li>pattern是要替换的模式，<code>string</code>是替换后文本</li></ul><h2 id="替换标志位"><a href="#替换标志位" class="headerlink" title="替换标志位"></a>替换标志位</h2><p>flags有几个常用的标志</p><ul><li><code>g(global)</code>表示全局范围内执行</li><li><code>c(confirm)</code>表示确认，可以确认或者拒绝修改</li><li><code>n(number)</code>报告匹配到的次数而不替换，可以用来查询匹配次数</li></ul><p>例子：<code>:% s/self/this/g</code> 表示把所有的self 都替换成this</p><h1 id="vim多文件操作"><a href="#vim多文件操作" class="headerlink" title="vim多文件操作"></a>vim多文件操作</h1><h2 id="Buffer-Window-Tab"><a href="#Buffer-Window-Tab" class="headerlink" title="Buffer Window Tab"></a>Buffer Window Tab</h2><p>几个多文件操作相关的概念</p><ul><li>Buffer是指打开的一个文件的内存缓冲区</li><li>窗口是Buffer可视化的分割区域</li><li>Tab可以组织窗口为一个工作区</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126094434.png" alt=""></p><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer 缓冲区"></a>Buffer 缓冲区</h2><ul><li>vim 打开一个文件后会加载内容到缓冲区</li><li>之后的修改都是针对内存中的缓冲过去，并不会直接保存到文件</li><li>直到我们执行<code>:w</code>的时候才会把修改内容写入到文件里</li></ul><h2 id="Buffer-切换"><a href="#Buffer-切换" class="headerlink" title="Buffer 切换"></a>Buffer 切换</h2><ul><li>使用<code>:ls</code>会列举当前缓冲区，然后使用<code>:b n</code>跳转到第n个缓冲区</li><li><code>:bpre</code>跳转到前一个，<code>:bnext</code>跳转到下一个，<code>:bfirst</code>跳转到第一个，<code>:blast</code>跳转到最后一个</li><li>或者用<code>:b buffer_name</code>加上tab补全进行跳转</li></ul><h2 id="windows窗口"><a href="#windows窗口" class="headerlink" title="windows窗口"></a>windows窗口</h2><p>窗口是可视化的分割区域</p><ul><li>一个缓冲区可以分割成多个窗口，每个窗口也可以打开不同的缓冲区</li><li><code>&lt;ctrl+w&gt;s</code>水平分割，<code>&lt;ctrl+w&gt;v</code>垂直分割。或者<code>:sp</code>和<code>:vs</code></li><li>每个窗口可以继续被无限分割</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126095824.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126095854.png" alt=""></p><h2 id="Tab（标签页）将窗口分组"><a href="#Tab（标签页）将窗口分组" class="headerlink" title="Tab（标签页）将窗口分组"></a>Tab（标签页）将窗口分组</h2><p>Tab是可以容纳一系列窗口的容器 (:h tabpage)</p><ul><li>vim的Tab和其他编辑器不太一样，可以想象成linux的虚拟桌面</li><li>比如一个Tab全用来编辑python文件，一个Tab全是html文件</li><li>相比窗口，Tab一般用的比较少，Tab太多管理起来比较麻烦</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126100624.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126100815.png" alt=""></p><h1 id="vim的文本对象"><a href="#vim的文本对象" class="headerlink" title="vim的文本对象"></a>vim的文本对象</h1><h2 id="Text-Object-文本对象"><a href="#Text-Object-文本对象" class="headerlink" title="Text Object(文本对象)"></a>Text Object(文本对象)</h2><ul><li>vim里文本也有对象的概念，比如一个单词。一段句子，一个段落</li><li>很多其他编辑器经常只能操作单个字符来修改文本，比较低效</li><li>通过操作文本对象来修改要比只操作单个字符高效</li></ul><h2 id="文本对象操作方式"><a href="#文本对象操作方式" class="headerlink" title="文本对象操作方式"></a>文本对象操作方式</h2><ul><li>[number]<command>[text object]</li><li>number 表示次数，command是命令，<code>d(elete), c(hange), y(yank)</code></li><li>text object是要操作的文本对象，比如单词w，句子s，段落p</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126104353.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126104857.png" alt=""></p><h1 id="vim复制粘贴与寄存器的使用"><a href="#vim复制粘贴与寄存器的使用" class="headerlink" title="vim复制粘贴与寄存器的使用"></a>vim复制粘贴与寄存器的使用</h1><h2 id="vim在normal模式复制粘贴"><a href="#vim在normal模式复制粘贴" class="headerlink" title="vim在normal模式复制粘贴"></a>vim在normal模式复制粘贴</h2><ul><li>在normal模式下复制粘贴分别使用y(yank)和p(put)，剪切使用d和p</li><li>使用v(visual)命令选中要复制的地方，然后使用p粘贴</li><li>配合文本对象：比如使用<code>yiw</code>复制一个单词，<code>yy</code>复制一行</li><li>注意：vim里的剪切(cut) ，复制(copy)，粘贴(past)分别为  <code>delete / yank / put</code></li></ul><h2 id="在insert模式下的复制粘贴"><a href="#在insert模式下的复制粘贴" class="headerlink" title="在insert模式下的复制粘贴"></a>在insert模式下的复制粘贴</h2><p>很多人会使用鼠标进行选中，然后使用<code>ctrl+v</code>或者<code>cmd+v</code>粘贴</p><ul><li>这个和其他的文本编辑器差不多，但是在粘贴代码有个坑</li><li>很多人在vimrc中设置了<code>autoindent</code>，粘贴Python代码缩进错乱</li><li>这时候需要使用<code>:set paste</code>和<code>:set nopaste</code>解决</li></ul><h2 id="什么是vim的寄存器"><a href="#什么是vim的寄存器" class="headerlink" title="什么是vim的寄存器"></a>什么是vim的寄存器</h2><ul><li>vim里操作的是寄存器而不是系统剪贴板，这和其他编辑器不同</li><li>默认我们使用d删除或者y复制的内容都放到了“无名寄存器”</li><li>使用x删除一个字符放到无名寄存器，然后p粘贴，可以调换俩字符</li></ul><h2 id="深入寄存器-register"><a href="#深入寄存器-register" class="headerlink" title="深入寄存器(register)"></a>深入寄存器(register)</h2><p>vim不使用单一剪切板进行剪切、复制与粘贴，而是多组寄存器</p><ul><li>通过<code>&quot;&#123;register&#125;</code>前缀可以指定寄存器，不指定默认用无名寄存器</li><li>比如使用<code>&quot;ayiw</code>复制一个单词到寄存器a中，<code>&quot;bdd</code>删除当前行到寄存器b中</li></ul><h2 id="其他寄存器"><a href="#其他寄存器" class="headerlink" title="其他寄存器"></a>其他寄存器</h2><p>除了有名寄存器a-z，vim中还有一些其他寄存器</p><ul><li>复制专用寄存器   <code>&quot;0</code>使用y 复制文本同时会被拷到复制寄存器0</li><li>系统剪切板 <code>&quot;+</code>可以在复制前加上<code>&quot;+</code>复制到系统剪切板</li><li>其他一些寄存器比如 <code>&quot;%</code>当前文件名，<code>&quot;.</code>上次插入的文本</li><li>使用<code>:set clipboard=unnamed</code>可以让你直接复制粘贴系统剪切板内容</li></ul><h1 id="vim使用宏完成批量操作"><a href="#vim使用宏完成批量操作" class="headerlink" title="vim使用宏完成批量操作"></a>vim使用宏完成批量操作</h1><p>从一个需求说起，给多行的url链接加上双引号</p><h2 id="什么是vim宏"><a href="#什么是vim宏" class="headerlink" title="什么是vim宏"></a>什么是vim宏</h2><ul><li>宏可以看成是一些列命令的集合</li><li>我们可以使用宏  录制  一些列操作，然后用于  回放  </li><li>宏可以非常方便的把一系列命令用在多行文本上</li></ul><h2 id="如何使用宏"><a href="#如何使用宏" class="headerlink" title="如何使用宏"></a>如何使用宏</h2><p>宏的使用分为录制和回放</p><ul><li>vim使用<code>q</code>来录制，同时也是<code>q</code>结束录制</li><li>使用<code>q&#123;register&#125;</code>选择要保存的就存器，把录制的命令保存在其中</li><li>使用<code>@&#123;register&#125;</code>回放寄存器中保存的一系列命令</li></ul><h2 id="用宏解决刚才的问题"><a href="#用宏解决刚才的问题" class="headerlink" title="用宏解决刚才的问题"></a>用宏解决刚才的问题</h2><ul><li>先给一行加上双引号，然后再回放到其他所有行</li><li>我们先使用<code>q</code>开始录制，给一行加上双引号，之后使用<code>q</code>退出</li><li>在剩下的所有行中回放录制的宏</li><li>在剩下的行中，先按<code>shift+v</code>选中一行，再<code>G</code>选中剩下的所有，<code>:normal @&#123;register&#125;</code></li></ul><p>不使用宏解决刚才的问题</p><ul><li><code>shift+v</code>选中一行，<code>G</code>选中剩下的，<code>:normal I&quot;</code>，这样先在所有的url前面加上左双引号</li><li><code>shift+v</code>选中一行，选中剩下的，<code>:normal A&quot;</code>，在后面插入双引号</li></ul><h1 id="vim补全大法"><a href="#vim补全大法" class="headerlink" title="vim补全大法"></a>vim补全大法</h1><p>只要手速快，补全什么的都是浮云</p><ul><li>补全是根据当前环境上下文，由编辑器 猜 你想输入的东西</li><li>比如补全一个单词、文件名，或者代码中的函数、变量名等</li><li>vim中提供了多种补全功能，还可以由插件拓展功能实现代码补全</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126124229.png" alt=""></p><h2 id="常见的三种补全类型"><a href="#常见的三种补全类型" class="headerlink" title="常见的三种补全类型"></a>常见的三种补全类型</h2><ul><li>使用<code>ctrl+n</code>和<code>ctrl+p</code>补全单词</li><li>使用<code>ctrl+x</code>   <code>ctrl+f</code>补全文件名</li><li>使用<code>ctrl+x</code>与<code>ctrl+o</code>补全代码，需要开启文件类型检查，安装插件</li></ul><h1 id="给vim换个配色"><a href="#给vim换个配色" class="headerlink" title="给vim换个配色"></a>给vim换个配色</h1><p>很多现代化的编辑器和IDE都支持更换主题，vim当然也可以</p><ul><li>使用<code>:colorscheme</code>显示当前的主题配色，默认是 default</li><li>使用<code>:colorscheme &lt;ctrl+d&gt;</code>可以显示所有的配色</li><li>使用<code>:colorscheme 配色名</code> 就可以修改配色</li></ul><p>可以在网上下载主题配色</p><p>举个例子：<a href="https://github.com/w0ng/vim-hybrid">https://github.com/w0ng/vim-hybrid</a></p><p>然后<code>git clone https://github.com/w0ng/vim-hybrid.git</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.vim/colors</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> vim-hybrid/colors/hybrid.vim ~/.vim/colors</span><br></pre></td></tr></table></figure><p>然后就可使用了</p><p>vim配色：<a href="http://www.easycolor.cc/vim/list.html">http://www.easycolor.cc/vim/list.html</a></p><h1 id="编写vim配置"><a href="#编写vim配置" class="headerlink" title="编写vim配置"></a>编写vim配置</h1><h2 id="什么是vim配置"><a href="#什么是vim配置" class="headerlink" title="什么是vim配置"></a>什么是vim配置</h2><ul><li>vim里非常多常用的设置，比如<code>set number</code>设置行号</li><li>之前的使用都是在vim里临时设置，没法持久化，每次设置都很麻烦</li><li>vimrc提供了一种持久化配置的方式，我们可以自定义配置</li></ul><h2 id="如何编写vim配置文件"><a href="#如何编写vim配置文件" class="headerlink" title="如何编写vim配置文件"></a>如何编写vim配置文件</h2><ul><li>Linux / Unix 下新建一个隐藏文件夹 <code>vim ~/.vimrc</code></li><li>Windows系统 <code>vim $MYVIMRC</code>，通过环境变量编辑配置文件</li><li>然后就可以编写配置文件了</li></ul><h2 id="vim配置都包含什么"><a href="#vim配置都包含什么" class="headerlink" title="vim配置都包含什么"></a>vim配置都包含什么</h2><ul><li>常用设置，比如<code>:set nu</code> 设置行号，<code>colorscheme hybrid</code>设置主题</li><li>常用的vim映射，比如<code>noremap &lt;leader&gt;w :w&lt;cr&gt;</code>保存文件</li><li>自定义的vimscript函数和插件的配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/pic_img/cdn_img/20200126135203.png" alt=""></p><h2 id="vim中的映射基本设置"><a href="#vim中的映射基本设置" class="headerlink" title="vim中的映射基本设置"></a>vim中的映射基本设置</h2><ul><li>设置一下leader键<code>let mapleader = &quot;,&quot;</code></li><li>比如用<code>inoremap &lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt;</code>在插入模式保存</li></ul><p>输入<code>:h option-list</code>可以查看所有设置的选项</p><h1 id="vim映射"><a href="#vim映射" class="headerlink" title="vim映射"></a>vim映射</h1><h2 id="什么是vim映射"><a href="#什么是vim映射" class="headerlink" title="什么是vim映射"></a>什么是vim映射</h2><p>vim映射就是把一个操作映射到另一个操作</p><ul><li>如果你不满现在的按键设置，比如说vim本来的命令</li><li>或者你想映射一些方便的快捷键</li><li>按照你自己的意愿定制vim</li></ul><h2 id="基本映射"><a href="#基本映射" class="headerlink" title="基本映射"></a>基本映射</h2><p>基本映射就是指 normal模式下的映射，当然还有其他模式下的映射</p><ul><li>使用map就可以实现映射。比如 <code>:map - x</code>，然后按<code>-</code>就会删除字符</li><li><code>:map &lt;space&gt; viw</code>告诉vim按下空格的时候选中整个单词</li><li><code>:map &lt;c-d&gt; dd</code>可以使用<code>ctrl+d</code>执行<code>dd</code>命令删除一行</li></ul><h2 id="模式映射"><a href="#模式映射" class="headerlink" title="模式映射"></a>模式映射</h2><ul><li>用<code>nmap / vmap / imap</code>定义映射只在<code>normal / visual / insert</code>分别有效</li><li><code>:vmap \ U</code>把在visual模式下选中的文本大小(u/U转换大小写)</li><li>使用<code>:imap &lt;c-d&gt; &lt;Esc&gt;ddi</code>，在insert模式下映射<code>ctrl+d</code>来删除一行</li></ul><h2 id="现有映射的问题"><a href="#现有映射的问题" class="headerlink" title="现有映射的问题"></a>现有映射的问题</h2><p>比如说映射<code>:namp - dd</code>， 再 <code>:nmap \ -</code></p><p>当你按下<code>\</code>时，vim会解释成<code>-</code>。而我们有映射了<code>-</code>，vim会继续解析<code>-</code>为<code>dd</code>，所以按下<code>\</code>会删除整行。</p><h2 id="递归与非递归映射"><a href="#递归与非递归映射" class="headerlink" title="递归与非递归映射"></a>递归与非递归映射</h2><p><code>*map</code>系列命令有递归的风险</p><ul><li>如果你安装了一个插件，插件映射到了同一个按键的不同行为，用冲突 就会有一个失效</li><li>想要保证映射没有冲突就会非常痛苦</li><li>解决方案就是使用非递归映射</li></ul><h2 id="非递归映射"><a href="#非递归映射" class="headerlink" title="非递归映射"></a>非递归映射</h2><p>vim提供了非递归映射，这些命令不会递归解释</p><ul><li>使用<code>*map</code>对应的<code>nnoremap / vnoremap / inoremap</code></li><li>任何时候都应该使用非递归映射，拯救自己和插件作者</li></ul><p>网上有免费的小书<a href="http://higrid.net/hi/books/learnvimthehardway">《笨方法学Vimscript》</a>          学习vim脚本的书籍</p><h1 id="vim安装插件"><a href="#vim安装插件" class="headerlink" title="vim安装插件"></a>vim安装插件</h1><h2 id="vim插件简介"><a href="#vim插件简介" class="headerlink" title="vim插件简介"></a>vim插件简介</h2><p>和其他现代流行编辑器一样，vim同样支持插件扩展</p><ul><li>vim插件是使用vimscript 或者其他语言编写的vim功能扩展</li><li>编辑器自带的功能有限，有了插件之后几乎可以无限扩展其功能</li></ul><h2 id="安装插件介绍"><a href="#安装插件介绍" class="headerlink" title="安装插件介绍"></a>安装插件介绍</h2><p>原始的方式是直接clone插件代码，现如今vim有很多插件管理器</p><p>常见的有<code>vim-plug</code>，<code>Vundle</code>，<code>Pathogen</code>，<code>Dein.Vim</code>，<code>volt</code>等</p><p>综合性能、易用性、文档等几个方面考虑，推荐使用<code>vim-plug</code></p><h2 id="使用vim-plug安装插件"><a href="#使用vim-plug安装插件" class="headerlink" title="使用vim-plug安装插件"></a>使用vim-plug安装插件</h2><p><a href="https://github.com/junegunn/vim-plug">https://github.com/junegunn/vim-plug</a></p><p>按照文档进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 终端输入</span></span><br><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装第一个插件"><a href="#安装第一个插件" class="headerlink" title="安装第一个插件"></a>安装第一个插件</h2><p>安装vim-startify，一个好用的vim开屏插件</p><ul><li><a href="https://github.com/mhinz/vim-startify">https://github.com/mhinz/vim-startify</a></li><li>修改<code>.vimrc</code>文件，增加该插件名称  <code>Plug &#39;mhinz/vim-startify&#39;</code></li><li>重新启动vim 或者source 一下 <code>.vimrc</code>，执行<code>:PlugInstall</code></li></ul><h1 id="如何寻找需要的插件"><a href="#如何寻找需要的插件" class="headerlink" title="如何寻找需要的插件"></a>如何寻找需要的插件</h1><p>先有需求，后有插件。大部分插件都托管在github上</p><ul><li>通过google搜索关键字寻找想要的插件</li><li><a href="https://vimawesome.com/">https://vimawesome.com/</a></li><li>浏览网上开源的vim配置借鉴想要的插件</li></ul><h1 id="vim美化插件"><a href="#vim美化插件" class="headerlink" title="vim美化插件"></a>vim美化插件</h1><h2 id="更改vim的外观"><a href="#更改vim的外观" class="headerlink" title="更改vim的外观"></a>更改vim的外观</h2><ul><li>修改启动界面：<a href="https://github.com/mhinz/vim-startify">https://github.com/mhinz/vim-startify</a></li><li>状态栏美化：<a href="https://github.com/vim-airline/vim-airline">https://github.com/vim-airline/vim-airline</a></li><li>增加代码缩进线条：<a href="https://github.com/yggdroot/indentline">https://github.com/yggdroot/indentline</a></li></ul><h2 id="vim配色方案"><a href="#vim配色方案" class="headerlink" title="vim配色方案"></a>vim配色方案</h2><ul><li>vim-hybird配色：<a href="https://github.com/w0ng/vim-hybird">https://github.com/w0ng/vim-hybird</a></li><li>solarized配色：<a href="https://github.com/altercation/vim-colors-solarized">https://github.com/altercation/vim-colors-solarized</a></li><li>gruvbox配色：<a href="https://github.com/morhetz/gruvbox">https://github.com/morhetz/gruvbox</a></li></ul><h1 id="vim文件目录和搜索插件"><a href="#vim文件目录和搜索插件" class="headerlink" title="vim文件目录和搜索插件"></a>vim文件目录和搜索插件</h1><h2 id="文件目录树"><a href="#文件目录树" class="headerlink" title="文件目录树"></a>文件目录树</h2><p>使用nerdtree插件进行文件目录树管理</p><ul><li>地址：<a href="http://github.com/scrooloose/nerdtree">http://github.com/scrooloose/nerdtree</a></li><li><code>autocmd vimenter * NERDTree</code> 可以在启动vim的时候打开目录树</li><li><code>nnoremap &lt;leader&gt;v :NERDTreeFind&lt;cr&gt;</code>查找文件位置</li></ul><h2 id="模糊搜索器"><a href="#模糊搜索器" class="headerlink" title="模糊搜索器"></a>模糊搜索器</h2><p>如果想快速查找并且打开一个文件可以用 <code>ctrlp</code> 插件</p><ul><li><a href="http://github.com/ctrlpvim/ctrlp.vim">http://github.com/ctrlpvim/ctrlp.vim</a></li><li>需要映射  <code>let g:ctrlp_map = &#39;&lt;c-p&gt;&#39;</code></li><li>使用<code>ctrl+p</code>然后输入少量字符进行模糊搜索</li></ul><h1 id="vim快速定位插件"><a href="#vim快速定位插件" class="headerlink" title="vim快速定位插件"></a>vim快速定位插件</h1><h2 id="vim移动命令"><a href="#vim移动命令" class="headerlink" title="vim移动命令"></a>vim移动命令</h2><ul><li>比如<code>w / e</code>基于单词移动，<code>gg / G</code>文件首尾，<code>0 / $</code>行首尾，<code>f&#123;char&#125;</code> 查询字符</li><li><code>ctrl+f</code>和<code>ctrl+u</code>前后翻屏</li></ul><h2 id="如何移动到任意位置"><a href="#如何移动到任意位置" class="headerlink" title="如何移动到任意位置"></a>如何移动到任意位置</h2><p>可以使用vim的搜索/加上n跳转，但是使用easymotion更加方便</p><ul><li><a href="http://github.com/easymotion/vim-easymotion">http://github.com/easymotion/vim-easymotion</a></li><li>使用递归映射 <code>namp ss &lt;Plug&gt;(esaymotion-s2)</code>，按下<code>ss</code>就可以使用了</li></ul><h1 id="vim-surround-成对编辑"><a href="#vim-surround-成对编辑" class="headerlink" title="vim-surround 成对编辑"></a>vim-surround 成对编辑</h1><p>如果快速更换一对单引号为双引号</p><ul><li>一个一个查找然后替换，比较低效</li><li><a href="https://github.com/tpope/vim-surround">https://github.com/tpope/vim-surround</a></li></ul><h2 id="vim-surround使用"><a href="#vim-surround使用" class="headerlink" title="vim-surround使用"></a>vim-surround使用</h2><p>normal模式下增加，删除，修改成对内容</p><ul><li>ds（delete a surrounding）</li><li>cs（change a surrounding） </li><li>ys（you add a surrounding）</li></ul><h1 id="vim模糊搜索和替换插件"><a href="#vim模糊搜索和替换插件" class="headerlink" title="vim模糊搜索和替换插件"></a>vim模糊搜索和替换插件</h1><h2 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h2><ul><li>vim自带的搜索/   可以搜索当前文件，但是项目有很多文件</li><li>需要一个插件来模糊搜索多个文件内容</li><li>使用<code>Ag.vim</code>或者<code>fzf.vim</code>都可以很好地支持模糊搜索</li></ul><h2 id="fzf与fzf-vim"><a href="#fzf与fzf-vim" class="headerlink" title="fzf与fzf.vim"></a>fzf与fzf.vim</h2><p>fzf是一个强大的命令行模糊搜索工具，fzf.vim集成到了vim里</p><ul><li><a href="http://github.com/junegunn/fzf.vim">http://github.com/junegunn/fzf.vim</a></li><li>使用<code>:Ag [PATTERN]</code>模糊搜索字符串</li><li>使用<code>:Files [PATH]</code>模糊搜索目录</li></ul><h2 id="搜索替换插件far-vim"><a href="#搜索替换插件far-vim" class="headerlink" title="搜索替换插件far.vim"></a>搜索替换插件far.vim</h2><p>如果想批量搜索替换，可以试试far.vim</p><ul><li><a href="http://github.com/brooth/far.vim">http://github.com/brooth/far.vim</a></li><li>使用   <code>:Far foo bar **/*.py</code></li></ul><h1 id="golang之vim-go插件"><a href="#golang之vim-go插件" class="headerlink" title="golang之vim-go插件"></a>golang之vim-go插件</h1><p>IED一代又一代，经典的编辑器却长久不衰</p><ul><li>除了Java，很多人用vim编写shell / php / python / gplang</li><li>前端很多人使用vscode，sublime / Atom 有没落之势</li><li>很多后端和运维工程师使用vim</li></ul><h2 id="vim-go插件"><a href="#vim-go插件" class="headerlink" title="vim-go插件"></a>vim-go插件</h2><p>功能强大的golang插件</p><ul><li><a href="http://github.com/fatih/vim-go">http://github.com/fatih/vim-go</a></li><li>代码补全，重构，跳转，自动个格式化，自动导入功能</li><li>基本满足golang日常开发</li></ul><h1 id="python-mode-把vim打造成轻量级IDE"><a href="#python-mode-把vim打造成轻量级IDE" class="headerlink" title="python-mode 把vim打造成轻量级IDE"></a>python-mode 把vim打造成轻量级IDE</h1><h2 id="python-mode"><a href="#python-mode" class="headerlink" title="python-mode"></a>python-mode</h2><p>python插件使用比较多的是 <code>jedi-vim</code>和<code>python-mode</code></p><ul><li><a href="http://github.com/python-mode/python-mode">http://github.com/python-mode/python-mode</a></li><li>python-mode同样具备基本的补全、跳转、重构、格式化</li></ul><h1 id="vim-tagbar插件-浏览代码"><a href="#vim-tagbar插件-浏览代码" class="headerlink" title="vim tagbar插件   浏览代码"></a>vim tagbar插件   浏览代码</h1><p>tagbar 就是代码大纲</p><ul><li><a href="http://github.com/majutsushi/tagbar">http://github.com/majutsushi/tagbar</a></li><li>需要安装Universal Ctags 生成对应的tag文件</li><li>快速浏览当前文件代码结构，并且搜索跳转到对应的代码块</li></ul><p>vim-interestingwords</p><p>可以高亮你感兴趣的单词</p><ul><li><a href="http://github.com/lfv89/vim-interestingwords">http://github.com/lfv89/vim-interestingwords</a></li><li>浏览代码的时候经常需要知道一个变量的使用方式</li><li>我们可以使用这个插件同时高亮多个单词</li></ul><h1 id="强大的vim代码补全插件"><a href="#强大的vim代码补全插件" class="headerlink" title="强大的vim代码补全插件"></a>强大的vim代码补全插件</h1><h2 id="deoplete-nvim"><a href="#deoplete-nvim" class="headerlink" title="deoplete.nvim"></a>deoplete.nvim</h2><p>一个强大的 neovim / vim8 异步补全插件</p><ul><li><a href="http://github.com/shougo/deoplete.nvim">http://github.com/shougo/deoplete.nvim</a></li><li>多编程语言的支持，支持模糊匹配</li><li>需要安装对饮编程语言的扩展</li></ul><h2 id="coc-vim"><a href="#coc-vim" class="headerlink" title="coc.vim"></a>coc.vim</h2><p>一个强大的 neovim / vim8 补全插件，支持LSP(Language Server Protocol)</p><ul><li><a href="http://github.com/neoclide/coc.nvim">http://github.com/neoclide/coc.nvim</a></li><li>多语言插件支持</li></ul><h1 id="vim代码格式化与静态检查"><a href="#vim代码格式化与静态检查" class="headerlink" title="vim代码格式化与静态检查"></a>vim代码格式化与静态检查</h1><ul><li>把精力集中在代码逻辑本身，而不是整理格式这些浪费精力的事情</li><li>静态检查是为了让编写的代码更规范。 <code>golint/pylint/eslint</code>等</li></ul><h2 id="格式化插件"><a href="#格式化插件" class="headerlink" title="格式化插件"></a>格式化插件</h2><p>Neoformat和vim-autoformat是两种使用较多的格式化插件</p><ul><li><a href="http://github.com/sbdchd/neoformat">http://github.com/sbdchd/neoformat</a></li><li>需要安装对应语言的格式化库，python authorpep8  /   js的prettier</li></ul><h2 id="静态检查"><a href="#静态检查" class="headerlink" title="静态检查"></a>静态检查</h2><p>neomake和ale是两种常用的lint插件</p><ul><li><a href="http://github.com/w0rp/ale">http://github.com/w0rp/ale</a></li><li>同样需要安装对应语言的lint库，比如<code>eslint/pylint/golint</code>等</li><li>vim8、neovim支持异步检查，不会影响vim编辑，推荐使用</li></ul><h1 id="vim快速注释代码"><a href="#vim快速注释代码" class="headerlink" title="vim快速注释代码"></a>vim快速注释代码</h1><p>vim-commentary</p><ul><li><a href="https://github.com/tpope/vim-commentary">https://github.com/tpope/vim-commentary</a></li><li>记住常用的命令gc注释和取消注释</li><li>插件会根据不同的文件类型使用不同注释</li></ul><h1 id="vim与git"><a href="#vim与git" class="headerlink" title="vim与git"></a>vim与git</h1><h2 id="fugitive"><a href="#fugitive" class="headerlink" title="fugitive"></a>fugitive</h2><p>在vim里使用git</p><ul><li><a href="http://github.com/tpope/vim-fugitive">http://github.com/tpope/vim-fugitive</a></li></ul><h2 id="vim-gitgutter"><a href="#vim-gitgutter" class="headerlink" title="vim-gitgutter"></a>vim-gitgutter</h2><p>在vim里显示文件变动</p><ul><li><a href="https://github.com/airblade/vim-gitgutter">https://github.com/airblade/vim-gitgutter</a></li><li>当我们修改文件之后可以显示当前文件的变动</li></ul><h2 id="gv-vim"><a href="#gv-vim" class="headerlink" title="gv.vim"></a>gv.vim</h2><ul><li><a href="http://github.com/junegunn/gv.vim">http://github.com/junegunn/gv.vim</a></li><li>使用<code>:GV</code>命令调用</li><li>可以浏览代码提交变更</li></ul><h1 id="Vim和Tmux"><a href="#Vim和Tmux" class="headerlink" title="Vim和Tmux"></a>Vim和Tmux</h1><p>tmux是一个强大的终端复用工具</p><ul><li>可以复用终端、分屏、托管进程等</li><li>在服务器上即使退出服务器也不会被kill，托管进程也很方便</li><li>可以方便地分割屏幕实现多个进程共用屏幕</li></ul><h1 id="让vim嵌入开发工具"><a href="#让vim嵌入开发工具" class="headerlink" title="让vim嵌入开发工具"></a>让vim嵌入开发工具</h1><p>几乎所有流行的编辑器和IDE都支持vim插件</p><ul><li>即使你不用vim作为主力编辑器，依然可以使用它的编辑方式</li><li>几乎所有流行的编辑器和IDE都支持vim插件，以vim方式编辑</li><li>比如vscode / atom / pycharm等都支持安装vim插件</li></ul><h1 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a>neovim</h1><p>一个新的vim版本，支持异步特性</p><ul><li><a href="https://neovim.io/">https://neovim.io/</a></li><li>开发更活跃，更丰富的特性和扩展，异步支持</li><li>neovim的设计可以嵌入到很多GUI里，外壳好看</li></ul><h1 id="使用开源配置"><a href="#使用开源配置" class="headerlink" title="使用开源配置"></a>使用开源配置</h1><p>可以从网上直接使用一些开源配置</p><ul><li><a href="http://github.com/SpaceVIm/SpaceVim">http://github.com/SpaceVIm/SpaceVim</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vim基本认识&quot;&gt;&lt;a href=&quot;#vim基本认识&quot; class=&quot;headerlink&quot; title=&quot;vim基本认识&quot;&gt;&lt;/a&gt;vim基本认识&lt;/h1&gt;&lt;h2 id=&quot;必要性&quot;&gt;&lt;a href=&quot;#必要性&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="vim" scheme="https://setcreed.github.io/categories/vim/"/>
    
    
    <category term="vim" scheme="https://setcreed.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>vim学习目录</title>
    <link href="https://setcreed.github.io/posts/417406ac/"/>
    <id>https://setcreed.github.io/posts/417406ac/</id>
    <published>2022-03-04T13:43:27.000Z</published>
    <updated>2023-11-14T23:51:51.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim学习目录"><a href="#vim学习目录" class="headerlink" title="vim学习目录"></a>vim学习目录</h1><p>学自慕课上的<a href="https://www.imooc.com/learn/1129">vim教程</a></p><p><a href="https://setcreed.github.io/posts/71c39997">01 vim学习</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vim学习目录&quot;&gt;&lt;a href=&quot;#vim学习目录&quot; class=&quot;headerlink&quot; title=&quot;vim学习目录&quot;&gt;&lt;/a&gt;vim学习目录&lt;/h1&gt;&lt;p&gt;学自慕课上的&lt;a href=&quot;https://www.imooc.com/learn/1129&quot;&gt;v</summary>
      
    
    
    
    <category term="vim" scheme="https://setcreed.github.io/categories/vim/"/>
    
    
    <category term="vim" scheme="https://setcreed.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>django实战</title>
    <link href="https://setcreed.github.io/posts/9b4e6704/"/>
    <id>https://setcreed.github.io/posts/9b4e6704/</id>
    <published>2022-03-03T16:07:54.000Z</published>
    <updated>2023-11-14T23:51:51.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="职位管理系统"><a href="#职位管理系统" class="headerlink" title="职位管理系统"></a>职位管理系统</h1><h2 id="创建一个可以管理职位的后台"><a href="#创建一个可以管理职位的后台" class="headerlink" title="创建一个可以管理职位的后台"></a>创建一个可以管理职位的后台</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><p>创建项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject startproject </span><br></pre></td></tr></table></figure><p>初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先进入项目下</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>启动项目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure><p>创建管理员账号:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>打开django的管理后台：<a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a></p><p>输入用户名和密码：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210205211534.png" alt=""></p><p>招聘系统里面的职位管理</p><ul><li>管理员能够发布职位</li><li>匿名用户(候选人)能够浏览职位</li><li>匿名用户能够投递职位</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206165227.png" alt=""></p><p> 职位管理系统-建模</p><p>职位名称、类别、工作地点、职位职责、职位要求、发布人、发布日期、修改日期</p><p>创建应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp jobs</span><br><span class="line"><span class="comment"># 在配置文件settings中 INSTALLED_APPS添加这个应用</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206104426.png" alt=""></p><p>jobs应用的model：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line">JobTypes = [</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;技术类&quot;</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;产品类&quot;</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&quot;运营类&quot;</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&quot;设计类&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Cities = [</span><br><span class="line">    (<span class="number">0</span>, <span class="string">&quot;北京&quot;</span>),</span><br><span class="line">    (<span class="number">1</span>, <span class="string">&quot;上海&quot;</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&quot;深圳&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Job</span>(models.Model):</span><br><span class="line">    job_type = models.SmallIntegerField(blank=<span class="literal">False</span>, choices=JobTypes, verbose_name=<span class="string">&quot;职位列表&quot;</span>)</span><br><span class="line">    job_name = models.CharField(max_length=<span class="number">250</span>, blank=<span class="literal">False</span>, verbose_name=<span class="string">&quot;职位名称&quot;</span>)</span><br><span class="line">    job_city = models.SmallIntegerField(blank=<span class="literal">False</span>, choices=Cities, verbose_name=<span class="string">&quot;工作地点&quot;</span>)</span><br><span class="line">    job_responsibility = models.TextField(max_length=<span class="number">1024</span>, verbose_name=<span class="string">&quot;职位职责&quot;</span>)</span><br><span class="line">    job_requirement = models.TextField(max_length=<span class="number">1024</span>, blank=<span class="literal">False</span>, verbose_name=<span class="string">&quot;职位要求&quot;</span>)</span><br><span class="line">    creator = models.ForeignKey(User, verbose_name=<span class="string">&quot;创建人&quot;</span>, null=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    create_date = models.DateTimeField(verbose_name=<span class="string">&quot;创建时间&quot;</span>)</span><br><span class="line">    modify_date = models.DateTimeField(verbose_name=<span class="string">&quot;修改时间&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206124519.png" alt=""></p><p>在admin中注册：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> jobs.models <span class="keyword">import</span> Job</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register(Job)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同步数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206125918.png" alt=""></p><h2 id="快速迭代完善应用"><a href="#快速迭代完善应用" class="headerlink" title="快速迭代完善应用"></a>快速迭代完善应用</h2><p>我们希望创建时间、创建人有一个默认值</p><p>在job应用的Model类中添加默认值，用<code>default</code>来指代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create_date = models.DateTimeField(verbose_name=<span class="string">&quot;创建时间&quot;</span>, default=datetime.now)</span><br><span class="line">    modify_date = models.DateTimeField(verbose_name=<span class="string">&quot;修改时间&quot;</span>, default=datetime.now)</span><br></pre></td></tr></table></figure><p>在admin.py中更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> jobs.models <span class="keyword">import</span> Job</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JobAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    exclude = (<span class="string">&#x27;creator&#x27;</span>, <span class="string">&#x27;create_date&#x27;</span>, <span class="string">&#x27;modify_date&#x27;</span>)</span><br><span class="line">    list_display = (<span class="string">&#x27;job_name&#x27;</span>, <span class="string">&#x27;job_type&#x27;</span>, <span class="string">&#x27;job_city&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>, <span class="string">&#x27;create_date&#x27;</span>, <span class="string">&#x27;modify_date&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在保存模型之前可以做一些操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">self, request, obj, form, change</span>):</span><br><span class="line">        <span class="comment"># 把当前登录的用户设置成这个Model的创建人</span></span><br><span class="line">        obj.creator = request.user</span><br><span class="line">        <span class="built_in">super</span>().save_model(request, obj, form, change)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(Job, JobAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206133432.png" alt=""></p><h2 id="让匿名用户可以浏览职位列表页"><a href="#让匿名用户可以浏览职位列表页" class="headerlink" title="让匿名用户可以浏览职位列表页"></a>让匿名用户可以浏览职位列表页</h2><p>职位列表展示</p><ul><li>列表页是独立页面，使用自定义的页面</li><li>添加如下页面<ul><li>职位列表页</li><li>职位详情页</li></ul></li><li>匿名用户可以访问</li></ul><p>Django的自定义模板</p><ul><li>Django 模板包含了输出的 HTML 页面的静态部分的内容</li><li>模板里面的动态内容在运行时被替换</li><li>在 views 里面指定每个 URL 使用哪个模板来渲染页面</li></ul><p>模版继承与块（Template Inheritance &amp; Block）</p><ul><li>模板继承允许定义一个骨架模板，骨架包含站点上的公共元素（如头部导航，尾部链接）</li><li>骨架模板里面可以定义 Block 块，每一个 Block 块都可以在继承的页面上重新定义/覆盖</li><li>一个页面可以继承自另一个页面</li></ul><p>定义一个匿名访问页面的基础页面，基础页面中定义页头</p><p>添加页面 job/templates/base.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- base.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto;width: 50%;&quot;</span>&gt;</span>匠国科技开放职位<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>添加职位列表页模板-继承自base.html</p><p>joblist.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">终于等到你，期待加入我们，用技术探索一个新世界</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% if job_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for job in job_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;job.type_name&#125;&#125;  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/job/&#123;&#123; job.id &#125;&#125;/&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>&#123;&#123; job.job_name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   &#123;&#123;job.city_name&#125;&#125;  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No jobs are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>使用 extends 指令来表示，这个模板继承自 base.html 模板</p><ul><li>Block content 里面重新定义了 content 这个块</li><li>变量：运行时会被替换， 变量用  表示，变量是 views 层取到内容后 填充到模板中的参数</li><li>Tag：控制模板的逻辑，包括 if, for, block 都是 tab</li></ul><p>职位列表的视图</p><p>jobs/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"><span class="keyword">from</span> jobs.models <span class="keyword">import</span> Job, Cities, JobTypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job_list</span>(<span class="params">request</span>):</span><br><span class="line">    job_list = Job.objects.order_by(<span class="string">&#x27;job_type&#x27;</span>)</span><br><span class="line">    template = loader.get_template(<span class="string">&#x27;joblist.html&#x27;</span>)</span><br><span class="line">    context = &#123;<span class="string">&quot;job_list&quot;</span>: job_list&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> job <span class="keyword">in</span> job_list:</span><br><span class="line">        job.city_name = Cities[job.job_city][<span class="number">1</span>]</span><br><span class="line">        job.job_type = JobTypes[job.job_type][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context))</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>视图里面获取数据，把数据传入到模板中</li><li>使用 Django 的 model 来获取数据，数据按照职位类型排序</li><li>模板渲染指定了使用前面定义的 joblist.html，把 一个含有 job_list 这个 key 的 map 传入到模板</li></ul><p>添加 URL 路径映射</p><ul><li>让添加的页面，能够通过 URL 访问到</li><li>/joblist/ 的路径访问到 views 里面定义的 joblist 视图</li><li>这个视图是一个 Method View，方法表示一个视图</li></ul><p>jobs/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> jobs <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 职位列表</span></span><br><span class="line">    url(<span class="string">r&quot;^joblist/&quot;</span>, views.job_list, name=<span class="string">&quot;joblist&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>应用（app）的所有 URL 定义加入到项目（recruitment）中</p><ul><li>收到请求时，先走 jobs 应用下面的 URL 路由找页面，然后再按照 admin/ 路径匹配请求 URL</li></ul><p>recruitment/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&quot;^&quot;</span>, include(<span class="string">&quot;jobs.urls&quot;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>模板添加定义，View 页面添加完，URL 中也定义路由之后，再访问页面：<a href="http://127.0.0.1:8000/joblist/">http://127.0.0.1:8000/joblist/</a></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206170150.png" alt=""></p><p>职位详情页面</p><ul><li>前面列表页，每个职位上有一个链接，指向职位详情页</li><li>同样添加如下 3 块内容：<ul><li>详情页模板 – 定义内容呈现（Template）</li><li>详情页视图 – 获取数据逻辑 （View）</li><li>定义 URL 路由</li></ul></li></ul><p>jobs/templates/job.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin:auto; width:50%;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if job %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;position_name&quot;</span> <span class="attr">z</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>岗位名称：&#123;&#123;job.job_name&#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        城市：</span><br><span class="line">        &#123;&#123;job.city_name&#125;&#125; <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;position_responsibility&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:600px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>岗位职责：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">style</span>=<span class="string">&quot;font-size:16px&quot;</span>&gt;</span>&#123;&#123;job.job_responsibility&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;position_requirement&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:600px; &quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>任职要求：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">style</span>=<span class="string">&quot;font-size:16px&quot;</span>&gt;</span>&#123;&#123;job.job_requirement&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;apply_position&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:120px;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;申请&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;location.href=&#x27;/resume/add/?apply_position=&#123;&#123;job.job_name&#125;&#125;&amp;city=&#123;&#123;job.city_name&#125;&#125;&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>职位不存在<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 views.py, urls.py 中分别定义了 View 视图，以及 URL 的路由规则 /job/job_id 来访问详情</p><p>jobs/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> jobs.models <span class="keyword">import</span> Job, Cities, JobTypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job_list</span>(<span class="params">request</span>):</span><br><span class="line">    job_list = Job.objects.order_by(<span class="string">&#x27;job_type&#x27;</span>)</span><br><span class="line">    template = loader.get_template(<span class="string">&#x27;joblist.html&#x27;</span>)</span><br><span class="line">    context = &#123;<span class="string">&quot;job_list&quot;</span>: job_list&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> job <span class="keyword">in</span> job_list:</span><br><span class="line">        job.city_name = Cities[job.job_city][<span class="number">1</span>]</span><br><span class="line">        job.job_type = JobTypes[job.job_type][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, job_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        job = Job.objects.get(pk=job_id)</span><br><span class="line">        job.city_name = Cities[job.job_city][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">except</span> Job.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;Job does not exist&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;job.html&#x27;</span>, &#123;<span class="string">&#x27;job&#x27;</span>: job&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jobs/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> jobs <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 职位列表</span></span><br><span class="line">    url(<span class="string">r&quot;^joblist/&quot;</span>, views.job_list, name=<span class="string">&quot;joblist&quot;</span>),</span><br><span class="line">    <span class="comment"># 职位详情</span></span><br><span class="line">    url(<span class="string">r&quot;^job/(?P&lt;job_id&gt;\d+)/$&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206170542.png" alt=""></p><h1 id="招聘评估系统"><a href="#招聘评估系统" class="headerlink" title="招聘评估系统"></a>招聘评估系统</h1><h2 id="产品迭代思想"><a href="#产品迭代思想" class="headerlink" title="产品迭代思想"></a>产品迭代思想</h2><p>产品的需求背景：</p><ul><li>为了解决招聘面试的过程中线下面试管理效率低，面试结果不方便跟踪的痛点</li><li>以校园招聘的面试为例，做MVP产品迭代</li></ul><p>线下面试流程：</p><p>准备简历 &amp; 面试评估表 </p><ul><li>HR：发出面试评估表模板（Word）到一面面试官 （邮箱发出来）</li><li>一面面试官：登录邮箱下载 Word 模板，每个学生拷贝一份 </li><li>按学生名字命名文件， 录入学生名字，学校，电话，学历等 </li></ul><p>第一轮面试 </p><ul><li>一面官：每面完一个学生，填写 Word 格式的评估表中 </li><li>一面官：面完一天的学生后，批量把 Word 文档 Email 到 HR </li><li>HR：晚上查收下载评估表，汇总结果到 Excel，通知学生复试 </li><li>HR：同时把已经通知复试的学生信息，发送到技术二面复试官 </li></ul><p>第二轮面试和 HR 面试</p><ul><li>二面官：查收 Email，下载 Word 格式的一面评估记录 </li><li>二面官：复试后追加复试的评估到 Word 记录中，邮件到 HR</li><li>类似如上步骤的 HR 复试</li></ul><p>迭代思维与 MVP 产品规划方法（OOPD）</p><ul><li>MVP：minimum viable product， 最小可用产品</li><li>OOPD：Online &amp; Offline Product Development， 线上线下相结合的产品开发方法<ul><li>内裤原则：MVP 包含了产品的轮廓，核心的功能，让业务可以运转</li><li>优先线下：能够走线下的，优先走线下流程，让核心的功能先跑起来，快速做用户验证和方案验证</li><li>MVP 的核心：忽略掉一切的细枝末节，做合适的假设和简化，使用最短的时间开发出来</li></ul></li><li>迭代思维是最强大的产品思维逻辑，互联网上唯快不破的秘诀</li><li>优秀的工程师和优秀的产品经理，善于找出产品 MVP 的功能范围</li></ul><p>如何找出产品的 MVP 功能范围？</p><p>使用这些问题来帮助确定范围 </p><ul><li>产品的核心目标是什么? 核心用户是谁？核心的场景是什么？</li><li>产品目标都需要在线上完成或者呈现吗? </li><li>最小 MVP 产品要做哪些事情，能够达到业务目标? </li><li>哪些功能不是在用户流程的核心路径上的？</li><li>做哪些简化，和假设，能够在最短的时间交付产品，并且可以让业务流程跑起来？</li></ul><h2 id="在产品中使用产品迭代思想"><a href="#在产品中使用产品迭代思想" class="headerlink" title="在产品中使用产品迭代思想"></a>在产品中使用产品迭代思想</h2><p>招聘面试系统核心的目标：这个产品是为了提高面试过程的效率，让面试过程和结果可以跟踪。围绕着核心目标，我们只需要两个功能：</p><ul><li>能够维护候选人的信息，让候选人的信息进到系统里</li><li>能够填写面试反馈</li></ul><p>第一个功能维护候选人的信息有两种方式实现：</p><ul><li>HR通过已有的excel表导入信息</li><li>HR手工输入信息</li></ul><p>根据MVP产品迭代思想，可以快速开发核心功能。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206191514.png" alt=""></p><h2 id="数据建模和企业级数据库设计原则"><a href="#数据建模和企业级数据库设计原则" class="headerlink" title="数据建模和企业级数据库设计原则"></a>数据建模和企业级数据库设计原则</h2><p>在招聘面试的系统中，有两个主要的模型，一个是用户的信息，包括面试官，另一个是候选人信息和面试评估反馈。候选人信息和面试评估反馈通常会放在两张表中，对于一个MVP版本来说，为了能够快速开发，我们把候选人信息和面试评估反馈放在一张表中，等到后续产品有权限控制时，我们在分成两张表。</p><p>对候选人信息做一个建模：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206193031.png" alt=""></p><p>企业级数据库设计原则</p><p>包括3 个基础原则，4 个扩展性原则，3 个完备性原则</p><p>3个基础原则：</p><ul><li>结构清晰：表名、字段命名没有歧义，能一眼看懂</li><li>唯一职责：一表一用，领域定义清晰，不存储无关信息，相关数据在一张表中</li><li>主键原则：设计不带物理意义的主键；有唯一约束，确保幂等</li></ul><p>4 个扩展性原则（影响系统的性能和容量）：</p><ul><li>长短分离：可以扩展，长文本独立存储；有合适的容量设计</li><li>冷热分离：当前数据与历史数据分离</li><li>索引完备：有合适索引方便查询</li><li>不使用关联查询：不使用一切的 SQL Join 操作，不做 2 个表或者更多表的关联查询<ul><li>示例：查询商家每一个订单的金额</li><li><code>select s.shop_name, o.id as order_id, o.total_amount from shop s, order o where s.id = o.shop_id</code></li></ul></li></ul><p>3 个完备性原则：</p><ul><li>完整性：保证数据的准确性和完整性，重要的内容都有记录</li><li>可追溯：可追溯创建时间，修改时间，可以逻辑删除</li><li>一致性原则：数据之间保持一致，尽可能避免同样的数据存储在不同表中</li></ul><h2 id="创建应用和模型，分组展示页面内容"><a href="#创建应用和模型，分组展示页面内容" class="headerlink" title="创建应用和模型，分组展示页面内容"></a>创建应用和模型，分组展示页面内容</h2><p>创建应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp interview</span><br></pre></td></tr></table></figure><p>注冊应用</p><ul><li>在 settings.py 中添加 interview 应用</li></ul><p>添加模型</p><ul><li>在 interview/models.py 里面定义 Candidate 类</li></ul><h2 id="从Excel文件批量导入候选人数据"><a href="#从Excel文件批量导入候选人数据" class="headerlink" title="从Excel文件批量导入候选人数据"></a>从Excel文件批量导入候选人数据</h2><p>实现候选人数据导入</p><ul><li>怎么样实现一个数据导入的功能最简洁<ul><li>开发一个自定义的 Web 页面，让用户能够上传 excel/csv 文件</li><li>开发一个命令行工具，读取 excel/csv，再访问数据库写入 DB</li><li>从数据库的客户端，比如 MySQL 的客户端里面导入数据</li></ul></li><li>Django 框架已经考虑到（需要使用到命令行的场景）<ul><li>使用自定义的 django management 命令来导入数据</li><li>应用下面创建 management/commands 目录，</li><li>commands 目录下添加脚本，创建类，继承自 BaseCommand，实现命令行逻辑</li></ul></li></ul><p>命令行导入：python manage.py import_candidates —path /path/to/your/file.csv</p><h2 id="候选人列表筛选和查询"><a href="#候选人列表筛选和查询" class="headerlink" title="候选人列表筛选和查询"></a>候选人列表筛选和查询</h2><ul><li>能够按照名字、手机号码、学校来查询候选人信息</li><li>能够按照初试结果，复试结果，HR复试结果，面试官来筛选；能按照复试结果来排序</li></ul><p>使用内置的<code>search_field</code>属性来设置哪些可以搜索的字段，用<code>list_filter</code>属性来设置做筛选、过滤的字段，用<code>ordering</code>字段来设置字段的排序。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210206211523.png" alt=""></p><h2 id="企业域账号集成"><a href="#企业域账号集成" class="headerlink" title="企业域账号集成"></a>企业域账号集成</h2><ul><li>什么是目录服务，英文名是Directory Service，目录服务是一个提供资源服务的定位查找功能的存储系统。在软件工程里面一个目录是指一组名字和值的映射，它允许根据一个给定的名字来查找对应的值，以词典类似。目录可以有树状结构，典型的目录有域名、企业的组织架构，这些都可以使用目录服务来存储其中的信息。</li><li>OpenLDAP是开发的LDAP服务，Lightweight Directory Access Protocol，轻量级的目录访问协议</li><li>可以直接使用域账号登陆</li><li>不用手工添加账号、维护独立密码</li><li>可以集成 OpenLDAP/ActiveDirecotry</li><li>DN: 目录服务中的一个唯一的对象<ul><li>CN=David,OU=Shanghai,DC=ihopeit,DC=com</li></ul></li></ul><p>Open LDAP服务搭建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker启动OpenLDAP</span></span><br><span class="line">docker run -d -p 389:389 -p 636:636 --name my_openldap --<span class="built_in">env</span> LDAP_ORGANISATION=<span class="string">&quot;myhome&quot;</span> --<span class="built_in">env</span> LDAP_DOMAIN=<span class="string">&quot;myhome.com&quot;</span> --<span class="built_in">env</span> LDAP_ADMIN_PASSWORD=<span class="string">&quot;cwz123456&quot;</span> --detach osixia/openldap</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>配置LDAP组织者：–-env LDAP_ORGANISATION=”myhome”</li><li>配置LDAP域：–-env LDAP_DOMAIN=”myhome.com”</li><li>配置LDAP密码：–-env LDAP_ADMIN_PASSWORD=”cwz123456”</li><li>默认登录用户名：admin</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker启动phpLDAPadmin</span></span><br><span class="line">docker run -d -p 81:80 -p 443:443 --name phpldapadmin_service --<span class="built_in">env</span> PHPLDAPADMIN_LDAP_HOSTS=49.235.76.103 --<span class="built_in">link</span> my_openldap:ldap-host --<span class="built_in">env</span> PHPLDAPADMIN_LDAP_HOSTS=ldap-host --detach osixia/phpldapadmin</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>配置的Ldap地址：–-env PHPLDAPADMIN_LDAP_HOSTS=49.235.76.103</li></ul><p>访问：<a href="https://49.235.76.103，">https://49.235.76.103，</a></p><ul><li>Login DN：cn=admin,dc=myhome,dc=com</li><li>password：cwz123456</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210207130628.png" alt=""></p><p>django配置ldap</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install django-python3-ldap</span><br></pre></td></tr></table></figure><p>在settings文件中配置</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210207085608.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LDAP</span></span><br><span class="line"><span class="comment"># The URL of the LDAP server.</span></span><br><span class="line">LDAP_AUTH_URL = <span class="string">&quot;ldap://49.235.76.103:389&quot;</span></span><br><span class="line"><span class="comment"># Initiate TLS on connection.</span></span><br><span class="line">LDAP_AUTH_USE_TLS = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The LDAP search base for looking up users.</span></span><br><span class="line">LDAP_AUTH_SEARCH_BASE = <span class="string">&quot;dc=myhome,dc=com&quot;</span></span><br><span class="line"><span class="comment"># The LDAP class that represents a user.</span></span><br><span class="line">LDAP_AUTH_OBJECT_CLASS = <span class="string">&quot;inetOrgPerson&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User model fields mapped to the LDAP</span></span><br><span class="line"><span class="comment"># attributes that represent them.</span></span><br><span class="line">LDAP_AUTH_USER_FIELDS = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;first_name&quot;</span>: <span class="string">&quot;givenName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last_name&quot;</span>: <span class="string">&quot;sn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;mail&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># A tuple of django model fields used to uniquely identify a user.</span></span><br><span class="line">LDAP_AUTH_USER_LOOKUP_FIELDS = (<span class="string">&quot;username&quot;</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to a callable that takes a dict of &#123;model_field_name: value&#125;,</span></span><br><span class="line"><span class="comment"># returning a dict of clean model data.</span></span><br><span class="line"><span class="comment"># Use this to customize how data loaded from LDAP is saved to the User model.</span></span><br><span class="line">LDAP_AUTH_CLEAN_USER_DATA = <span class="string">&quot;django_python3_ldap.utils.clean_user_data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The LDAP username and password of a user for querying the LDAP database for user</span></span><br><span class="line"><span class="comment"># details. If None, then the authenticated user will be used for querying, and</span></span><br><span class="line"><span class="comment"># the `ldap_sync_users` command will perform an anonymous query.</span></span><br><span class="line">LDAP_AUTH_CONNECTION_USERNAME = <span class="string">&quot;admin&quot;</span></span><br><span class="line">LDAP_AUTH_CONNECTION_PASSWORD = <span class="string">&quot;cwz123456&quot;</span></span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = &#123;<span class="string">&quot;django_python3_ldap.auth.LDAPBackend&quot;</span>, <span class="string">&#x27;django.contrib.auth.backends.ModelBackend&#x27;</span>, &#125;</span><br></pre></td></tr></table></figure><p>在django后台用ldap账号登录，会自动同步到django</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210207130722.png" alt=""></p><h2 id="批量导入面试官信息、权限"><a href="#批量导入面试官信息、权限" class="headerlink" title="批量导入面试官信息、权限"></a>批量导入面试官信息、权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将ldap中的信息导入</span></span><br><span class="line">python manage.py ldap_sync_users</span><br></pre></td></tr></table></figure><p>这时查看django 后台管理就会有用户加进来</p><p>增加组  interviewer组，赋予查看和修改应聘者的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210207155658.png" alt=""></p><p>增加组 hr组，赋予对应聘者操作和对工作操作的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210207155838.png" alt=""></p><h2 id="到处候选人的数据到CSV"><a href="#到处候选人的数据到CSV" class="headerlink" title="到处候选人的数据到CSV"></a>到处候选人的数据到CSV</h2><p>增加自定义的数据操作菜单 （数据导出为 CSV）</p><ul><li>需要对数据进行操作，比如导出，状态变更</li><li>定义按钮的实现逻辑（处理函数）， 在 ModelAdmin 中注册函数到 actions</li></ul><p>interview/admin.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将候选人信息到处为csv</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">export_model_as_csv</span>(<span class="params">model_admin, request, queryset</span>):</span><br><span class="line">    response = HttpResponse(content_type=<span class="string">&#x27;text/csv&#x27;</span>)</span><br><span class="line">    field_list = exportable_fields</span><br><span class="line">    response[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=%s-list-%s.csv&#x27;</span> % (</span><br><span class="line">        <span class="string">&#x27;recruitment-candidates&#x27;</span>,</span><br><span class="line">        datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d-%H-%M-%S&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入表头</span></span><br><span class="line">    writer = csv.writer(response)</span><br><span class="line">    writer.writerow(</span><br><span class="line">        [queryset.model._meta.get_field(f).verbose_name.title() <span class="keyword">for</span> f <span class="keyword">in</span> field_list],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> queryset:</span><br><span class="line">        <span class="comment"># 单行 的记录（各个字段的值）， 根据字段对象，从当前实例 (obj) 中获取字段值</span></span><br><span class="line">        csv_line_values = []</span><br><span class="line">        <span class="keyword">for</span> field <span class="keyword">in</span> field_list:</span><br><span class="line">            field_obj = queryset.model._meta.get_field(field)</span><br><span class="line">            field_value = field_obj.value_from_object(obj)</span><br><span class="line">            csv_line_values.append(field_value)</span><br><span class="line">        writer.writerow(csv_line_values)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给export_model_as_csv方法做一个定制，修改它的名字</span></span><br><span class="line">export_model_as_csv.short_description = <span class="string">&#x27;导出为CSV文件&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 候选人管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CandidateAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    exclude = (<span class="string">&#x27;creator&#x27;</span>, <span class="string">&#x27;created_date&#x27;</span>, <span class="string">&#x27;modified_date&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    actions = [export_model_as_csv]</span><br><span class="line">    …………</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210207184839.png" alt=""></p><h2 id="增加日志记录"><a href="#增加日志记录" class="headerlink" title="增加日志记录"></a>增加日志记录</h2><p>日志级别：</p><ul><li>DEBUG: 调试</li><li>INFO: 常用的系统信息</li><li>WARNING: 小的告警，不影响主要功能</li><li>ERROR: 系统出现不可忽视的错误</li><li>CRITICAL: 非常严重的错误</li></ul><p>在settings.py配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;disable_existing_logger&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&quot;handlers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;console&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.StreamHandler&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;loggers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;django_python3_ldap&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;console&quot;</span>],</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dictconfig是用一个字典形式的格式来定义日志记录的内容。</p><ul><li>version 定义了日志记录的版本号，到目前为止，日志记录只有一个版本1</li><li>disable_existing_loggers  是否要禁用现在已有的其他logger，一般为False</li><li>有四个组件：Handlers、Loggers、Filters、Formmaters<ul><li>Filters 是过滤器，可以定义一些列的处理链，可以把handlers/loggers放到Filters里</li><li>Handlers是日志处理器 对于每一条日志消息如何处理，记录到 文件，控制台，还是网络</li><li>Loggers 定义了日志的记录器，它里面定义了一个个的键值对。比如 上面定义了一个<code>django_python3_ldap</code>的日志记录器，使用了这个名称作为记录的类，会往控制台输出。</li><li>Formmaters 定义日志文本记录的格式</li></ul></li></ul><p>完善后的日志配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;disable_existing_logger&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&quot;formatters&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;simple&quot;</span>: &#123;   <span class="comment"># 定义打印格式</span></span><br><span class="line">          <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;%(asctime)s %(name)-12s %(lineno)d %(levelname)-8s %(message)s&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;handlers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;console&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.StreamHandler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 定义错误级别的日志发送到邮件处理器</span></span><br><span class="line">        <span class="string">&quot;mail_admins&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: <span class="string">&quot;ERROR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;class&quot;</span>: <span class="string">&quot;django.utils.log.AdminEmailHandler&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 记录到文件</span></span><br><span class="line">        <span class="string">&quot;file&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.FileHandler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filename&quot;</span>: os.path.join(os.path.dirname(BASE_DIR), <span class="string">&#x27;recruitment.admin.log&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># root是一个系统全局级别默认的日志记录器，是loggers里特殊的记录器</span></span><br><span class="line">    <span class="string">&quot;root&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;handles&quot;</span>: [<span class="string">&quot;console&quot;</span>, <span class="string">&quot;file&quot;</span>],</span><br><span class="line">      <span class="string">&quot;level&quot;</span>: <span class="string">&quot;INFO&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;loggers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;django_python3_ldap&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;console&quot;</span>],</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: <span class="string">&quot;DEBUG&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给导出csv文件增加日志:</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210207193125.png" alt=""></p><h2 id="生产环境与开发环境配置分离"><a href="#生产环境与开发环境配置分离" class="headerlink" title="生产环境与开发环境配置分离"></a>生产环境与开发环境配置分离</h2><p>配置文件的问题：</p><ul><li>生产环境的配置与开发环境配置隔离开， 开发环境允许 Debugging</li><li>敏感信息不提交到代码库中，比如数据库连接，secret key, LDAP连接信息等</li><li>生产、开发环境使用的配置可能不一样，比如 分别使用 MySQL/Sqlite 数据库</li></ul><p>把 settings.py 抽出来，创建3个配置文件：</p><ul><li>base.py 基础配置</li><li>local.py 本地开发环境配置，允许 Debug</li><li>production.py 生产环境配置， 不进到 代码库版本控制</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210207214718.png" alt=""></p><p>命令行启动时指定环境配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span> --settings=settings.local</span><br></pre></td></tr></table></figure><h2 id="产品细节完善"><a href="#产品细节完善" class="headerlink" title="产品细节完善"></a>产品细节完善</h2><ul><li>修改站点标题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在url.py</span></span><br><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> gettext <span class="keyword">as</span> _</span><br><span class="line"></span><br><span class="line">admin.site.site_header = _(<span class="string">&quot;招聘管理系统&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>设置只读字段，面试官不能修改，但是hr可以修改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interview/admin.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_group_names</span>(<span class="params">self, user</span>):</span><br><span class="line">    group_names = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> user.groups.<span class="built_in">all</span>():</span><br><span class="line">        group_names.append(i.name)</span><br><span class="line">    <span class="keyword">return</span> group_names</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_readonly_fields</span>(<span class="params">self, request, obj=<span class="literal">None</span></span>):</span><br><span class="line">    group_names = self.get_group_names(request.user)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;interviewer&quot;</span> <span class="keyword">in</span> group_names:</span><br><span class="line">        logger.info(<span class="string">&quot;interviewer is in user&#x27;s group for %s&quot;</span> % request.user.username)</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&#x27;first_interviewer&#x27;</span>, <span class="string">&#x27;second_interviewer&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ()</span><br></pre></td></tr></table></figure><ul><li>让hr直接在列表修改候选人的面试官，而面试官自己不能修改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interviewer/admin.py</span></span><br><span class="line"></span><br><span class="line">default_list_editable = (<span class="string">&#x27;first_interviewer&#x27;</span>, <span class="string">&#x27;second_interviewer&#x27;</span>,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_list_editable</span>(<span class="params">self, request</span>):</span><br><span class="line">    group_names = self.get_group_names(request.user)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.user.is_superuser <span class="keyword">or</span> <span class="string">&#x27;hr&#x27;</span> <span class="keyword">in</span> group_names:</span><br><span class="line">        <span class="keyword">return</span> self.default_list_editable</span><br><span class="line">    <span class="keyword">return</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_changelist_instance</span>(<span class="params">self, request</span>):</span><br><span class="line">    self.list_editable = self.get_list_editable(request)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>().get_changelist_instance(request)</span><br></pre></td></tr></table></figure><h1 id="简历投递和面试流程闭环"><a href="#简历投递和面试流程闭环" class="headerlink" title="简历投递和面试流程闭环"></a>简历投递和面试流程闭环</h1><h2 id="定制更美观的主题"><a href="#定制更美观的主题" class="headerlink" title="定制更美观的主题"></a>定制更美观的主题</h2><ul><li>安装django-grappelli 主题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-grappelli</span><br></pre></td></tr></table></figure><ul><li>settings.py 中配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册到app</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;grappelli&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django_python3_ldap&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jobs&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interview&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>在urls.py注册</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&quot;^&quot;</span>, include(<span class="string">&quot;jobs.urls&quot;</span>)),</span><br><span class="line">    url(<span class="string">&#x27;grappelli&#x27;</span>, include(<span class="string">&#x27;grappelli.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210208092415.png" alt=""></p><h2 id="定制面试官权限"><a href="#定制面试官权限" class="headerlink" title="定制面试官权限"></a>定制面试官权限</h2><ul><li>数据权限，专业面试官仅能评估自己负责的环节</li></ul><p>一面面试官仅填写一面反馈， 二面面试官可以填写二面反馈 def get_fieldsets(self, request, obj=None):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一面面试官仅填写一面反馈， 二面面试官可以填写二面反馈</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fieldsets</span>(<span class="params">self, request, obj=<span class="literal">None</span></span>):</span><br><span class="line">    group_names = self.get_group_names(request.user)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;interviewer&#x27;</span> <span class="keyword">in</span> group_names <span class="keyword">and</span> obj.first_interviewer == request.user:</span><br><span class="line">        <span class="keyword">return</span> self.default_fieldsets_first</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;interviewer&#x27;</span> <span class="keyword">in</span> group_names <span class="keyword">and</span> obj.second_interviewer == request.user:</span><br><span class="line">        <span class="keyword">return</span> self.default_fieldsets_second</span><br><span class="line">    <span class="keyword">return</span> self.default_fieldsets</span><br></pre></td></tr></table></figure><ul><li>数据集权限(querySet)，专业面试官只能看到分到自己的候选人</li></ul><p>对于面试官，获取自己是一面面试官或者二面面试官的候选人集合 def get_queryset(self, request):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于非管理员，非HR，获取自己是一面面试官或者二面面试官的候选人集合:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self, request</span>):  <span class="comment"># show data only owned by the user</span></span><br><span class="line">    qs = <span class="built_in">super</span>().get_queryset(request)</span><br><span class="line"></span><br><span class="line">    group_names = self.get_group_names(request.user)</span><br><span class="line">    <span class="keyword">if</span> request.user.is_superuser <span class="keyword">or</span> <span class="string">&#x27;hr&#x27;</span> <span class="keyword">in</span> group_names:</span><br><span class="line">        <span class="keyword">return</span> qs</span><br><span class="line">    <span class="keyword">return</span> Candidate.objects.<span class="built_in">filter</span>(</span><br><span class="line">        Q(first_interviewer=request.user) | Q(second_interviewer=request.user)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><ul><li>功能权限（菜单/按钮），数据导出权限仅 HR 和超级管理员可用<ul><li>自定义权限： 在 Model 类的 Meta 中定义自定义的 permissions </li><li>在 action 上限制权限： export_model_as_csv.allowed_permissions = (‘export’,) </li><li>在 Admin 上检查权限： def has_export_permission(self, request)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在models.py中的Meta中定义权限</span></span><br><span class="line">permissions = [</span><br><span class="line">            (<span class="string">&quot;export&quot;</span>, <span class="string">&quot;Can export candidate list&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;notify&quot;</span>, <span class="string">&quot;notify interviewer for candidate review&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在admin.py中队导出csv文件做权限限制</span></span><br><span class="line"><span class="comment"># 给导出csv文件的功能做权限控制</span></span><br><span class="line">export_model_as_csv.allowed_permissions = (<span class="string">&#x27;export&#x27;</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在管理类下</span></span><br><span class="line"><span class="comment"># 当前用户是否有导出权限：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_export_permission</span>(<span class="params">self, request</span>):</span><br><span class="line">    opts = self.opts</span><br><span class="line">    <span class="keyword">return</span> request.user.has_perm(<span class="string">&#x27;%s.%s&#x27;</span> % (opts.app_label, <span class="string">&quot;export&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="系统报错功能：钉钉群集成"><a href="#系统报错功能：钉钉群集成" class="headerlink" title="系统报错功能：钉钉群集成"></a>系统报错功能：钉钉群集成</h2><p>发送通知：钉钉群消息集成</p><ul><li>为什么不使用 Email/SMS 通知：<ul><li>由于邮件、短信没有限制，可以给任何人发；网络上对于 API 调用有了各种限制</li><li>阿里云封禁 25 端口</li></ul></li><li>为什么使用钉钉群消息<ul><li>可以使用 Web Hook 直接发送，简单易用</li></ul></li><li>其他推荐消息方式<ul><li>Slack 消息</li><li>企业微信消息</li></ul></li></ul><p>测试钉钉群消息</p><ul><li>安装钉钉聊天机器人：pip install DingtalkChatbot</li><li>测试群消息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell --settings=settings.local</span><br><span class="line"><span class="comment"># 进入交互式</span></span><br><span class="line"><span class="keyword">from</span> interview <span class="keyword">import</span> dingtalk</span><br><span class="line">dingtalk.send(<span class="string">&quot;天维招聘面试启动通知, 开始招聘。。。&quot;</span>)</span><br></pre></td></tr></table></figure><p>定制管理后台的操作按钮：通知面试官准备面试</p><ul><li>定义通知面试官的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">notify_interviewer</span>(<span class="params">model_admin, request, queryset</span>):</span><br><span class="line">    candidates = <span class="string">&quot;&quot;</span></span><br><span class="line">    interviewers = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> queryset:</span><br><span class="line">        candidates = obj.username + <span class="string">&quot;;&quot;</span> + candidates</span><br><span class="line">        interviewers = obj.first_interviewer.username + <span class="string">&quot;;&quot;</span> + interviewers</span><br><span class="line">    dingtalk.send(<span class="string">&quot;候选人 %s 进入面试环节，亲爱的面试官，请准备好面试： %s&quot;</span> % (candidates, interviewers))</span><br></pre></td></tr></table></figure><ul><li>注册到modeladmin中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actions = (export_model_as_csv, notify_interviewer, )</span><br></pre></td></tr></table></figure><h2 id="允许候选人注册登录：集成Registration"><a href="#允许候选人注册登录：集成Registration" class="headerlink" title="允许候选人注册登录：集成Registration"></a>允许候选人注册登录：集成Registration</h2><ul><li>允许注册：安装 registration      pip install django-registration-redux</li><li>添加到 apps 中</li><li>注册到urls中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&quot;^&quot;</span>, include(<span class="string">&quot;jobs.urls&quot;</span>)),</span><br><span class="line">    url(<span class="string">&#x27;grappelli&#x27;</span>, include(<span class="string">&#x27;grappelli.urls&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^accounts/&#x27;</span>, include(<span class="string">&#x27;registration.backends.simple.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>同步数据库</li><li>注册成功后跳转到登录页面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setings.py配置文件配置</span></span><br><span class="line">LOGIN_REDIRECT_URL = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">SIMPLE_BACKEND_REDIRECT_URL = <span class="string">&#x27;/accounts/login/&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="候选人简历存储"><a href="#候选人简历存储" class="headerlink" title="候选人简历存储"></a>候选人简历存储</h2><p>创建简历Model</p><ul><li>创建 Model</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Resume</span>(models.Model):</span><br><span class="line">    <span class="comment"># Translators: 简历实体的翻译</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">135</span>, verbose_name=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">    applicant = models.ForeignKey(User, verbose_name=<span class="string">&quot;申请人&quot;</span>, null=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">135</span>, verbose_name=<span class="string">&#x27;城市&#x27;</span>)</span><br><span class="line">    phone = models.CharField(max_length=<span class="number">135</span>, verbose_name=<span class="string">&#x27;手机号码&#x27;</span>)</span><br><span class="line">    email = models.EmailField(max_length=<span class="number">135</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;邮箱&#x27;</span>)</span><br><span class="line">    apply_position = models.CharField(max_length=<span class="number">135</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;应聘职位&#x27;</span>)</span><br><span class="line">    born_address = models.CharField(max_length=<span class="number">135</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;生源地&#x27;</span>)</span><br><span class="line">    gender = models.CharField(max_length=<span class="number">135</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;性别&#x27;</span>)</span><br><span class="line">    picture = models.ImageField(upload_to=<span class="string">&#x27;images/&#x27;</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;个人照片&#x27;</span>)</span><br><span class="line">    attachment = models.FileField(upload_to=<span class="string">&#x27;file/&#x27;</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;简历附件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学校与学历信息</span></span><br><span class="line">    bachelor_school = models.CharField(max_length=<span class="number">135</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;本科学校&#x27;</span>)</span><br><span class="line">    master_school = models.CharField(max_length=<span class="number">135</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;研究生学校&#x27;</span>)</span><br><span class="line">    doctor_school = models.CharField(max_length=<span class="number">135</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;博士生学校&#x27;</span>)</span><br><span class="line">    major = models.CharField(max_length=<span class="number">135</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;专业&#x27;</span>)</span><br><span class="line">    degree = models.CharField(max_length=<span class="number">135</span>, choices=DEGREE_TYPE, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;学历&#x27;</span>)</span><br><span class="line">    created_date = models.DateTimeField(verbose_name=<span class="string">&quot;创建日期&quot;</span>, default=datetime.now)</span><br><span class="line">    modified_date = models.DateTimeField(verbose_name=<span class="string">&quot;修改日期&quot;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 候选人自我介绍，工作经历，项目经历</span></span><br><span class="line">    candidate_introduction = models.TextField(max_length=<span class="number">1024</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;自我介绍&#x27;</span>)</span><br><span class="line">    work_experience = models.TextField(max_length=<span class="number">1024</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;工作经历&#x27;</span>)</span><br><span class="line">    project_experience = models.TextField(max_length=<span class="number">1024</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;项目经历&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = <span class="string">&#x27;简历&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;简历列表&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure><ul><li>注册 Model 到 Admin 中，设置展示字段</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简历管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResumeAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;applicant&#x27;</span>, <span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;apply_position&#x27;</span>, <span class="string">&#x27;bachelor_school&#x27;</span>, <span class="string">&#x27;master_school&#x27;</span>, <span class="string">&#x27;major&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;created_date&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    readonly_fields = (<span class="string">&#x27;applicant&#x27;</span>, <span class="string">&#x27;created_date&#x27;</span>, <span class="string">&#x27;modified_date&#x27;</span>,)</span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: (</span><br><span class="line">            <span class="string">&quot;applicant&quot;</span>, (<span class="string">&quot;username&quot;</span>, <span class="string">&quot;city&quot;</span>, <span class="string">&quot;phone&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;email&quot;</span>, <span class="string">&quot;apply_position&quot;</span>, <span class="string">&quot;born_address&quot;</span>, <span class="string">&quot;gender&quot;</span>,), (<span class="string">&quot;picture&quot;</span>, <span class="string">&quot;attachment&quot;</span>,),</span><br><span class="line">            (<span class="string">&quot;bachelor_school&quot;</span>, <span class="string">&quot;master_school&quot;</span>), (<span class="string">&quot;major&quot;</span>, <span class="string">&quot;degree&quot;</span>), (<span class="string">&#x27;created_date&#x27;</span>, <span class="string">&#x27;modified_date&#x27;</span>),</span><br><span class="line">            <span class="string">&quot;candidate_introduction&quot;</span>, <span class="string">&quot;work_experience&quot;</span>, <span class="string">&quot;project_experience&quot;</span>,)&#125;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">self, request, obj, form, change</span>):</span><br><span class="line">        obj.applicant = request.user</span><br><span class="line">        <span class="built_in">super</span>().save_model(request, obj, form, change)</span><br><span class="line"></span><br><span class="line">admin.site.register(Job, JobAdmin)</span><br><span class="line">admin.site.register(Resume, ResumeAdmin)</span><br></pre></td></tr></table></figure><ul><li>同步数据库</li><li>授予管理权限到 HR</li></ul><h2 id="候选人在线投递简历"><a href="#候选人在线投递简历" class="headerlink" title="候选人在线投递简历"></a>候选人在线投递简历</h2><p>职位详情页：候选人简历投递</p><p>目标：</p><ul><li>注册的用户可以提交简历</li><li>简历跟当前用户关联</li><li>能够追溯到谁投递的简历</li></ul><p>步骤：</p><ul><li>定义简历创建 View (继承自通用的CreateView)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobs/view.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.mixins <span class="keyword">import</span> LoginRequiredMixin</span><br><span class="line"><span class="keyword">from</span> django.views.generic.edit <span class="keyword">import</span> CreateView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResumeCreateView</span>(LoginRequfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> jobs <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 职位列表</span></span><br><span class="line">    url(<span class="string">r&quot;^joblist/&quot;</span>, views.job_list, name=<span class="string">&quot;joblist&quot;</span>),</span><br><span class="line">    <span class="comment"># 职位详情</span></span><br><span class="line">    url(<span class="string">r&quot;^job/(?P&lt;job_id&gt;\d+)/$&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># 提交简历</span></span><br><span class="line">    path(<span class="string">&#x27;resume/add/&#x27;</span>, views.ResumeCreateView.as_view(), name=<span class="string">&#x27;resume-add&#x27;</span>),</span><br><span class="line">    <span class="comment"># 首页自动跳转 职位列表</span></span><br><span class="line">    url(<span class="string">r&quot;^$&quot;</span>, views.job_list, name=<span class="string">&quot;name&quot;</span>),</span><br><span class="line">]iredMixin, CreateView):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;    简历职位页面  &quot;&quot;&quot;</span></span><br><span class="line">    template_name = <span class="string">&#x27;resume_form.html&#x27;</span></span><br><span class="line">    success_url = <span class="string">&#x27;/joblist/&#x27;</span></span><br><span class="line">    model = Resume</span><br><span class="line">    fields = [<span class="string">&quot;username&quot;</span>, <span class="string">&quot;city&quot;</span>, <span class="string">&quot;phone&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>, <span class="string">&quot;apply_position&quot;</span>, <span class="string">&quot;gender&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bachelor_school&quot;</span>, <span class="string">&quot;master_school&quot;</span>, <span class="string">&quot;major&quot;</span>, <span class="string">&quot;degree&quot;</span>,</span><br><span class="line">        <span class="string">&quot;candidate_introduction&quot;</span>, <span class="string">&quot;work_experience&quot;</span>, <span class="string">&quot;project_experience&quot;</span>]</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"><span class="comment"># jobs/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> jobs <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 职位列表</span></span><br><span class="line">    url(<span class="string">r&quot;^joblist/&quot;</span>, views.job_list, name=<span class="string">&quot;joblist&quot;</span>),</span><br><span class="line">    <span class="comment"># 职位详情</span></span><br><span class="line">    url(<span class="string">r&quot;^job/(?P&lt;job_id&gt;\d+)/$&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># 提交简历</span></span><br><span class="line">    path(<span class="string">&#x27;resume/add/&#x27;</span>, views.ResumeCreateView.as_view(), name=<span class="string">&#x27;resume-add&#x27;</span>),</span><br><span class="line">    <span class="comment"># 首页自动跳转 职位列表</span></span><br><span class="line">    url(<span class="string">r&quot;^$&quot;</span>, views.job_list, name=<span class="string">&quot;name&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>定义简历创建页面的表单模板</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交简历<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>关联“申请职位”按钮的点击事件到简历提交页</li></ul><p>jobs/templates/job.html，申请按钮绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:120px;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;申请&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;location.href=&#x27;/resume/add/?apply_position=&#123;&#123;job.job_name&#125;&#125;&amp;city=&#123;&#123;job.city_name&#125;&#125;&#x27;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>进一步完善， 可以带参数跳转 &amp;&amp; 关联登陆用户到简历</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobs/view.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404, HttpResponseRedirect</span><br><span class="line"><span class="comment"># 从 URL 请求参数带入默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_initial</span>(<span class="params">self</span>):</span><br><span class="line">    initial = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> self.request.GET:</span><br><span class="line">        initial[x] = self.request.GET[x]</span><br><span class="line">    <span class="keyword">return</span> initial</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简历与当前用户关联</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">form_valid</span>(<span class="params">self, form</span>):</span><br><span class="line">    self.<span class="built_in">object</span> = form.save(commit=<span class="literal">False</span>)</span><br><span class="line">    self.<span class="built_in">object</span>.applicant = self.request.user</span><br><span class="line">    self.<span class="built_in">object</span>.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(self.get_success_url())</span><br></pre></td></tr></table></figure><h2 id="使用-Bootstrap-来定制页面样式"><a href="#使用-Bootstrap-来定制页面样式" class="headerlink" title="使用 Bootstrap 来定制页面样式"></a>使用 Bootstrap 来定制页面样式</h2><ul><li>安装依赖包： pip install django-bootstrap4</li><li>添加到 apps 中: bootstrap4</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;grappelli&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;registration&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bootstrap4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django_python3_ldap&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jobs&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interview&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>模板里面使用 bootstrap 标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;# Load the tag library #&#125;</span><br><span class="line">&#123;% load bootstrap4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Load CSS and JavaScript #&#125;</span><br><span class="line">&#123;% bootstrap_css %&#125;</span><br><span class="line">&#123;% bootstrap_javascript jquery=&#x27;full&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Display django.contrib.messages as Bootstrap alerts #&#125;</span><br><span class="line">&#123;% bootstrap_messages %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交简历<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;margin-left: 5px&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% bootstrap_form form %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% buttons %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">        提交</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    &#123;% endbuttons %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简历评估和安排一面面试官"><a href="#简历评估和安排一面面试官" class="headerlink" title="简历评估和安排一面面试官"></a>简历评估和安排一面面试官</h2><ul><li>目标：打通简历投递与面试流程，让简历实体 (Resume) 流转到候选人实体 (Candidate)</li><li>添加一个数据操作菜单“进入面试流程”</li><li>定义 enter_interview_process方法<ul><li>def enter_interview_process(modeladmin, request, queryset)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobs/admin.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> jobs.models <span class="keyword">import</span> Job, Resume</span><br><span class="line"><span class="keyword">from</span> interview.models <span class="keyword">import</span> Candidate</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enter_interview_process</span>(<span class="params">modeladmin, request, queryset</span>):</span><br><span class="line">    candidate_names = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> resume <span class="keyword">in</span> queryset:</span><br><span class="line">        candidate = Candidate()</span><br><span class="line">        <span class="comment"># 把 obj 对象中的所有属性拷贝到 candidate 对象中:</span></span><br><span class="line">        candidate.__dict__.update(resume.__dict__)</span><br><span class="line">        candidate.created_date = datetime.now()</span><br><span class="line">        candidate.modified_date = datetime.now()</span><br><span class="line">        candidate_names = candidate.username + <span class="string">&quot;,&quot;</span> + candidate_names</span><br><span class="line">        candidate.creator = request.user.username</span><br><span class="line">        candidate.save()</span><br><span class="line">    messages.add_message(request, messages.INFO, <span class="string">&#x27;候选人: %s 已成功进入面试流程&#x27;</span> % (candidate_names))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enter_interview_process.short_description = <span class="string">&quot;进入面试流程&quot;</span></span><br></pre></td></tr></table></figure><ul><li>注册到 modeladmin中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简历管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResumeAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    actions = (enter_interview_process,)</span><br></pre></td></tr></table></figure><h2 id="定制列表字段，查看简历详情"><a href="#定制列表字段，查看简历详情" class="headerlink" title="定制列表字段，查看简历详情"></a>定制列表字段，查看简历详情</h2><ul><li>添加 ResumeDetailView 的详情页视图，使用 Django的通用视图，继承自 DetailView</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> DetailView</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResumeDetailView</span>(<span class="title class_ inherited__">DetailView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;   简历详情页    &quot;&quot;&quot;</span></span><br><span class="line">    model = Resume</span><br><span class="line">    template_name = <span class="string">&#x27;resume_detail.html&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>添加 Detail 页模板： resume_detail.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;# Load the tag library #&#125;</span><br><span class="line">&#123;% load bootstrap4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Load CSS and JavaScript #&#125;</span><br><span class="line">&#123;% bootstrap_css %&#125;</span><br><span class="line">&#123;% bootstrap_javascript jquery=&#x27;full&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Display django.contrib.messages as Bootstrap alerts #&#125;</span><br><span class="line">&#123;% bootstrap_messages %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>简历详细信息 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 姓名: &#123;&#123; object.username &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>城市： &#123;&#123; object.city &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>手机号码: &#123;&#123; object.phone &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>邮件地址: &#123;&#123; object.email&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>申请职位: &#123;&#123; object.apply_position&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>出生地: &#123;&#123; object.born_address&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>性别: &#123;&#123; object.gender&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>本科学校: &#123;&#123; object.bachelor_school&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>研究所学校: &#123;&#123; object.master_school&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>专业: &#123;&#123; object.major&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>学历: &#123;&#123; object.degree&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>候选人介绍: &#123;&#123; object.candidate_introduction&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>工作经历: &#123;&#123; object.work_experience&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>项目经历: &#123;&#123; object.project_experience&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加路由跳转:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> jobs <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 职位列表</span></span><br><span class="line">    url(<span class="string">r&quot;^joblist/&quot;</span>, views.job_list, name=<span class="string">&quot;joblist&quot;</span>),</span><br><span class="line">    <span class="comment"># 职位详情</span></span><br><span class="line">    url(<span class="string">r&quot;^job/(?P&lt;job_id&gt;\d+)/$&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># 提交简历</span></span><br><span class="line">    path(<span class="string">&#x27;resume/add/&#x27;</span>, views.ResumeCreateView.as_view(), name=<span class="string">&#x27;resume-add&#x27;</span>),</span><br><span class="line">    <span class="comment"># 简历详情</span></span><br><span class="line">    path(<span class="string">&#x27;resume/&lt;int:pk&gt;/&#x27;</span>, views.ResumeDetailView.as_view(), name=<span class="string">&#x27;resume-detail&#x27;</span>),</span><br><span class="line">    <span class="comment"># 首页自动跳转 职位列表</span></span><br><span class="line">    url(<span class="string">r&quot;^$&quot;</span>, views.job_list, name=<span class="string">&quot;name&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>候选人列表页， 对于每一行来自简历投递的数据，添加一个“查看简历”的链接:<ul><li>列表页，使用 函数名称 作为 list_display 中的字段</li><li>定义一个函数， 获取 简历详情页链接</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interview/admin.py</span></span><br><span class="line"><span class="comment"># 在简历管理类下写一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 面试官查看简历</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_resume</span>(<span class="params">self, obj</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> obj.phone:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    resumes = Resume.objects.<span class="built_in">filter</span>(phone=obj.phone)</span><br><span class="line">    <span class="keyword">if</span> resumes:</span><br><span class="line">        <span class="keyword">return</span> mark_safe(<span class="string">&#x27;&lt;a href=&quot;/resume/%s&quot; target=&quot;_blank&quot;&gt;%s&lt;/a&gt;&#x27;</span> % (resumes[<span class="number">0</span>].<span class="built_in">id</span>, <span class="string">&quot;查看简历&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">get_resume.short_description = <span class="string">&quot;查看简历&quot;</span></span><br><span class="line">get_resume.allow_tags = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在list_display 加上这个方法</span></span><br></pre></td></tr></table></figure><h1 id="Django进阶开发复杂场景"><a href="#Django进阶开发复杂场景" class="headerlink" title="Django进阶开发复杂场景"></a>Django进阶开发复杂场景</h1><h2 id="为已有系统数据库生成管理功能"><a href="#为已有系统数据库生成管理功能" class="headerlink" title="为已有系统数据库生成管理功能"></a>为已有系统数据库生成管理功能</h2><p>问题：</p><ul><li>已经有内部系统在运行了，缺少管理功能，希望能有一个权利后台</li><li>比如 人事系统，CRM，ERP 的产品，缺少部分数据的维护功能</li></ul><p>为已有数据库生成管理后台</p><ul><li>创建项目: django-admin startproject empmanager</li><li>编辑settings.py中的数据库配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mydatabase&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;mydatabaseuser&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;mypassword&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;5432&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生成 model 类: python manage.py inspectdb &gt; models.py</li></ul><h2 id="Django中间件"><a href="#Django中间件" class="headerlink" title="Django中间件"></a>Django中间件</h2><p>Django中间件Middleware：</p><ul><li>注入在 Django 请求/响应 处理流程中的钩子框架，能对 request/response 作处理</li></ul><p>使用场景：</p><ul><li>登录认证，安全拦截</li><li>日志记录，性能上报</li><li>缓存处理，监控告警</li></ul><p>自定义中间件的2种方法：使用函数或者类来实现</p><p>使用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simple_middleware</span>(<span class="params">get_response</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">middleware</span>(<span class="params">request</span>):</span><br><span class="line">        <span class="comment"># 每个请求之前执行的代码</span></span><br><span class="line">        response = get_response(request)</span><br><span class="line">        <span class="comment"># request/response之后</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">return</span> middleware</span><br></pre></td></tr></table></figure><p>类实现，Django提供的get_response方法，可能是一个真实的视图，也可能是请求处理链中的下一个中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 每个请求之前执行的代码</span></span><br><span class="line">        response = self.get_response(resquest)</span><br><span class="line">        <span class="comment"># 之后</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="创建请求日志、性能日志记录中间件"><a href="#创建请求日志、性能日志记录中间件" class="headerlink" title="创建请求日志、性能日志记录中间件"></a>创建请求日志、性能日志记录中间件</h2><ul><li>定义实现中间件: def performance_logger_middleware(get_response)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># interview应用新建文件performance.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">performance_logger_middleware</span>(<span class="params">get_response</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">middleware</span>(<span class="params">request</span>):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        response = get_response(request)</span><br><span class="line">        duration = time.time() - start_time</span><br><span class="line">        <span class="comment"># 通过response头将耗时时间返回出去</span></span><br><span class="line">        response[<span class="string">&quot;X-Page-Duration-ms&quot;</span>] = <span class="built_in">int</span>(duration * <span class="number">1000</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;%s %s %s&quot;</span>, duration, request.path, request.GET.<span class="built_in">dict</span>())</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> middleware</span><br></pre></td></tr></table></figure><ul><li>记录请求 URL， 参数， 响应时间</li><li>注册 middleware 到 settings 中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;interview.performance.performance_logger_middleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>配置 日志文件路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&quot;handlers&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;console&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.StreamHandler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录到文件</span></span><br><span class="line">        <span class="string">&quot;file&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;class&quot;</span>: <span class="string">&quot;logging.FileHandler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;formatter&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">            <span class="string">&quot;filename&quot;</span>: os.path.join(os.path.dirname(BASE_DIR), <span class="string">&#x27;recruitment.admin.log&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;performance&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment">#&#x27;level&#x27;: &#x27;INFO&#x27;,</span></span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.FileHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(os.path.dirname(BASE_DIR), <span class="string">&#x27;recruitment.performance.log&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;loggers&quot;</span>: &#123;</span><br><span class="line">.......</span><br><span class="line">        <span class="string">&quot;interview.performance&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;handlers&quot;</span>: [<span class="string">&quot;console&quot;</span>, <span class="string">&quot;performance&quot;</span>],</span><br><span class="line">            <span class="string">&quot;level&quot;</span>: <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">            <span class="string">&quot;propagate&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210208220830.png" alt=""></p><h2 id="Django中使用多语言"><a href="#Django中使用多语言" class="headerlink" title="Django中使用多语言"></a>Django中使用多语言</h2><p>使用多语言：</p><ul><li>代码中使用 gettext, gettext_lazy 获取多语言资源对应的文本内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> gettext_lazy <span class="keyword">as</span> _</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resume</span>(models.Model):</span><br><span class="line">    <span class="comment"># Translators: 简历实体的翻译</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">135</span>, verbose_name=_(<span class="string">&#x27;姓名&#x27;</span>))</span><br></pre></td></tr></table></figure><p>职位列表页使用多语言:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- base.html --&gt;</span></span><br><span class="line">&#123;# Load the tag library #&#125;</span><br><span class="line">&#123;% load bootstrap4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% load i18n %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Load CSS and JavaScript #&#125;</span><br><span class="line">&#123;% bootstrap_css %&#125;</span><br><span class="line">&#123;% bootstrap_javascript jquery=&#x27;full&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Display django.contrib.messages as Bootstrap alerts #&#125;</span><br><span class="line">&#123;% bootstrap_messages %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto;width: 50%;&quot;</span>&gt;</span>&#123;% translate &quot;天维科技开放职位&quot; %&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block header %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: none; color:#007bff&quot;</span>&gt;</span>&#123;% translate &quot;Homepage&quot; %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/joblist&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: none; color:#007bff&quot;</span>&gt;</span>&#123;% translate &quot;job list&quot; %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if user.is_authenticated %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/accounts/logout&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: none; color:#007bff&quot;</span>&gt;</span>&quot;&#123;% translate &quot;Logout&quot; %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/accounts/login&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: none; color:#007bff&quot;</span>&gt;</span>&#123;% translate &quot;Login&quot; %&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if user.is_authenticated %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;% blocktranslate with user_name=user.username %&#125; 终于等到你 &#123;&#123; user_name &#125;&#125;,期待加入我们，用技术去探索一个新世界 &#123;% endblocktranslate  %&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;% translate &quot;欢迎你，期待加入我们，登陆后可以提交简历.&quot; %&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><ul><li>生成多语言资源文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> locale     <span class="comment"># 在项目根目录创建存放多语言文件的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成文本格式的多语言资源文件 .po 文件</span></span><br><span class="line">django-admin makemessages -l zh_HANS -l en</span><br><span class="line"><span class="comment"># 可能会报错，需要安装 gettext, http://gnuwin32.sourceforge.net/packages/gettext.htm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>翻译多语言内容</li><li>编译生成二进制多语言资源文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin compilemessages</span><br></pre></td></tr></table></figure><p>在项目urls.py文件配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;i18n/&#x27;</span>, include(<span class="string">&#x27;django.conf.urls.i18n&#x27;</span>)),</span><br></pre></td></tr></table></figure><p>在settings.py配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.translation <span class="keyword">import</span> gettext_lazy <span class="keyword">as</span> _</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">LANGUAGES = [</span><br><span class="line">    (<span class="string">&#x27;zh-hans&#x27;</span>, _(<span class="string">&#x27;Chinese&#x27;</span>)),</span><br><span class="line">    (<span class="string">&#x27;en&#x27;</span>, _(<span class="string">&#x27;English&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">LOCALE_PATHS = (</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&#x27;locale&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在页面上添加可以选择语言的按钮</p><p>在职位列表首页加上一个表单 base.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;flex: 1; align-content:right;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;set_language&#x27; %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-block-end: 0em;&quot;</span>&gt;</span>&#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;next&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; redirect_to &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span>&gt;</span></span><br><span class="line">        &#123;% get_current_language as LANGUAGE_CODE %&#125;</span><br><span class="line">        &#123;% get_available_languages as LANGUAGES %&#125;</span><br><span class="line">        &#123;% get_language_info_list for LANGUAGES as languages %&#125;</span><br><span class="line">        &#123;% for language in languages %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; language.code &#125;&#125;&quot;</span>&#123;% <span class="attr">if</span> <span class="attr">language.code</span> == <span class="string">LANGUAGE_CODE</span> %&#125; <span class="attr">selected</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span></span><br><span class="line">                &#123;&#123; language.name_local &#125;&#125; (&#123;&#123; language.code &#125;&#125;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&#123;%</span> <span class="attr">translate</span> &quot;<span class="attr">Switch</span>&quot; %&#125; <span class="attr">style</span>=<span class="string">&quot;font-size:12;height:20px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在settings.py文件配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加上中间件</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># 在session前面common后面加上配置</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.locale.LocaleMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="错误和异常日志上报"><a href="#错误和异常日志上报" class="headerlink" title="错误和异常日志上报"></a>错误和异常日志上报</h2><h3 id="Sentry集成"><a href="#Sentry集成" class="headerlink" title="Sentry集成"></a>Sentry集成</h3><p>使用 Docker 来安装 sentry, 使用 release 版本</p><ul><li><a href="https://github.com/getsentry/onpremise/releases">https://github.com/getsentry/onpremise/releases</a></li><li>./install.sh</li><li>docker-compose up -d</li></ul><p>Django 配置集成 sentry ， 自动上报未捕获异常， 错误日志</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210209102445.png" alt=""></p><h3 id="异常发送钉钉群"><a href="#异常发送钉钉群" class="headerlink" title="异常发送钉钉群"></a>异常发送钉钉群</h3><p>自定义中间件来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># performance.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sentry_sdk <span class="keyword">import</span> capture_exception</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> dingtalk</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 性能和异常 日志记录的中间件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PerformanceAndExceptionLoggerMiddleware</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, get_response</span>):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        <span class="comment"># One-time configuration and initialization.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># __call__相当于 前面处理resuest的函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># Code to be executed for each request before</span></span><br><span class="line">        <span class="comment"># the view (and later middleware) are called.</span></span><br><span class="line"></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">        duration = time.time() - start_time</span><br><span class="line">        <span class="comment"># 将耗时时间记录下来，放到响应头里</span></span><br><span class="line">        response[<span class="string">&quot;X-Page-Duration-ms&quot;</span>] = <span class="built_in">int</span>(duration * <span class="number">1000</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;duration:%s url:%s parameters:%s&quot;</span>, duration, request.path, request.GET.<span class="built_in">dict</span>() )</span><br><span class="line">        <span class="comment"># 当耗时超过500ms，就认为响应慢，记录到sentry</span></span><br><span class="line">        <span class="keyword">if</span> duration &gt; <span class="number">500</span>:</span><br><span class="line">            capture_message(<span class="string">&quot;slow request for url: %s with duration: %s&quot;</span> % (request.build_absolute_uri(), duration))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Code to be executed for each request/response after</span></span><br><span class="line">        <span class="comment"># the view is called.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理异常</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception</span>):</span><br><span class="line">        <span class="keyword">if</span> exception:</span><br><span class="line">                </span><br><span class="line">            message = <span class="string">&quot;url:&#123;url&#125; ** msg:&#123;error&#125; ````&#123;tb&#125;````&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                url = request.build_absolute_uri(),</span><br><span class="line">                error = <span class="built_in">repr</span>(exception),</span><br><span class="line">                tb = traceback.format_exc()</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            logger.warning(message)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># send dingtalk message</span></span><br><span class="line">            dingtalk.send(message)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># capture exception to sentry:</span></span><br><span class="line">            capture_exception(exception)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Error processing the request, please contact the system administrator.&quot;</span>, status=<span class="number">500</span>)</span><br></pre></td></tr></table></figure><p>在settings.py配置中间件</p><h2 id="Django安全防护"><a href="#Django安全防护" class="headerlink" title="Django安全防护"></a>Django安全防护</h2><h3 id="防止XSS跨站脚本攻击"><a href="#防止XSS跨站脚本攻击" class="headerlink" title="防止XSS跨站脚本攻击"></a>防止XSS跨站脚本攻击</h3><ul><li>恶意攻击者将代码通过网站注入到其他用户浏览器中的 攻击方式</li><li>攻击者会把恶意 JavaScript 代码作为普通数据放入 到网站数据库中；</li><li>其他用户在获取和展示数据的过程中，运行 JavaScript 代码；</li><li>JavaScript 代码执行恶意代码（调用恶意请求，发送 数据到攻击者等等）</li></ul><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobs/view.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接返回  HTML 内容的视图 （这段代码返回的页面有 XSS 漏洞，能够被攻击者利用）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail_resume</span>(<span class="params">request, resume_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resume = Resume.objects.get(pk=resume_id)</span><br><span class="line">        content = <span class="string">&quot;name: %s &lt;br&gt;  introduction: %s &lt;br&gt;&quot;</span> % (resume.username, resume.candidate_introduction)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(content)</span><br><span class="line">    <span class="keyword">except</span> Resume.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;resume does not exist&quot;</span>)</span><br></pre></td></tr></table></figure><p>在jobs/url.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> settings.DEBUG :</span><br><span class="line">    <span class="comment"># 有 XSS 漏洞的视图页面，</span></span><br><span class="line">    urlpatterns += [url(<span class="string">r&#x27;^detail_resume/(?P&lt;resume_id&gt;\d+)/$&#x27;</span>, views.detail_resume, name=<span class="string">&#x27;detail_resume&#x27;</span>),]</span><br></pre></td></tr></table></figure><p>在简历上加上这么一段js脚本:</p><p><code>&lt;script&gt;alert(&#39;page cookies:\n&#39; + document.cookie;)&lt;/script&gt;</code></p><p>可以利用django自带的模板渲染机制，来渲染页面。</p><h3 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF 跨站请求伪造"></a>CSRF 跨站请求伪造</h3><ul><li>CSRF（Cross-site request forgery，简称：CSRF 或 XSRF）</li><li>恶意攻击者在用户不知情的情况下，使用用户的身份来操作</li><li>黑客创建一个 请求网站 A 类的 URL 的 Web 页面，放在恶意网站 B 中 ，这个文件包含了一个创建 用户的表单。这个表单加载完毕就会立即进行提交</li><li>黑客把这个恶意 Web 页面的 URL 发送至超级管理员，诱导超级管理员打开这个 Web 页面</li></ul><p>django在中间件 CsrfViewMiddleware</p><h3 id="SQL-注入攻击"><a href="#SQL-注入攻击" class="headerlink" title="SQL 注入攻击"></a>SQL 注入攻击</h3><ul><li>SQL 注入漏洞: 攻击者直接对网站数据库执行任意 SQL语句，在无需 用户权限的情况下即可实现对数据的访问、修改甚至是删除</li><li>Django 的 ORM 系统自动规避了 SQL 注入攻击</li><li>原始 SQL 语句，切记避免拼接字符串，这是错误的调用方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">&#x27;select * from employee where last_name=%s&#x27;</span> % name</span><br><span class="line">Person.objects.raw(query)</span><br></pre></td></tr></table></figure><ul><li>正确的调用方式， 使用参数绑定:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name_map = &#123;<span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;first_name&#x27;</span>, <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;last_name&#x27;</span>, <span class="string">&#x27;pk&#x27;</span>: <span class="string">&#x27;id&#x27;</span>&#125;</span><br><span class="line">Person.objects.raw(<span class="string">&#x27;select * from employee&#x27;</span>, translations=name_map)</span><br></pre></td></tr></table></figure><h2 id="Django-Rest-Framework-开放API"><a href="#Django-Rest-Framework-开放API" class="headerlink" title="Django Rest Framework 开放API"></a>Django Rest Framework 开放API</h2><p>按Django Rest Framework文档上的说明：<a href="https://www.django-rest-framework.org/">https://www.django-rest-framework.org/</a></p><ul><li>安装依赖包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       <span class="comment"># Markdown support for the browsable API.</span></span><br><span class="line">pip install django-filter  <span class="comment"># Filtering support</span></span><br></pre></td></tr></table></figure><ul><li>注册app</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>添加url</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>在settings.py中配置权限</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># Use Django&#x27;s standard `django.contrib.auth` permissions,</span></span><br><span class="line">    <span class="comment"># or allow read-only access for unauthenticated users.</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将用户信息和职位信息通过API暴露出去，需要对用户的Model和职位的Model提供相应的序列化方式。</p><p>在项目的urls.py中定义序列化方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> jobs.models <span class="keyword">import</span> Job</span><br><span class="line"></span><br><span class="line"><span class="comment"># Serializers define the API representation.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ViewSets define the view behavior.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JobSerializer</span>(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Job</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JobViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    API endpoint that allows groups to be viewed or edited.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queryset = Job.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = JobSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># Routers provide an easy way of automatically determining the URL conf.</span></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r&#x27;users&#x27;</span>, UserViewSet)</span><br><span class="line">router.register(<span class="string">r&#x27;jobs&#x27;</span>, JobViewSet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">......</span><br><span class="line">    <span class="comment"># django rest api &amp; api auth (login/logout)</span></span><br><span class="line">    path(<span class="string">&#x27;api/&#x27;</span>, include(router.urls)),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210209133957.png" alt=""></p><h2 id="在Django中使用缓存"><a href="#在Django中使用缓存" class="headerlink" title="在Django中使用缓存"></a>在Django中使用缓存</h2><p>Django 缓存的存储方式：</p><ul><li>Memcached 缓存</li><li>Redis 缓存 （需要安装 django-redis 包）</li><li>数据库缓存</li><li>文件系统缓存</li><li>本地内存缓存</li><li>伪缓存( Dummy Cache， 用于开发、测试)</li><li>自定义缓存</li></ul><p>缓存的策略：</p><ul><li>整站缓存</li><li>视图缓存（使用CachePage来标记）</li><li>模板片段缓存</li></ul><p>django-redis 中文文档：<a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/">https://django-redis-chs.readthedocs.io/zh_CN/latest/</a></p><ul><li>安装：pip install django-redis</li><li>配置：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在settings.py</span></span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;BACKEND&quot;</span>: <span class="string">&quot;django_redis.cache.RedisCache&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LOCATION&quot;</span>: <span class="string">&quot;redis://127.0.0.1:6379/1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;OPTIONS&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;CLIENT_CLASS&quot;</span>: <span class="string">&quot;django_redis.client.DefaultClient&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整站缓存，加上中间件</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;django.middleware.cache.UpdateCacheMiddleware&#x27;</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.cache.FetchFromCacheMiddleware&#x27;</span>,</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Django与Celery集成"><a href="#Django与Celery集成" class="headerlink" title="Django与Celery集成"></a>Django与Celery集成</h2><p>Celery简单介绍：</p><ul><li>一个分布式的任务队列</li><li>简单： 几行代码可以创建一个简单的 Celery 任务</li><li>高可用：工作机会自动重试</li><li>快速：可以执行一分钟上百万的任务</li><li>灵活：每一块都可以扩展</li></ul><p>Celery使用场景，使用异步任务的场景：</p><ul><li>发送电子邮件，发送 IM 消息通知</li><li>爬取网页， 数据分析</li><li>图像、视频处理</li><li>生成报告，深度学习</li></ul><p>官方文档：<a href="https://docs.celeryproject.org/en/stable/getting-started/introduction.html#what-s-a-task-queue">https://docs.celeryproject.org/en/stable/getting-started/introduction.html#what-s-a-task-queue</a></p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install <span class="string">&quot;celery[librabbitmq,redis,auth,msgpack]&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个参数是当前运行脚本的名字</span></span><br><span class="line"><span class="comment"># backend存储是把每一个异步任务运行的结果存储在什么地方</span></span><br><span class="line"><span class="comment"># broker是存储任务的系统代理，也是一个消息队列</span></span><br><span class="line">app = Celery(<span class="string">&#x27;tasks&#x27;</span>, backend=<span class="string">&#x27;redis://127.0.0.1&#x27;</span>, broker=<span class="string">&#x27;redis://127.0.0.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><p>运行celery</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux是这么运行的</span></span><br><span class="line">celery -A tasks worker --loglevel=INFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># celery高版本不支持Windows</span></span><br></pre></td></tr></table></figure><p>添加运行任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">result = add.delay(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Is task ready: %s&#x27;</span> % result.ready())</span><br><span class="line"></span><br><span class="line">run_result = result.get(timeout=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;task result: %s&#x27;</span> % run_result)</span><br></pre></td></tr></table></figure><p>Flower: 一个实时的 Celery 任务监控系统</p><p>安装：pip install flower</p><p>官方文档：<a href="https://docs.celeryproject.org/en/stable/userguide/monitoring.html">https://docs.celeryproject.org/en/stable/userguide/monitoring.html</a></p><h3 id="Django与Celery集成：异步任务"><a href="#Django与Celery集成：异步任务" class="headerlink" title="Django与Celery集成：异步任务"></a>Django与Celery集成：异步任务</h3><p>文档：<a href="https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html">https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html</a></p><ul><li>Celery 4.0 的版本支持 Django 集成</li><li>不需要安装额外的库</li><li>使用 Celery 的自动发现机制: 自动发现 tasks.py</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210209161038.png" alt=""></p><p>在项目主应用下新建celery.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the default Django settings module for the &#x27;celery&#x27; program.</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;settings.base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;recruitment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using a string here means the worker doesn&#x27;t have to serialize</span></span><br><span class="line"><span class="comment"># the configuration object to child processes.</span></span><br><span class="line"><span class="comment"># - namespace=&#x27;CELERY&#x27; means all celery-related configuration keys</span></span><br><span class="line"><span class="comment">#   should have a `CELERY_` prefix.</span></span><br><span class="line">app.config_from_object(<span class="string">&#x27;django.conf:settings&#x27;</span>, namespace=<span class="string">&#x27;CELERY&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load task modules from all registered Django app configs.</span></span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(<span class="params">bind=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug_task</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Request: &#123;0!r&#125;&#x27;</span>.<span class="built_in">format</span>(self.request))</span><br></pre></td></tr></table></figure><p>在项目主应用<code>__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This will make sure the app is always imported when</span></span><br><span class="line"><span class="comment"># Django starts so that shared_task will use this app.</span></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">&#x27;celery_app&#x27;</span>,)</span><br></pre></td></tr></table></figure><p>在配置文件上配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CELERY_BROKER_URL = <span class="string">&#x27;redis://redis:6379/0&#x27;</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">&#x27;redis://redis:6379/1&#x27;</span></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">&#x27;application/json&#x27;</span>]</span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">CELERY_TIMEZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">CELERYD_MAX_TASKS_PER_CHILD = <span class="number">10</span></span><br><span class="line">CELERYD_LOG_FILE = os.path.join(BASE_DIR, <span class="string">&quot;logs&quot;</span>, <span class="string">&quot;celery_work.log&quot;</span>)</span><br><span class="line">CELERYBEAT_LOG_FILE = os.path.join(BASE_DIR, <span class="string">&quot;logs&quot;</span>, <span class="string">&quot;celery_beat.log&quot;</span>)</span><br></pre></td></tr></table></figure><p>通知面试官面试，发送钉钉群消息的地方加上celery</p><p>在interview应用下新建tasks.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"><span class="keyword">from</span> .dingtalk <span class="keyword">import</span> send</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_dingtalk_message</span>(<span class="params">message</span>):</span><br><span class="line">    send(message)</span><br></pre></td></tr></table></figure><p>在admin.py下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异步去执行</span></span><br><span class="line">send_dingtalk_message.delay(<span class="string">&quot;......&quot;</span>)</span><br></pre></td></tr></table></figure><p>在项目根目录下启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定django的配置路径</span></span><br><span class="line">DJANGO_SETTINGS_MODULE=settings.local celery --app recruitment worker -l info</span><br></pre></td></tr></table></figure><h3 id="Django-与-Celery-集成：定时任务"><a href="#Django-与-Celery-集成：定时任务" class="headerlink" title="Django 与 Celery 集成：定时任务"></a>Django 与 Celery 集成：定时任务</h3><ul><li>任务心跳管理进程 Beat</li><li>任务调度器<ul><li>PersistentScheduler （默认）</li><li>DatabaseScheduler</li></ul></li><li>任务存储<ul><li>File Configuration</li><li>Database</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210209162633.png" alt=""></p><ul><li>安装 beat: pip install django-celery-beat</li><li>将django-celery-beat注册到app中</li><li>数据库迁移</li><li>使用 DatabaseScheduler 启动 beat 或者在 配置中设置 beat_scheduler</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DJANGO_SETTINGS_MODULE=settings.local celery -A recruitment beat --scheduler django_celery_beat.scheduler:DatabaseScheduler</span><br></pre></td></tr></table></figure><ul><li>管理定时任务的方法<ul><li>在 Admin 后台添加管理定时任务</li><li>系统启动时自动注册定时任务</li><li>直接设置应用的 beat_schedule</li><li>运行时添加定时任务</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210209164528.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210209164543.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210209164617.png" alt=""></p><p>系统启动时自动注册定时任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery, shared_task</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the default Django settings module for the &#x27;celery&#x27; program.</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;settings.base&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;recruitment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在系统启动的时候运行</span></span><br><span class="line"><span class="meta">@app.on_after_configure.connect</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_periodic_tasks</span>(<span class="params">sender, **kwargs</span>):</span><br><span class="line">    <span class="comment"># Calls test(&#x27;hello&#x27;) every 10 seconds.</span></span><br><span class="line">    sender.add_periodic_task(<span class="number">10.0</span>, test.s(<span class="string">&#x27;hello&#x27;</span>), name=<span class="string">&#x27;hello every 10&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calls test(&#x27;world&#x27;) every 30 seconds</span></span><br><span class="line">    sender.add_periodic_task(<span class="number">30.0</span>, test.s(<span class="string">&#x27;world&#x27;</span>), expires=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Executes every Monday morning at 7:30 a.m.</span></span><br><span class="line">    sender.add_periodic_task(</span><br><span class="line">        crontab(hour=<span class="number">7</span>, minute=<span class="number">30</span>, day_of_week=<span class="number">1</span>),</span><br><span class="line">        test.s(<span class="string">&#x27;Happy Mondays!&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br></pre></td></tr></table></figure><p>直接配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> recruitment.tasks <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;add-every-10-seconds&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;recruitment.tasks.add&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: <span class="number">10.0</span>,</span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">4</span>, )</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统运行时动态添加定时任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django_celery_beat.models <span class="keyword">import</span> PeriodicTask, IntervalSchedule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先创建定时策略</span></span><br><span class="line">schedule, created = IntervalSchedule.objects.get_or_create(every=<span class="number">10</span>, period=IntervalSchedule.SECONDS,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再创建任务</span></span><br><span class="line">task = PeriodicTask.objects.create(interval=schedule, name=<span class="string">&#x27;say welcome 2021&#x27;</span>, task=<span class="string">&#x27;recruitment.celery.test&#x27;</span>, args=json.dumps([<span class="string">&#x27;welcome&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br></pre></td></tr></table></figure><h2 id="文件和图片上传功能"><a href="#文件和图片上传功能" class="headerlink" title="文件和图片上传功能"></a>文件和图片上传功能</h2><p>场景/目标：</p><ul><li>投递简历的页面， 可以上传个人的照片， 以及附件简历</li><li>上传的文件存储在服务器上，文件服务可以扩展</li></ul><p>存储方案选型：</p><ul><li>使用服务器本地磁盘</li><li>自建分布式文件服务器</li><li>阿里云 OSS</li></ul><h3 id="使用本地磁盘存储"><a href="#使用本地磁盘存储" class="headerlink" title="使用本地磁盘存储"></a>使用本地磁盘存储</h3><ul><li>设置图片、文件存储路径 &amp; URL 映射，settings 里面添加 /media 路径， urls.py 中添加图片路径映射</li><li>准备 model, form, view 和 HTML 表单模板<ul><li>model 里面添加图片/文件字段（如 个人照片， 个人简历字段到 Resume）</li><li>form.py 中增加图片，附件字段</li><li>创建简历的视图中展示 picture, attachment 字段</li><li>HTML 表单模板中增加 enctype 属性 （resume_form.html ）</li></ul></li><li>变更数据库</li><li>Admin里面 添加展示字段， 简历列表中加上照片展示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在配置文件上</span></span><br><span class="line">MEDIA_ROOT =  os.path.join(BASE_DIR, <span class="string">&#x27;media&#x27;</span>)</span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在项目主应用下urls.py</span></span><br><span class="line">urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在jobs下新建forms.py</span></span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> ModelForm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Resume</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResumeForm</span>(<span class="title class_ inherited__">ModelForm</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Resume</span><br><span class="line"></span><br><span class="line">        fields = [<span class="string">&quot;username&quot;</span>, <span class="string">&quot;city&quot;</span>, <span class="string">&quot;phone&quot;</span>,</span><br><span class="line">        <span class="string">&quot;email&quot;</span>, <span class="string">&quot;apply_position&quot;</span>, <span class="string">&quot;born_address&quot;</span>, <span class="string">&quot;gender&quot;</span>, <span class="string">&quot;picture&quot;</span>, <span class="string">&quot;attachment&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bachelor_school&quot;</span>, <span class="string">&quot;master_school&quot;</span>, <span class="string">&quot;major&quot;</span>, <span class="string">&quot;degree&quot;</span>, </span><br><span class="line">        <span class="string">&quot;candidate_introduction&quot;</span>, <span class="string">&quot;work_experience&quot;</span>, <span class="string">&quot;project_experience&quot;</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在html页面的form表单上加上参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在简历列表管理类</span></span><br><span class="line"><span class="keyword">from</span> django.utils.html <span class="keyword">import</span> format_html</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResumeAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    actions = (enter_interview_process,)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">image_tag</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">if</span> obj.picture:</span><br><span class="line">            <span class="keyword">return</span> format_html(<span class="string">&#x27;&lt;img src=&quot;&#123;&#125;&quot; style=&quot;width:100px;height:80px;&quot;/&gt;&#x27;</span>.<span class="built_in">format</span>(obj.picture.url))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    image_tag.allow_tags = <span class="literal">True</span></span><br><span class="line">    image_tag.short_description = <span class="string">&#x27;Image</span></span><br></pre></td></tr></table></figure><h3 id="使用阿里云-OSS-存储"><a href="#使用阿里云-OSS-存储" class="headerlink" title="使用阿里云 OSS 存储"></a>使用阿里云 OSS 存储</h3><p>复用前面创建好的类， 把存储替换为 OSS 存储，提升系统扩展性、可靠性</p><ul><li>安装 OSS 库，pip install django-oss-storage</li><li>OSS 的依赖添加 django_oss_storage 到 APPS</li><li>settings 里面添加 OSS 设置    </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">&#x27;django_oss_storage.backends.OssMediaStorage&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AliCloud access key ID</span></span><br><span class="line">OSS_ACCESS_KEY_ID = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># AliCloud access key secret</span></span><br><span class="line">OSS_ACCESS_KEY_SECRET = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># The name of the bucket to store files in</span></span><br><span class="line">OSS_BUCKET_NAME = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># The URL of AliCloud OSS endpoint</span></span><br><span class="line">OSS_ENDPOINT = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="多数据路由"><a href="#多数据路由" class="headerlink" title="多数据路由"></a>多数据路由</h2><p>对已有系统数据进行管理</p><p>应用场景：</p><ul><li>现有的一个业务应用，使用的 MySQL 数据库， 数据库名为 running </li><li>需要对数据库中的部分 model 进行管理。 包括 area, city, country, province 进行管理</li><li>使用 Django 主应用的数据库 （SQLite）管理 Django 基础账号权限数据</li><li>两个数据库，需要对 model 的操作做路由</li></ul><p>操作过程：</p><ul><li>多数据库配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: BASE_DIR / <span class="string">&#x27;db.sqlite3&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;running&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;running&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指定数据库表生成 model (inspectdb)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb --database=running --settings=settings.local area city country province &gt;&gt; running/models.py</span><br></pre></td></tr></table></figure><ul><li>注册到 Admin 中 (running/admin.py)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增一个应用app</span></span><br><span class="line">django-admin startapp running</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在running/admin.py注册model</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>添加 Router 类 &amp; settings 中配置 Router</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在settings文件夹下新建route.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseRouter</span>:</span><br><span class="line">    route_app_labels = &#123;<span class="string">&#x27;running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_for_read</span>(<span class="params">self, model, **hints</span>):</span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> self.route_app_labels:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;running&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">db_for_write</span>(<span class="params">self, model, **hints</span>):</span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> self.route_app_labels:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;running&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_relation</span>(<span class="params">self, obj1, obj2, **hints</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allow_migrate</span>(<span class="params">self, db, app_label, model_name=<span class="literal">None</span>, **hints</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        遗留数据库中的表不允许迁移</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> app_label <span class="keyword">in</span> self.route_app_labels:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在配置文件配置</span></span><br><span class="line"></span><br><span class="line">DATABASE_ROUTERS = [<span class="string">&#x27;settings.router.DatabaseRouter&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="支持大数据量的关联外键"><a href="#支持大数据量的关联外键" class="headerlink" title="支持大数据量的关联外键"></a>支持大数据量的关联外键</h2><p>场景/解决问题</p><ul><li>依赖外键数据量过大导致管理后台卡顿甚至死机<ul><li>比如添加一个员工，员工的出生地依赖于城市表，全球的城市数据有1w多</li><li>添加员工的时候，要从上万的城市中选择出生地</li><li>Django 默认会把依赖外键中的所有数据全部加载， 浏览器会停顿乃至没有反应，导致死机</li><li>关系：Province 依赖于 Country, City 从属于 Province</li></ul></li></ul><p>期望：选择依赖的数据时（比如员工所属城市），可输入字符查找</p><ul><li>准备：设置 Province， City 的外键依赖<ul><li>countryid = models.ForeignKey(Country, db_column=’countryid’, null=True, on_delete=models.SET_NULL)</li></ul></li><li>设置自动完成的关联外键 (admin.py)<ul><li>autocomplete_fields = [‘provinceid’]</li></ul></li><li>依赖的 model Admin 类中设置可以搜索的字段</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountryAdmin</span>(admin.ModelAdmin):</span><br><span class="line">search_fields = (<span class="string">&#x27;chn_name&#x27;</span>, <span class="string">&#x27;eng_name&#x27;</span>,)</span><br></pre></td></tr></table></figure><p>running/model.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Area</span>(models.Model):</span><br><span class="line">    areaid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    countryid = models.PositiveIntegerField()</span><br><span class="line">    chn_name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    eng_name = models.CharField(max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    sort = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        managed = <span class="literal">False</span></span><br><span class="line">        db_table = <span class="string">&#x27;area&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span>(models.Model):</span><br><span class="line">    countryid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    chn_name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    eng_name = models.CharField(max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    country_logo = models.CharField(max_length=<span class="number">120</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    sort = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        managed = <span class="literal">False</span></span><br><span class="line">        db_table = <span class="string">&#x27;country&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.chn_name <span class="keyword">if</span> self.chn_name <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Province</span>(models.Model):</span><br><span class="line">    provinceid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    countryid = models.ForeignKey(Country, db_column=<span class="string">&#x27;countryid&#x27;</span>, null=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    areaid = models.PositiveIntegerField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    chn_name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    eng_name = models.CharField(max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    sort = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        managed = <span class="literal">False</span></span><br><span class="line">        db_table = <span class="string">&#x27;province&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.chn_name <span class="keyword">if</span> self.chn_name <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> smart_selects.db_fields <span class="keyword">import</span> ChainedForeignKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">City</span>(models.Model):</span><br><span class="line">    cityid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    countryid = models.ForeignKey(Country, db_column=<span class="string">&#x27;countryid&#x27;</span>, null=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line">    areaid = models.PositiveIntegerField(blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    provinceid = models.ForeignKey(Province, db_column=<span class="string">&#x27;provinceid&#x27;</span>, null=<span class="literal">True</span>, on_delete=models.SET_NULL)</span><br><span class="line"></span><br><span class="line">    chn_name = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">    eng_name = models.CharField(max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    sort = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        managed = <span class="literal">False</span></span><br><span class="line">        db_table = <span class="string">&#x27;city&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.chn_name <span class="keyword">if</span> self.chn_name <span class="keyword">else</span> self.eng_name <span class="keyword">if</span> self.eng_name <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>国家-城市 多级关联的场景，django中有一个 smart-selects的插件</p><p><a href="https://github.com/jazzband/django-smart-selects">https://github.com/jazzband/django-smart-selects</a></p><ul><li>安装 django-smart-selects 插件，pip install django-smart-selects</li><li>添加 smart_selects 到安装的 APPS 中</li><li>在项目的 urls.py 中添加 chaining/ 的URL路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = patterns(<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">url(<span class="string">r&#x27;^admin/&#x27;</span>, include(admin.site.urls)),</span><br><span class="line">url(<span class="string">r&#x27;^chaining/&#x27;</span>, include(<span class="string">&#x27;smart_selects.urls&#x27;</span>)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>Model 中定义 ChainedForeignKey</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> smart_selects.db_fields <span class="keyword">import</span> ChainedForeignKey</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">City</span>(models.Model):</span><br><span class="line">    cityid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    countryid = models.ForeignKey(Country, db_column=<span class="string">&#x27;countryid&#x27;</span>, null=<span class="literal">True</span>, on_delete=model.SET_NULL)</span><br><span class="line">    </span><br><span class="line">    provinceid = ChainedForeignKey(</span><br><span class="line">    Province,</span><br><span class="line">        chained_field=<span class="string">&#x27;countryid&#x27;</span>,</span><br><span class="line">        chained_model_field=<span class="string">&#x27;countryid&#x27;</span>,</span><br><span class="line">        show_all=<span class="literal">False</span>,</span><br><span class="line">        auto_choose=<span class="literal">True</span>,</span><br><span class="line">        sort=<span class="literal">True</span>,</span><br><span class="line">        db_column=<span class="string">&#x27;provinceid&#x27;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="实现只读站点-ReadOnlyAdmin"><a href="#实现只读站点-ReadOnlyAdmin" class="headerlink" title="实现只读站点 ReadOnlyAdmin"></a>实现只读站点 ReadOnlyAdmin</h2><p>场景</p><ul><li>集成遗留的已有系统</li><li>已有系统的数据涉及到核心数据</li><li>为了确保数据安全，管理后台只提供数据的浏览功能</li></ul><p>解决问题：</p><ul><li>设置列表页 list_display 展示所有字段</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># running/admin.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadOnlyAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    readonly_fields = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_list_display</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> [field.name <span class="keyword">for</span> field <span class="keyword">in</span> self.model._meta.concrete_fields]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_readonly_fields</span>(<span class="params">self, request, obj=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(self.readonly_fields) + \</span><br><span class="line">               [field.name <span class="keyword">for</span> field <span class="keyword">in</span> obj._meta.fields] + \</span><br><span class="line">               [field.name <span class="keyword">for</span> field <span class="keyword">in</span> obj._meta.many_to_many]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_add_permission</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_delete_permission</span>(<span class="params">self, request, obj=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_change_permission</span>(<span class="params">self, request, obj=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 直接继承ReadOnlyAdmin类即可</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountryAdmin</span>(<span class="title class_ inherited__">ReadOnlyAdmin</span>):</span><br><span class="line">    search_fields = (<span class="string">&#x27;chn_name&#x27;</span>, <span class="string">&#x27;eng_name&#x27;</span>,)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自动注册所有Model到管理后台"><a href="#自动注册所有Model到管理后台" class="headerlink" title="自动注册所有Model到管理后台"></a>自动注册所有Model到管理后台</h2><p>场景：</p><ul><li>实际的业务场景中， 往往Model 多大几十个</li><li>一个个写Admin， 再Register， 效率低 </li><li>期望：能够自动注册 Model 到管理后台</li></ul><p>不好的解决方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接for循环遍历所有的model，注册到app里面</span></span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> apps</span><br><span class="line"></span><br><span class="line">models = apps.get_models()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">    admin.site.register(model)</span><br></pre></td></tr></table></figure><p>这样直接注册产生的问题：</p><ul><li>settings 里面可能已经注册了 App，它是按照顺序加载的</li><li>重复注册时会出现异常，需要处理重复注册的逻辑</li></ul><p>解决方案1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目主应用下apps.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> apps, AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminClass</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model, admin_site</span>):</span><br><span class="line">        <span class="comment"># 列表页自动显示所有的字段：</span></span><br><span class="line">        self.list_display = [field.name <span class="keyword">for</span> field <span class="keyword">in</span> model._meta.fields]</span><br><span class="line">        <span class="built_in">super</span>(AdminClass, self).__init__(model, admin_site)</span><br><span class="line"></span><br><span class="line"><span class="comment"># automatically register all models</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UniversalManagerApp</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    应用配置在 所有应用的 Admin 都加载完之后执行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># the name of the AppConfig must be the same as current application</span></span><br><span class="line">    name = <span class="string">&#x27;recruitment&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写ready方法，在应用加载完成之后会调用ready方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ready</span>(<span class="params">self</span>):</span><br><span class="line">        models = apps.get_app_config(<span class="string">&#x27;running&#x27;</span>).get_models() </span><br><span class="line">        <span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 这里的AdminClass是静态的，继承自ModelAdmin</span></span><br><span class="line">                admin.site.register(model, AdminClass)</span><br><span class="line">            <span class="keyword">except</span> admin.sites.AlreadyRegistered:</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>解决方案2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> apps, AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListAdminMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model, admin_site</span>):</span><br><span class="line">        <span class="comment"># 列表页自动显示所有的字段</span></span><br><span class="line">        self.list_display = [field.name <span class="keyword">for</span> field <span class="keyword">in</span> model._meta.fields]</span><br><span class="line">        <span class="built_in">super</span>().__init__(model, admin_site)</span><br><span class="line"></span><br><span class="line"><span class="comment"># automatically register all models</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UniversalManagerApp</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    应用配置在 所有应用的 Admin 都加载完之后执行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># the name of the AppConfig must be the same as current application</span></span><br><span class="line">    name = <span class="string">&#x27;recruitment&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写ready方法，在应用加载完成之后会调用ready方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ready</span>(<span class="params">self</span>):</span><br><span class="line">        models = apps.get_app_config(<span class="string">&#x27;running&#x27;</span>).get_models() </span><br><span class="line">        <span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">            admin_class = <span class="built_in">type</span>(<span class="string">&#x27;AdminClass&#x27;</span>, (ListAdminMixin, admin.ModelAdmin,), &#123;&#125;)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                admin.site.register(model, admin_class)</span><br><span class="line">            <span class="keyword">except</span> admin.sites.AlreadyRegistered:</span><br><span class="line">                <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>既然我们把所有的Model都注册进来，我们不用去创建Django的应用，不用写代码就能去管理一个数据库里面指定的表，可以使用python动态类的方法，使用动态的model把数据库中所有的model找到，在把这个model通过动态定义的方法把它定义注册进来，这样可以实现一个通用的应用，在这个应用可以定义一些设置，去设置我是对所有的表进行维护还是只要维护部份表。这样就可以做到不用写代码，直接加配置，对已有的系统进行维护</p><ul><li>使用python中的动态特性</li><li>使用type()函数去定义一个类：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = <span class="built_in">type</span>(name, (models.Model,), attrs)</span><br></pre></td></tr></table></figure><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通的类定义：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 动态类的定义</span></span><br><span class="line">Person = <span class="built_in">type</span>(<span class="string">&#x27;Person&#x27;</span>, (models.Model, ), &#123;</span><br><span class="line">    name = models.CharField(max_length=<span class="number">255</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开源应用 sandman2，可以对已有数据库提供增、删、改、查功能 和 Rest API</p><p>安装：pip install sandman2</p><p>以 SQLite 数据库为例子， 启动 sandman2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sandman2ctl sqlite+pysqlite:///db.sqlite3</span><br></pre></td></tr></table></figure><p>访问 restapi 和 管理后台:</p><ul><li><a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a></li><li><a href="http://127.0.0.1:5000/admin/">http://127.0.0.1:5000/admin/</a></li></ul><h2 id="Django的-signals信号"><a href="#Django的-signals信号" class="headerlink" title="Django的 signals信号"></a>Django的 signals信号</h2><p>什么是Signals</p><ul><li>Django的信号</li><li>Django 框架内置的信号发送器，这个信号发送器在框架里面</li><li>有动作发生的时候，帮助解耦的应用接收到消息通知</li><li>当动作发生时，允许特定的信号发送者发送消息到一系列的消息接收者</li><li>Signals 是同步调用</li></ul><p>信号的应用场景：</p><ul><li>系统解耦；代码复用：实现统一处理逻辑的框架中间件； -&gt; 可维护性提升</li><li>记录操作日志，增加/清除缓存，数据变化接入审批流程；评论通知；</li><li>关联业务变化通知</li><li>例：通讯录变化的异步事件处理，比如员工入职时发送消息通知团队新人入职，员工离 职时异步清理员工的权限等等；</li></ul><p>Signals 类的子类 （Django内置的常用信号）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型实例初始化前</span></span><br><span class="line">django.db.models.signals.pre_init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型实例初始化后</span></span><br><span class="line">django.db.models.signals.post_init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型保存前</span></span><br><span class="line">django.db.models.signals.pre_save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型保存后</span></span><br><span class="line">django.db.models.signals.post_save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型删除前</span></span><br><span class="line">django.db.models.signals.pre_delete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型删除后</span></span><br><span class="line">django.db.models.signals.post_delete</span><br><span class="line"></span><br><span class="line"><span class="comment">#  多对多字段被修改</span></span><br><span class="line">django.db.models.signals.m2m_changed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收到 HTTP 请求</span></span><br><span class="line">django.core.signals.request_started</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP 请求处理完毕</span></span><br><span class="line">django.core.signals.request_finished HTTP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的 Signals 都是 django.dispatch.Signal 的实例/子类</span></span><br></pre></td></tr></table></figure><p>如何注册信号处理器/接收器:</p><p>调用 Signals 任意一个子类的 connect方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Signal.connect(receiver, sender=<span class="literal">None</span>, weak=<span class="literal">True</span>, dispatch_uid=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># receiver: 信号接收器，一个回调函数，即处理信号的函数。</span></span><br><span class="line"><span class="comment"># sender： 信号的发送源，哪个发送方发出的信号</span></span><br><span class="line"><span class="comment"># weak：是否是弱引用，默认是弱引用；当receiver为局部变量时，接收器可能会被回收</span></span><br><span class="line"><span class="comment"># dispatch_uid：信号接收器的唯一标识符，用来避免接收器被重复注册</span></span><br></pre></td></tr></table></figure><p>除了使用 Signal.connect() 方法注册处理器外，也可以使用 @receiver 的装饰器来注册</p><p>示例：使用装饰器来注册，修改数据时，发送消息通知到钉钉</p><ul><li>在apps 的 ready() 函数中加载信号处理器</li><li>settings 中使用完整的名称注册 AppConfig，去掉原先注册的 jobs 应用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在jobs下新建文件 signal_processor.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models.signals <span class="keyword">import</span> post_save, post_delete</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Job, Resume</span><br><span class="line"><span class="keyword">from</span> interview.dingtalk <span class="keyword">import</span> send</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json, logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 decorator 来注册 信号处理器</span></span><br><span class="line"><span class="meta">@receiver(<span class="params">signal=post_save, sender=Resume, dispatch_uid=<span class="string">&quot;resume_post_save_dispatcher&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@receiver(<span class="params">signal=post_save, sender=Job, dispatch_uid=<span class="string">&quot;job_post_save_dispatcher&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_save_callback</span>(<span class="params">sender, instance=<span class="literal">None</span>, created=<span class="literal">False</span>, **kwarg</span>):</span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(instance, Job):</span><br><span class="line">        message = <span class="string">&quot;Job for %s has been saved&quot;</span> % instance.job_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        message = <span class="string">&quot;Resume for %s %s has been saved &quot;</span> % (instance.username , instance.apply_position)</span><br><span class="line">    </span><br><span class="line">    logger.info(message)</span><br><span class="line">    send(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.forms.models <span class="keyword">import</span> model_to_dict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_delete_callback</span>(<span class="params">sender, instance=<span class="literal">None</span>, using=<span class="literal">None</span>, **kwarg</span>):</span><br><span class="line">    dict_obj = model_to_dict( instance, exclude=(<span class="string">&quot;picture&quot;</span>,<span class="string">&quot;attachment&quot;</span>, <span class="string">&quot;created_date&quot;</span>, <span class="string">&quot;modified_date&quot;</span>) )</span><br><span class="line">    message = <span class="string">&quot;Instance of %s has been deleted: %s&quot;</span> % (<span class="built_in">type</span>(instance), json.dumps(dict_obj, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line">    logger.info(message)</span><br><span class="line">    send(message)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 手工注册信号处理器</span></span><br><span class="line">post_delete.connect(post_delete_callback, sender=Resume, dispatch_uid=<span class="string">&quot;resume_post_delete_dispatcher&quot;</span>)</span><br></pre></td></tr></table></figure><p>在jobs/apps.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.apps <span class="keyword">import</span> AppConfig</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JobConfig</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    name = <span class="string">&#x27;jobs&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ready</span>(<span class="params">self</span>):</span><br><span class="line">        logger.info(<span class="string">&quot;JobConfig ready&quot;</span>)</span><br><span class="line">        <span class="keyword">from</span> jobs.signal_processor <span class="keyword">import</span> post_save_callback</span><br></pre></td></tr></table></figure><p>在settings.py中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment"># &#x27;jobs&#x27;,  # 应用不能重复注册</span></span><br><span class="line">    <span class="string">&#x27;jobs.apps.JobConfig&#x27;</span>,</span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>自定义信号：</p><ul><li>定义信号： 在项目根目录新建文件self_signal.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> django.dispatch</span><br><span class="line">my_signal = django.dispatch.Signals(providing_args=[<span class="string">&quot;argument1&quot;</span>,<span class="string">&quot;argument2&quot;</span>])</span><br></pre></td></tr></table></figure><ul><li>触发信号：业务逻辑中触发信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> self_signal <span class="keyword">import</span> my_signal</span><br><span class="line">my_signal.send(sender=<span class="string">&quot;Recruitment&quot;</span>, argument1=<span class="number">111</span>, argument2=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>注册信号处理器/接收器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> self_signal <span class="keyword">import</span> my_signal</span><br><span class="line">my_signal.connect(callback_of_my_signal)</span><br></pre></td></tr></table></figure><h2 id="优雅的架构设计"><a href="#优雅的架构设计" class="headerlink" title="优雅的架构设计"></a>优雅的架构设计</h2><h3 id="CSR-架构总结-Celery"><a href="#CSR-架构总结-Celery" class="headerlink" title="CSR 架构总结 Celery"></a>CSR 架构总结 Celery</h3><p>Celery架构：</p><ul><li>解决的问题： 异步任务调度，定时任务调度</li></ul><p>Celery架构之美：</p><ul><li>清晰的定义来几个基础概念</li><li>API使用起来清晰、简洁</li><li>关键设计可以扩展，具备高可用性</li><li>定义了一套协议/API，跨平台（Python/Node/PHP 客户端，Python/Go/Rust 服务端）</li></ul><p>Celery中核心的概念：</p><ul><li>Task: 一个需要执行的任务，任务通常异步执行</li><li>Period Task: 需要定时执行的任务，定时一定间隔执行，也可以使用 crontab 表达式设定执 行周期和时间点</li><li>Message Broker: 消息代理，临时存储，传输任务到工作节点的消息队列。可以用 Redis, RabbitMQ, Amazon SQS 作为消息代理。消息代理可以有多个，以保障系统的高可用</li><li>Worker：工作节点，执行任务的进程，worker可以有多个，保障系统的高可用和扩展性</li><li>Result Store: 结果存储</li><li>Scheduler/Beat： 调度器进程, Beat是定时任务调度器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210153601.png" alt=""></p><p>Celery 的跨平台 - 不同语言的客户端/服务器端实现：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210153842.png" alt=""></p><p>Celery 的高可用架构：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210153909.png" alt=""></p><h3 id="CSR-架构总结-Sentry"><a href="#CSR-架构总结-Sentry" class="headerlink" title="CSR 架构总结 Sentry"></a>CSR 架构总结 Sentry</h3><p>解决的问题： 应用的错误，异常监控统计，报警通知；性能监控统计，对问题进行跟踪</p><p>Sentry架构之美：</p><ul><li>API 简单、易用，自动集成；安装简单：架构依赖多，但使用 Docker 可以一个命令安装</li><li>自动对错误，异常进行统计聚合，按照上下文的Tag进行聚合</li><li>可以对性能进行统计分析，可抽样;可视化的趋势分析</li><li>多租户，支持双因素认证，敏感内容自动脱敏</li><li>开放的架构：可与 AD 域账号集成，与 Google/Stackoverflow 等账号集成</li><li>开放的架构：有完善的插件支持：Webhook/Gitlab/Jira/Slack/PushOver/….</li><li>支持不同环境（开发、测试、预发、线上）；可以配置灵活的告警</li><li>跨平台，跨端的支持</li></ul><p>Sentry中的概念</p><ul><li>Symbolicator: 用来解析函数名，堆栈中的文件位置，代码上下文</li><li>Relay: 用来处理收到的请求，会立刻返回200或者429， 然后把事件放在内存中排队， 然后发到 Kafka ingest-events</li><li>ingest-consumer: 消费处理 Relay 发出的消息</li><li>process_event: 堆栈处理，插件预处理</li><li>postgresql: 用来保存完整的事件数据</li><li>Snuba： 事件数据的存储和查询服务</li><li>clickhouse: 用作数据仓库，用于 OLAP，搜索，聚合，标签统计</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210154821.png" alt=""></p><p>应用这边发送Crash的日志或者异常日志，发送到服务器端的web容器，发送到Nginx的网关，Nginx收到请求之后，发送到Sentry中的relay。relay是一个中继，会处理收到的请求，收到之后会立刻返回200或者429。relay会把事件放在内存队列中，发送到Kafka的ingest-events里面去。然后在Sentry的ingest-consumer那边会去消费中继发送过来的消息，进一步到后面去处理。后面的处理是由Celery的Task去处理的。Celery Task去取到消息之后做预处理，之后会去调用符号服务，符号服务是一个symbolicate，它可以解析我们代码里面的函数名、类名、包括堆栈里面的文件信息、每一行代码跟文件之间的关系和代码的上下文。解析完成之后再去处理这个事件，处理事件的时候，插件的预处理都会在这里去处理掉，process_event环节都会在这里运行，处理完了会保存事件。然后接下来的话，Celery的task任务会把事件发送到Snuba的Kafka的消息流里面去。snuba有一个消费端，会读取Kafka的消息，然后把这个数据存储到clickhouse，clickhouse用作数据仓库，用于做OLAP的分析，做数据的搜索聚合标签的统计。，包括我们按照不同的状态、Tag去查询数据都是走clickhouse。像这种错误信息收集，然后Crash信息收集的数据量很大的情况，我们用PostgreSQL不是太适合，特别是像跟着日志一起的相关的上下文的信息，这种数据在关系型数据库里面查询起来会相当慢。</p><p>Snuba是事件数据的一个查询跟存储服务，它的作用是为了隐藏Clickhouse对于上面应用层的一个复杂度，对clickhouse做了一个封装。</p><p>Sentry整体的架构：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210160641.png" alt=""></p><p>在Sentry的核心架构里面，有几个重要的概念，包括Relay消息处理的中继。Ingest Kafka就是最前端接受消息的Kafka队列，Ingest consumer前端消息的消费者，然后Celery的这些task会去处理每一个消息，做这个符号解析，最后把数据保存到PostgreSQL之后，再把数据发一份到Snuba那边，产生Snuba Kafka消息，然后Snuba的消费者去一条一条消息消费，完了之后把完整的数据丢到clickhouse，同时也会去做一个事件的post_process，它里面回去遍历所有的插件，使用每一个插件对数据进行一个后处理。</p><p>Snuba的作用：</p><ul><li>用作搜索、图计算、规则处理查询的一个服务</li><li>这个服务实际上对clickhouse做了一个抽象跟隔离</li><li>Snuba有两个部分组成的服务<ul><li>一个是Reading的服务，通过clickhouse的查询语法去clickhouse查询，做分析，做聚合统计</li><li>一个是Writing的服务，首先是接收到Kafka的消息，然后把数据写到clickhouse里面去</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210162636.png" alt=""></p><h3 id="Rest-framework总结"><a href="#Rest-framework总结" class="headerlink" title="Rest framework总结"></a>Rest framework总结</h3><p>解决的问题： 为应用提供Restful API</p><p>DRF 架构之美：</p><ul><li>简单易用，既可以使用自动的 CRUD API，也可以自定义实现API</li><li>提供可浏览的 HTML API; 一套实现同时提供 HTML/JSON/XML 展现</li><li>灵活的用户认证，支持 Token/OAuth/OAuth2/JWT 等认证方式</li><li>提供流量控制，结果过滤筛选，分页，API 版本控制能力</li><li>灵活的权限控制：登陆用户，管理员，Django内置权限，只读权限，匿名用户</li></ul><p>简单定义一个model的API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserViewSet</span>(viewsets.ModelViewSet):</span><br><span class="line">    queryset = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserSerializer</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210163409.png" alt=""></p><p>整体架构：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210163503.png" alt=""></p><h2 id="Django常用的插件"><a href="#Django常用的插件" class="headerlink" title="Django常用的插件"></a>Django常用的插件</h2><ul><li>Django debug toolbar : 提供一个可以查看debug 信息的面板（包括SQL执行时间，页面耗时），开发环境可以使用，但线上环境不能使用</li><li>django-silk ：性能瓶颈分析，可以查看SQL执行的时间</li><li>Simple UI：基于Element UI 和 VUE 的 Django Admin 主题</li><li>Haystack Django ：模块化搜索方案</li><li>Django notifications： 发送消息通知，你有 xx 条未处理简历</li><li>Django markdown editor ：Markdown 编辑器</li><li>django-crispy-forms : Crispy 表单，以一种非常优雅、干净的方式来创建美观的表单</li><li>django-simple-captcha：Django表单验证码</li></ul><h3 id="Django-debug-toolbar"><a href="#Django-debug-toolbar" class="headerlink" title="Django_debug_toolbar"></a>Django_debug_toolbar</h3><p>文档：<a href="https://django-debug-toolbar.readthedocs.io/en/latest/">https://django-debug-toolbar.readthedocs.io/en/latest/</a></p><p>安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install django-debug-toolbar</span><br></pre></td></tr></table></figure><p>注册到app：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;debug_toolbar&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br></pre></td></tr></table></figure><p>url：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> debug_toolbar</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;__debug__/&#x27;</span>, include(debug_toolbar.urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>启用middleware</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">&#x27;debug_toolbar.middleware.DebugToolbarMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>页面右侧就会有相关信息</p><h3 id="Simple-UI"><a href="#Simple-UI" class="headerlink" title="Simple UI"></a>Simple UI</h3><p>文档：<a href="https://simpleui.72wo.com/docs/simpleui/quick.html">https://simpleui.72wo.com/docs/simpleui/quick.html</a></p><p>安装：pip install django-simpleui</p><p>注册app：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;simpleui&#x27;</span>,</span><br><span class="line"> ......</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210165612.png" alt=""></p><h3 id="Django模块化搜索Haystack"><a href="#Django模块化搜索Haystack" class="headerlink" title="Django模块化搜索Haystack"></a>Django模块化搜索Haystack</h3><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210192703.png" alt=""></p><ul><li>安装Package: pip install django-haystack</li><li>把 Haystack 添加到 settings 中</li><li>配置 HAYSTACK_CONNECTIONS， 指定使用哪种搜索引擎 （Solr, ES, Whoosh, Xapian）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;haystack.backends.whoosh_backend.WhooshEngine&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PATH&#x27;</span>: os.path.join(os.path.dirname(__file__), <span class="string">&#x27;whoosh_index&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建 SearchIndex 来指定 model 的索引策略<ul><li>每一个 model 创建一个 SearchIndex : indexes.SearchIndex, indexes.Indexable</li></ul></li><li>设置搜索的 页面 View 和 URL</li><li>创建索引，通常设置定时任务来创建全量索引，动态索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py rebuild_index</span><br><span class="line">python manage.py update_index</span><br></pre></td></tr></table></figure><h1 id="生产环境部署和应用监控告警"><a href="#生产环境部署和应用监控告警" class="headerlink" title="生产环境部署和应用监控告警"></a>生产环境部署和应用监控告警</h1><p>生产环境部署之前：</p><ul><li>单元测试：版本质量评估</li><li>生产环境 Django 配置</li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>测试用例基类层次：</p><ul><li>SimplTestCase:  继承自python的 TestCase基类，可以发起 HTTP 请求，跟页面， 模板，URL 交互，禁止了数据库的访问</li><li>TransactionTestCase：在用例运行之后，清理 所有表来重置数据库; 可以运行提交、回滚 来观 察中间状态（需要测试事务时使用）</li><li>TestCase: 测试用例执行完后不清理表数据； 在 一个事务中执行用例，最后自动回滚事务</li><li>LiveServerTestCase: 在后台自动启动一个 Server，以便使用外部工具如 Selenium 做测试 </li></ul><h3 id="一个简单的测试用例："><a href="#一个简单的测试用例：" class="headerlink" title="一个简单的测试用例："></a>一个简单的测试用例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestCase</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpTestData</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">super</span>().setUpTestData()</span><br><span class="line">        ....</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">super</span>().setUpTestData()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># setup run before every test method</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># clean up run after every test method</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_something_that_will_pass</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertFalse(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="目录结构组织"><a href="#目录结构组织" class="headerlink" title="目录结构组织"></a>目录结构组织</h3><p>哪些逻辑需要测试</p><ul><li>Django 自带的代码（框架中实现的）逻辑不需要测试</li><li>自己写的代码需要测试，比如自定义的页面的访问，自定义的功能菜单</li></ul><p>测试用例目录组织：</p><ul><li>Django 使用 unittest 模块的内置测试查找机制</li><li>它将在当前工作目录下， 查找任何匹配模式test*.py 命名的文件作为 Test Case</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210210233.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jobs/testcase/test_views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> Client</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jobs.models <span class="keyword">import</span> Job, JobTypes, Cities</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JobTests</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpTestData</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="comment"># Set up data for the whole TestCase</span></span><br><span class="line">        <span class="comment"># 使用job的model去创建一个对象</span></span><br><span class="line">        cls.job = Job.objects.create(job_name=<span class="string">&quot;Java开发工程师&quot;</span>, job_type=JobTypes[<span class="number">0</span>][<span class="number">0</span>], job_city=Cities[<span class="number">1</span>][<span class="number">0</span>], job_requirement=<span class="string">&quot;精通Java开发&quot;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># Some test using self.job</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试职位列表页是否访问正常</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_index</span>(<span class="params">self</span>):</span><br><span class="line">        client = Client()</span><br><span class="line">        response = client.get(<span class="string">&#x27;/joblist/&#x27;</span>)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_detail</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 使用 TestCase.self.client 作为 HTTP Client:</span></span><br><span class="line">        response = self.client.get(<span class="string">&#x27;/job/1/&#x27;</span>)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        job = response.context[<span class="string">&#x27;job&#x27;</span>]</span><br><span class="line">        self.assertEqual(job.job_name, JobTests.job.job_name)</span><br></pre></td></tr></table></figure><h3 id="执行测试用例"><a href="#执行测试用例" class="headerlink" title="执行测试用例"></a>执行测试用例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行项目下面所有 test</span></span><br><span class="line">python manage.py test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试指定模块</span></span><br><span class="line">python manage.py test jobs.testcase</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试单个模块中的文件</span></span><br><span class="line">python manage.py test jobs.testcase.test_views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定类</span></span><br><span class="line">python manage.py test jobs.testcase.test_views.JobTests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试指定方法</span></span><br><span class="line">python manage.py test jobs.testcase.test_views.JobTests.test_detail</span><br></pre></td></tr></table></figure><h2 id="生产环境的应用部署"><a href="#生产环境的应用部署" class="headerlink" title="生产环境的应用部署"></a>生产环境的应用部署</h2><h3 id="发布到生产环境的步骤"><a href="#发布到生产环境的步骤" class="headerlink" title="发布到生产环境的步骤"></a>发布到生产环境的步骤</h3><ul><li>配置生产环境配置 (settings)：DEBUG &amp; Secret 相关信息</li><li>选择Django App的托管环境 (IaaS/PaaS，比如 阿里云/AWS/Azure/GAE/Heroku 等等)</li><li>部署前的安全检查</li><li>选择静态资源文件的托管环境（包括JS/CSS/图片/文件等） &amp; 部署静态资源</li><li>部署 Django 应用容器 &amp; Web服务器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210214941.png" alt=""></p><h3 id="配置生产环境配置：让网站准备好发布"><a href="#配置生产环境配置：让网站准备好发布" class="headerlink" title="配置生产环境配置：让网站准备好发布"></a>配置生产环境配置：让网站准备好发布</h3><p>必须调整的关键配置是：</p><ul><li>DEBUG. 在生产环境中设置为 False（DEBUG = False）。避免在 web 页面上显示敏感的调试 跟踪和变量信息</li><li>SECRET_KEY. 这是用于CSRF保护的随机值</li><li>ALLOWED_HOSTS, 生产环境必须设置 允许访问的域名</li></ul><p>生成 SECRET KEY：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="配置生产环境配置：密钥的存储和管理"><a href="#配置生产环境配置：密钥的存储和管理" class="headerlink" title="配置生产环境配置：密钥的存储和管理"></a>配置生产环境配置：密钥的存储和管理</h3><ul><li>从环境变量读取配置， 或从配置文件中读取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">DEBUG = FALSE</span><br><span class="line">SECRET_KEY = os.environ.get(<span class="string">&#x27;DJANGO_SECRET_KEY&#x27;</span>, <span class="string">&#x27;xxxxx&#x27;</span>)</span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;setcreed.com&quot;</span>]</span><br></pre></td></tr></table></figure><ul><li>从 KMS 系统中读取配置的密钥<ul><li>自己部署的 KMS 系统</li><li>云服务的 KMS 服务： 阿里云/AWS 的 KMS 服务</li></ul></li></ul><h3 id="部署前的安全检查"><a href="#部署前的安全检查" class="headerlink" title="部署前的安全检查"></a>部署前的安全检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py check --deploy</span><br></pre></td></tr></table></figure><h3 id="部署到生产环境"><a href="#部署到生产环境" class="headerlink" title="部署到生产环境"></a>部署到生产环境</h3><p>静态资源文件的托管环境</p><ul><li>静态内容 Web 服务器： Apache/Nginx</li><li>CDN 服务器</li></ul><p>collectstatic 工具：用来收集静态资源文件, settings 中的相关设置:</p><ul><li>STATIC_URL: 能够访问到静态文件的 URL 路径。</li><li>STATIC_ROOT: collectstatic 工具用来保存收集到的项目引用到的任何静态文件的路径</li><li>STATICFILES_DIRS: 这列出了 Django 的 collectstatic 工具应该搜索静态文件的其他目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic --settings=settings.local</span><br></pre></td></tr></table></figure><p>收集完成后，可以将这些静态文件，上传到托管文件的服务器/CDN</p><h3 id="Django-应用容器"><a href="#Django-应用容器" class="headerlink" title="Django 应用容器"></a>Django 应用容器</h3><p>同步应用</p><ul><li>uWSGI: C 实现的 Python Web 容器；Web 服务器 Apache/Nginx 与 django-uwsgi 进程通信 来提供动态的内容</li><li>gunicorn：纯 Python 实现的高性能 Python 应用容器，无外部依赖，简单容易配置； 还没有遇到性能问题的时候，推荐使用 gunicorn.</li></ul><p>异步应用，django3.0之后才有</p><ul><li>Daphne: twisted 实现</li><li>Hypercorn: 基于 sans-io hyper, h11, h2, wsproto实现</li><li>Uvicorn: 基于 uvloop and httptools 实现</li></ul><p>异步支持 Roadmap:</p><ul><li>Django 的异步支持 Roadmap<ul><li>Django 3.0 - ASGI Server</li><li>Django 3.1 - Async Views </li><li>Django 3.2/4.0 - Async ORM</li></ul></li><li>异步视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;hello, async&quot;</span>)</span><br></pre></td></tr></table></figure><p>启动服务器:</p><p>同步应用服务器，以 gunicorn 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install gunicorn</span><br><span class="line"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=settings.local</span><br><span class="line">gunicorn -w 3 -b 127.0.0.1:8000 recruitment.wsgi:application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上启动 3 个 worker进程, 绑定到 本机的8000端口</span></span><br></pre></td></tr></table></figure><p>异步应用服务器，以uvcorn 为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install uvicorn</span><br><span class="line"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=settings.local</span><br><span class="line">uvicorn recruitment.asgi:application --workers 3</span><br></pre></td></tr></table></figure><h2 id="应用水平扩展：使用负载均衡"><a href="#应用水平扩展：使用负载均衡" class="headerlink" title="应用水平扩展：使用负载均衡"></a>应用水平扩展：使用负载均衡</h2><h3 id="安装配置Tenine"><a href="#安装配置Tenine" class="headerlink" title="安装配置Tenine"></a>安装配置Tenine</h3><p>使用Tengine，<a href="https://tengine.taobao.org/">https://tengine.taobao.org/</a></p><ul><li>Tengine完全兼容Nginx, 同时提供了额外的强大功能</li><li>增强相关运维、监控能力,比如异步打印日志及回滚,本地DNS缓存,内存监控等</li><li>动态脚本语言Lua支持。扩展功能简单高效</li><li>更加强大的负载均衡能力，包括一致性hash模块、会话保持模块</li><li>主动健康检查，根据服务器状态自动上线下线，以及动态解析upstream中出现的域名</li><li>输入过滤器机制支持，更强大的防攻击（访问速度限制）模块；方便实现应用防火墙</li></ul><p>安装 Tengine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖 pcre</span></span><br><span class="line">wget https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/pcre &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定pcre源码目录安装tengine</span></span><br><span class="line">wget https://tengine.taobao.org/download/tengine-2.3.2.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf tengine-2.3.2.tar.gz &amp;&amp; <span class="built_in">cd</span> /data/tengine-2.3.0</span><br><span class="line"></span><br><span class="line">./configure --prefix=/data/tengine/ --with-http_realip_module --</span><br><span class="line">with-http_gzip_static_module --with-pcre=/data/pcre-8.44</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>简单配置：路由转发请求到 Gunicorn/uWSGI 服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> recruit.setcreed.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">localtion</span> / &#123;</span><br><span class="line">        <span class="comment"># 转发请求到gunicorn进程</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8000;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">proxy_set_header</span>Host</span><br><span class="line">        proxy_set_headerX-Real-IP</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 包含了 客户端的地址，以及各级代理IP 完整的 IP链</span></span><br><span class="line">        proxy_set_headerX-Forwarded-For<span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Tengine/Nginx 负载均衡</p><p>相关的配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /data/tengine/conf.d/recruitment.conf</span></span><br><span class="line"></span><br><span class="line"><span class="section">upstream</span> django-server &#123;</span><br><span class="line">    <span class="comment"># max_fails = 3 为允许失败的次数，默认为1.对后端节点做健康检查</span></span><br><span class="line">    <span class="comment"># 20s内，当max_fails失败后，暂停将请求分发到该服务器</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100:8001</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">20s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100:8002</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">20s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101:8001</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">20s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101:8002</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">20s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span><span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>www.mysite.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">access_log</span>/data/tengine/logs/recruitment-access.logmain;</span><br><span class="line">    <span class="attribute">error_log</span>/data/tengine/logs/recruitment-<span class="literal">error</span>.log;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://django-server;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>Host<span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>X-Real-IP<span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>REMOTE-HOST<span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>X-Forwarder-For<span class="variable">$proxy_add_x_forwarder_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tengine-的分流策略"><a href="#Tengine-的分流策略" class="headerlink" title="Tengine 的分流策略"></a>Tengine 的分流策略</h3><p>负载分流策略：</p><ul><li>round-robin — 平均分配流量：轮询模式</li><li>least-connected — 最少连接优先，下一个请求分到活跃连接最少的服务器 </li><li>ip-hash — 按照客户端 IP 哈希来分配服务器 IP</li><li>带权重流量分配</li><li>一致性哈希 （Tengine）</li><li>会话保持 （Tengine 特性）</li></ul><p>最少连接优先：</p><ul><li>前面配置的为平均分配流量</li><li>按照最少连接优先/ip hash 的配置：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> django-<span class="section">upstream</span> &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100:8001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100:8002</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101:8001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101:8002</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按权重分配：</p><ul><li>按照权重分配（适合机器配置不一样时）</li><li>6个请求里面，3个走到第一台，其它3台没台1个请求</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> django-<span class="section">upstream</span> &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100:8001</span> weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100:8002</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101:8001</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101:8002</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会话保持：</p><ul><li>尽可能保证同一个客户端访问的都是同一个后端服务器</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认配置：cookie=route mode=insert fallback=on</span></span><br><span class="line"><span class="section">upstream</span> django-<span class="section">upstream</span> &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101</span>;</span><br><span class="line">    session_sticky;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://django-upstream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="健康检查自动容错"><a href="#健康检查自动容错" class="headerlink" title="健康检查自动容错"></a>健康检查自动容错</h3><p>被动健康检查: ngx_http_upstream_module 实现了被动的健康检查功能</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 被动健康检查</span></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">20s</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">20s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>www.mysite.com;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主动健康检查： http_upstream_check_module，主动定时检查:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主动健康检查</span></span><br><span class="line"><span class="section">upstream</span> django-<span class="section">upstream</span> &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101</span>;</span><br><span class="line">    <span class="attribute">check</span> interval=<span class="number">3000</span> rise=<span class="number">2</span> fall=<span class="number">3</span> timeout=<span class="number">1000</span> type=http;</span><br><span class="line">    <span class="attribute">check_http_send</span> <span class="string">&quot;HEAD /HTTP/1.0\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="attribute">check_http_expect_alive</span> http_2xx http_3xx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的参数含义</p><ul><li>interval: 向后端发送的健康检查包的间隔</li><li>fall(fall_count)：如果连续失败次数达到fall_count，服务就被认为是down</li><li>rise(rise_count)：如果连续成功次数达到rise_count，服务就被认为是up</li><li>timeout：后端健康请求的超时时间</li></ul><p>上面配置的意思：对django-upstream的所有节点，每隔3秒检测一次，请求2次正常则标记 realserver状态为up，如果检测3次都失败，则标记realserver的状态为down，超时时间为1秒。</p><h2 id="使用CDN加速"><a href="#使用CDN加速" class="headerlink" title="使用CDN加速"></a>使用CDN加速</h2><p>为什么要使用 CDN：</p><ul><li>页面卡顿</li><li>高并发情况下服务器压力大</li></ul><p>CDN 访问的两阶段：</p><ul><li>域名解析</li><li>内容请求</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210210225737.png" alt=""></p><p>当用户发起URL请求时，第一阶段会做域名解析，通常会在服务器上配置一个域名，静态资源对应的域名的一个cname，cname指向另外一个不同的域名，这个域名是由CDN提供的。当CDN服务器解析收到域名请求的时候，它会根据用户的IP地址去判断用户的IP在哪个区域，然后去找到跟用户所在IP最近的一台CDN节点的IP地址，作为解析得到的域名的地址，然后把域名对应的IP地址返回给用户；然后第二阶段再去发起HTTP请求，这个时候就近的CDN节点会收到它的请求，会去取内容，要么从它的缓存里面取内容返回，要么去从原始的内容原站取到内容最后返回给用户。取到内容之后，CDN会做缓存，而且缓存时间比较长。手工清除缓存可能会导致不同节点不一致的问题，一般使用版本控制的策略，每一次资源有更新的时候，去使用不同的版本。</p><p>加速静态资源访问的两种方法：</p><ul><li>使用云端的静态资源 （能够解决国外网站访问慢的问题）</li><li>使用 CDN 加速</li></ul><p>例：使用阿里云的 OSS 存储静态资源文件， Django 会自动替换所有静态资源文件的路径为 OSS 文件的路径，并且对 URL 添加鉴权参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings里面添加OSS</span></span><br><span class="line">STATIC_ROOT = ‘static<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">STATICFILES_STORAGE = &#x27;</span>django_oss_storage.backends.OssStaticStorage<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>使用 CDN 的两种方式:</p><ul><li>手工上传静态资源文件到 CDN</li><li>通过 Tengine 把本机的静态资源开放到 Web上， CDN自动回流到 Tengine</li></ul><p>以手工上传静态资源文件为例，Django 启用 CDN 静态资源加速的步骤</p><ul><li>生成静态资源文件， 上传静态资源到 OSS</li><li>配置 CDN 域名，回源地址指向 OSS Bucket， 配置 Referer 防盗链的白名单</li><li>配置 OSS Bucket 匿名可以读</li><li>设置 STATIC_URL，直接指向 CDN 地址，同时注释掉 OssStaticStorage 避免冲突</li></ul><p>启用 CDN 加速静态资源文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;http://icdn.setcreed.com/static/&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="接入监控告警"><a href="#接入监控告警" class="headerlink" title="接入监控告警"></a>接入监控告警</h2><ul><li>Sentry 错误监控 与告警</li><li>告警趋势可视化: Prometheus &amp; Grafana 概念介绍</li><li>告警趋势可视化: Prometheus &amp; Grafana 架构</li><li>Prometheus &amp; Grafana 接入</li><li>配置 Grafana 大盘</li></ul><p>Prometheus &amp; Grafana 概念介绍：</p><p>Prometheus 数据类型：</p><ul><li>Counter：计数器，总是增长的整数值；请求数，订单量，错误数等</li><li>Gauge：可以上下波动的计量值，比如温度，内存使用量，处理中的请求；</li><li>Summary：提供观测样本的摘要，包含样本数量，样本值的和； 滑动窗口计算:请求耗时，响应数据大小</li><li>Histogram：把观测值放到配置好的桶中做统计，请求耗时，响应数据大小等</li></ul><p>Prometheus &amp; Grafana 架构：</p><ul><li>Prometheus服务： 采集和存储时序数据</li><li>客户端类库： 用作注入应用端代码</li><li>Push gateway： 用于采集朝生暮死的作业数据</li><li>特殊用途的Exporter Service： 如Nginx/HAProxy/StatsD等</li><li>Alertmanager：处理告警</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211072722.png" alt=""></p><p>Prometheus 与 Grafana 的调用关系：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211072815.png" alt=""></p><p>Prometheus &amp; Grafana 接入：</p><ul><li>安装 Prometheus &amp; Grafana</li><li>启动 Prometheus &amp; Grafana</li><li>接入Django: Prometheus 插件集成 <a href="https://github.com/korfuri/django-prometheus">https://github.com/korfuri/django-prometheus</a></li><li>Promethues 配置 Django 应用的Endpoint</li><li>Grafana 中配置应用的监控图</li></ul><p>配置 Grafana 大盘：</p><p>下载 Dashbaord 的Json ，导入到 Grafana 中：<a href="https://grafana.com/grafana/dashboards/9528">https://grafana.com/grafana/dashboards/9528</a></p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211072950.png" alt=""></p><h1 id="生产环境中的安全"><a href="#生产环境中的安全" class="headerlink" title="生产环境中的安全"></a>生产环境中的安全</h1><h2 id="生产环境的安全设计"><a href="#生产环境的安全设计" class="headerlink" title="生产环境的安全设计"></a>生产环境的安全设计</h2><p>生产环境安全要考虑的因素：</p><ul><li>防火墙：把攻击挡在外面，建立安全区</li><li>应用安全：密码攻击 &amp; 访问限流 – 防恶意攻击</li><li>架构安全：部署架构的安全性，应用架构安全设计</li><li>数据安全：SSL，敏感数据加密 与 日志脱敏</li><li>密码安全与业务安全：权限控制 &amp; 密码安全策略</li></ul><p>防火墙的作用：建立安全区，把攻击挡在外面</p><p>防火墙的类别：</p><ul><li>硬件防火墙</li><li>WAF防火墙</li><li>操作系统防火墙</li></ul><h3 id="WAF-防火墙"><a href="#WAF-防火墙" class="headerlink" title="WAF 防火墙"></a>WAF 防火墙</h3><ul><li>WAF: Web application firewall，基于预先定义的规则， 如预先定义的正则表 达式的黑名单，不安全URL 请求等</li><li>防止 SQL 注入，XSS， SSRF等web攻击</li><li>防止CC攻击 屏蔽常见的扫描黑客工具，扫描器</li><li>屏蔽异常的网络请求 屏蔽图片附件类目录php执行权限</li><li>防止 web shell 上传</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211082423.png" alt=""></p><h3 id="系统防火墙"><a href="#系统防火墙" class="headerlink" title="系统防火墙"></a>系统防火墙</h3><p>常用的 Linux 系统防火墙</p><ul><li>iptables: Linux原始自带的防火墙工具iptables</li><li>ufw: Ubuntu的防火墙工具ufw. uncomplicated firewall 的简称，简单防火墙</li><li>firewalld: CentOS的防火墙工具firewalld</li></ul><p>Ubuntu 的 ufw：</p><ul><li>Linux原始的防火墙工具 iptables 过于繁琐</li><li>Ubuntu 提供了基于iptables 之上的防火墙 ufw</li><li>ufw 支持图形界面操作</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211083318.png" alt=""></p><p>规则：</p><ul><li>开启 ufw 后，默认是允许所有连接通讯</li><li>且配置的策略也有先后顺序，每一条策略都有序号</li><li>服务器上配置，建议先 deny from any，再放开需要开放的访问</li></ul><h2 id="应用安全"><a href="#应用安全" class="headerlink" title="应用安全"></a>应用安全</h2><ul><li>防恶意密码攻击</li><li>应用访问限流</li></ul><p>防恶意密码攻击策略：</p><ul><li>在用户连续登陆 n 次失败后， 要求输入验证码登陆</li></ul><p>可选方案：使用 simple captcha 插件：<a href="https://django-simple-captcha.readthedocs.io/en/latest/usage.html">https://django-simple-captcha.readthedocs.io/en/latest/usage.html</a></p><h3 id="防恶意密码攻击"><a href="#防恶意密码攻击" class="headerlink" title="防恶意密码攻击"></a>防恶意密码攻击</h3><ul><li>安装 &amp; 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip install django-simple-captcha</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册到app</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># captcha 加到 settings/base.py 中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url.py 中添加路径映射</span></span><br><span class="line">path(<span class="string">&#x27;captcha/&#x27;</span>, include(<span class="string">&#x27;captcha.urls&#x27;</span>)),</span><br><span class="line"><span class="comment"># 假设 clogin的页面来让用户登录</span></span><br><span class="line">path(<span class="string">&quot;clogin/&quot;</span>, views.login_with_captcha, name=<span class="string">&quot;clogin&quot;</span>),</span><br></pre></td></tr></table></figure><ul><li>添加 登陆验证 Form 和 Views 视图</li><li>添加登陆 模板页</li><li>添加登陆失败的频次控制</li><li>设置管理员的登陆页， 默认使用带连续失败需要验证码的页面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在view视图上加一个登录的逻辑</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.forms <span class="keyword">import</span> AuthenticationForm</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> captcha.fields <span class="keyword">import</span> CaptchaField <span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse_lazy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CaptchaLoginForm</span>(<span class="title class_ inherited__">AuthenticationForm</span>):</span><br><span class="line">    <span class="comment"># username = forms.CharField(label=&#x27;用户名&#x27;)</span></span><br><span class="line">    <span class="comment"># password = forms.CharField(widget=forms.PasswordInput, label=&#x27;密码&#x27;)</span></span><br><span class="line">    captcha = CaptchaField(label=<span class="string">&#x27;验证码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">max_failed_login_count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_with_captcha</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.POST:</span><br><span class="line">        failed_login_count = request.session.get(<span class="string">&#x27;failed_login_count&#x27;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 没有连续的登陆失败， 使用默认的登陆页； 连续 n 次登陆失败， 要求输入验证码</span></span><br><span class="line">        <span class="keyword">if</span> failed_login_count &gt;= max_failed_login_count :</span><br><span class="line">            form = CaptchaLoginForm(data=request.POST)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            form = AuthenticationForm(data=request.POST)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Validate the form: the captcha field will automatically</span></span><br><span class="line">        <span class="comment"># check the input</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            request.session[<span class="string">&#x27;failed_login_count&#x27;</span>] = <span class="number">0</span></span><br><span class="line">            <span class="comment"># authenticate user with credentials</span></span><br><span class="line">            user = authenticate(username=form.cleaned_data[<span class="string">&quot;username&quot;</span>], password=form.cleaned_data[<span class="string">&quot;password&quot;</span>])</span><br><span class="line">            <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># attach the authenticated user to the current session</span></span><br><span class="line">               login(request,user)</span><br><span class="line">               <span class="keyword">return</span> HttpResponseRedirect(reverse_lazy(<span class="string">&#x27;admin:index&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            failed_login_count += <span class="number">1</span></span><br><span class="line">            request.session[<span class="string">&#x27;failed_login_count&#x27;</span>] = failed_login_count</span><br><span class="line">            logger.warning(<span class="string">&quot; ----- failed login for user: %s, failed times:%s&quot;</span> %  (form.data[<span class="string">&quot;username&quot;</span>], failed_login_count) )</span><br><span class="line">            <span class="keyword">if</span> failed_login_count &gt;= max_failed_login_count :</span><br><span class="line">                form = CaptchaLoginForm(request.POST)</span><br><span class="line">            messages.add_message(request, messages.INFO, <span class="string">&#x27;Not a valid request&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">## 没有连续的登陆失败， 使用默认的登陆页； 连续 n 次登陆失败， 要求输入验证码</span></span><br><span class="line">        failed_login_count = request.session.get(<span class="string">&#x27;failed_login_count&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> failed_login_count &gt;= max_failed_login_count :</span><br><span class="line">            form = CaptchaLoginForm(request.POST)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            form = AuthenticationForm()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;form&#x27;</span>: form&#125;)</span><br></pre></td></tr></table></figure><p>项目主应用下的templates/login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 10px;&quot;</span>&gt;</span></span><br><span class="line">  &#123;% csrf_token %&#125;</span><br><span class="line">  &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-actions&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:120px;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="访问限流-–-防恶意攻击"><a href="#访问限流-–-防恶意攻击" class="headerlink" title="访问限流 – 防恶意攻击:"></a>访问限流 – 防恶意攻击:</h3><ul><li>Rest Framework API 限流</li><li>应用限流: 对页面的访问频次进行限流</li></ul><p>Rest API 限流</p><ul><li>可以对匿名用户，具名用户进行限流</li><li>可以设置峰值流量（如每分钟60次请求）</li><li>也可以设置连续一段时间的流量限制（比如每天3000次）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;example.throttles.BurstRateThrottle&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;example.throttles.SustainedRateThrottle&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;burst&#x27;</span>: <span class="string">&#x27;60/min&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sustained&#x27;</span>: <span class="string">&#x27;3000/day&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对页面的访问频次进行限流:</p><p>示例策略： 一分钟最多请求5次登陆页，防止暴力攻击登陆页</p><p>可以选方案： 使用 django-ratelimit 插件，<a href="https://django-ratelimit.readthedocs.io/en/stable/index.html">https://django-ratelimit.readthedocs.io/en/stable/index.html</a></p><p>例如在对验证码登录的方法进行限流，每分钟最多可以访问5次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ratelimit.decorators <span class="keyword">import</span> ratelimit</span><br><span class="line"></span><br><span class="line"><span class="meta">@ratelimit(<span class="params">key=<span class="string">&#x27;ip&#x27;</span>, rate=<span class="string">&#x27;5/m&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_with_captcha</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="架构安全"><a href="#架构安全" class="headerlink" title="架构安全"></a>架构安全</h2><ul><li>防火墙</li><li>XSS攻击的中间件</li><li>CSRF攻击的中间件</li><li>SQL注入的中间件</li><li>应用的部署架构</li><li>密钥存储原则</li></ul><h3 id="应用的部署架构"><a href="#应用的部署架构" class="headerlink" title="应用的部署架构"></a>应用的部署架构</h3><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211140118.png" alt=""></p><ul><li>这是典型中小型互联网应用部署架构</li><li>服务器内部组成私有网络</li></ul><h3 id="密钥存储"><a href="#密钥存储" class="headerlink" title="密钥存储"></a>密钥存储</h3><p>密钥信息的存储原则：</p><ul><li>基础的用法： 使用环境变量/独立的配置文件， 不放在代码库中</li><li>使用 Key Server：使用开源的 Key Server， 或 阿里云/AWS 的 KMS 服务</li></ul><p>从独立的配置文件中读取配置密钥</p><ul><li>从独立的配置文件中读取配置密钥</li><li>容器环境，启动容器时作为环境变量传入 – 密钥不落地到容器存储中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read secret key from a file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/etc/secret_key.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    SECRET_KEY = f.read().strip()</span><br></pre></td></tr></table></figure><p>使用 Key Server:</p><ul><li>vault <a href="https://github.com/hashicorp/vault">https://github.com/hashicorp/vault</a></li><li>keywhiz <a href="https://github.com/square/keywhiz">https://github.com/square/keywhiz</a></li><li>knox <a href="https://github.com/pinterest/knox">https://github.com/pinterest/knox</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211144647.png" alt=""></p><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><ul><li>SSL 证书的使用</li><li>敏感数据加密</li><li>日志脱敏</li></ul><h3 id="Let’s-Encrypt-SSL-证书的使用"><a href="#Let’s-Encrypt-SSL-证书的使用" class="headerlink" title="Let’s Encrypt SSL 证书的使用"></a>Let’s Encrypt SSL 证书的使用</h3><ul><li>Let’s Encrypt是一家非盈利机构， 免费提供 SSL 证书。</li><li>Let’s encrypt的目标是为了构建一个安全的互联网</li><li>Let’s Encrypt的证书被各大主流的浏览器和网络服务商支持</li><li>提供的证书90天过期，需要自动重新申请。 有相应的工具可以使用</li></ul><p>Let’s Encrypt 的两种使用方式：</p><ul><li>Webroot 方式： certbot 会利用既有的 web server，在其 web root 目录下创 建隐藏文件，Lets Encrypt 服务端会通过域名来访问这些隐藏文件，以确认你的 确拥有对应域名的控制权</li><li>Standalone 方式： Certbot 会自己运行一个 web server 来进行验证。如果我 们自己的服务器上已经有 web server 正在运行 （比如 Nginx 或 Apache ）， 用 standalone 方式的话需要先关掉它，以免冲突</li></ul><p>安装使用：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Debian 上面安装 certbot 工具</span></span><br><span class="line">sudo apt install snapd</span><br><span class="line">sudo snap install core</span><br><span class="line"></span><br><span class="line">sudo snap install --classic cerbot</span><br><span class="line">sudo <span class="built_in">ln</span> -s /snap/bin/cerbot /usr/bin/cerbot</span><br></pre></td></tr></table></figure><p>Web root 方式:</p><ul><li>编辑 nginx.conf 配置文件, 确保可以访问 /.well-known/ 路径及里边存放的验证文件</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /.well-known/acme-challenge/ &#123;</span><br><span class="line">    <span class="attribute">default_type</span> <span class="string">&quot;text/plain&quot;</span>;</span><br><span class="line">    <span class="attribute">root</span> /data/www/example;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新加载 nginx      nginx -s reload</li><li>调用命令生成证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/certbot certonly --email admin@example.com --webroot -w</span><br><span class="line">/data/www/example -d example.com -d www.example.com</span><br></pre></td></tr></table></figure><ul><li>命令会在 web root 目录中创建 .well-known 文件夹，其中包含了域名所有权的 验证文件</li><li>Certbot 会访问域名下面 /.well-known/acme-challenge/ 来验证域名是否绑 定，并生成证<ul><li>—email 为申请者邮箱</li><li>—webroot 为 webroot 方式，-w 为站点目录，-d 为要加 https 证书的域名</li></ul></li></ul><p>在nginx中开启https</p><ul><li>证书生成完成后可以到 /etc/letsencrypt/live/ 目录下查看对应域名的证书文件。 编辑 nginx 配置文件监听 443 端口，启用 SSL，并配置 SSL 的公钥、私钥证书 路径。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211161853.png" alt=""></p><ul><li>Nginx 配置文件中配置 SSL 证书， 以及监听端口， 重新加载 nginx</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">server_name</span> example.com www.example.com;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">    <span class="attribute">root</span> /home/wwwroot/example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl_certificate</span>/etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>/etc/letsencrypt/live/example.com/privkey.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Let’s-Encrypt-SSL-证书续期"><a href="#Let’s-Encrypt-SSL-证书续期" class="headerlink" title="Let’s Encrypt SSL 证书续期"></a>Let’s Encrypt SSL 证书续期</h3><ul><li>证书 3个月过期一次</li><li>使用 snapd 安装的 certbot, 会启动一个 cron job 或者 systemd 的定时任务，在证 书过期前自动续期</li><li>运行这个命令测试自动续期</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试自动续期命令</span></span><br><span class="line">cerbot renew --dry-run</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查定时任务</span></span><br><span class="line">systemctl list-timers</span><br></pre></td></tr></table></figure><h3 id="敏感数据加密"><a href="#敏感数据加密" class="headerlink" title="敏感数据加密"></a>敏感数据加密</h3><ul><li>对敏感数据，比如用户提交的内容，财务报告，第三方合同等数据进行加密</li><li>使用 Python 的 cryptography 库      pip install cryptography</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line"></span><br><span class="line">key = Fernet.generate_key()</span><br><span class="line"></span><br><span class="line">f = Fernet(key)</span><br><span class="line"></span><br><span class="line">token = f.encrypt(<span class="string">b&quot;welcome to django&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(token)</span><br><span class="line"></span><br><span class="line">d = f.decrypt(token)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><h3 id="日志脱敏"><a href="#日志脱敏" class="headerlink" title="日志脱敏"></a>日志脱敏</h3><p>在日志记录中，过滤掉敏感信息存储，避免敏感信息泄漏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.debug <span class="keyword">import</span> sensitive_variables</span><br><span class="line"></span><br><span class="line"><span class="meta">@sensitive_variables(<span class="params"><span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;pw&#x27;</span>, <span class="string">&#x27;cc&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_info</span>(<span class="params">user</span>):</span><br><span class="line">    pw = user.pass_word</span><br><span class="line">    cc = user.credit_card_number</span><br><span class="line">    name = user.name</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>可以用 sensitive_variables 装饰器阻止错误日志内容包含这些变量的值</p><p>具体参考 sensitive_post_parameters, sensitive_post_parameters   <a href="https://docs.djangoproject.com/zh-hans/3.1/howto/error-reporting/#filteringsensitive-information">https://docs.djangoproject.com/zh-hans/3.1/howto/error-reporting/#filteringsensitive-information</a></p><h2 id="密码安全与业务安全"><a href="#密码安全与业务安全" class="headerlink" title="密码安全与业务安全"></a>密码安全与业务安全</h2><ul><li>权限控制<ul><li>遵循最小原则， 长时间没用自动回收</li><li>思路： 定时任务检查所有用户，找到长时间没有登陆的用户，回收相应的权限， 或删除账号</li></ul></li><li>密码策略<ul><li>密码复杂度策略</li><li>定期更新策略</li></ul></li></ul><h3 id="密码策略"><a href="#密码策略" class="headerlink" title="密码策略"></a>密码策略</h3><p>密码验证策略 AUTH_PASSWORD_VALIDATORS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用django中自带的配置</span></span><br><span class="line"></span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;min_length&#x27;</span>: <span class="number">9</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="密码过期策略"><a href="#密码过期策略" class="headerlink" title="密码过期策略"></a>密码过期策略</h3><p>可以使用 django-user-accounts 插件 <a href="https://github.com/pinax/django-user-accounts">https://github.com/pinax/django-user-accounts</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用中间件</span></span><br><span class="line">MIDDLEWARE_CLASSES = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&quot;account.middleware.ExpiredPasswordMiddleware&quot;</span>,</span><br><span class="line">    ......</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置国企策略</span></span><br><span class="line">ACCOUNT_PASSWORD_USE_HISTORY = <span class="literal">True</span></span><br><span class="line">ACCOUNT_PASSWORD_EXPIRY = <span class="number">60</span>*<span class="number">60</span>*<span class="number">25</span>*<span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="云环境中的部署"><a href="#云环境中的部署" class="headerlink" title="云环境中的部署"></a>云环境中的部署</h1><h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h2><ul><li>docker：<ul><li>码头工人，轻量级的，可移植，自包含的容器，来自动化、版本化应用的发布</li><li>Docker上跑的容器是一个个的集装箱</li></ul></li><li>Docker的基础是LXC<ul><li>LXC用于应用程序的隔离，每个应用程序分配独立的命名空间，隔离的CPU, 内存，磁盘，网络资源</li><li>每个应用内部可以单跑一套容器系统，功能上相当于传统的虚拟机，但本质上是内核层面对资源的隔离</li></ul></li><li>Docker 容器的分层和版本管理<ul><li>Docker把应用和系统打包到一起（image镜像），进行版本化管理</li><li>应用之于Docker，如同代码之于Git/SVN，一个命令可以把应用部署到docker上</li></ul></li></ul><p>Docker 容器的几个重要概念：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211183001.png" alt=""></p><h3 id="用容器部署应用-Dockerfile"><a href="#用容器部署应用-Dockerfile" class="headerlink" title="用容器部署应用 Dockerfile"></a>用容器部署应用 Dockerfile</h3><p>举例说明：<a href="https://docs.docker.com/compose/gettingstarted/">https://docs.docker.com/compose/gettingstarted/</a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=app.py</span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev linux-headers</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>使用 Python 3.7 作为基础镜像</li><li>把 /code 设置为工作目录</li><li>设置 flask 命令运行的环境变量</li><li>安装 gcc 和其它依赖</li><li>拷贝 requirements.txt 并安装其它依赖包</li><li>添加元数据来到镜像，声明监听 5000 端口</li><li>拷贝当前目录下所有文件，到镜像的工作目录</li><li>设置容器的默认运行命令：flask run</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把当前目录作为上下文， 构建镜像</span></span><br><span class="line">docker build .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个 Dockerfile 构建镜像</span></span><br><span class="line">docker build -f /path/to/a/Dockerfile .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个仓库， 以及一个 tag 保存镜像</span></span><br><span class="line"> docker build -t shykes/myapp .</span><br></pre></td></tr></table></figure><h3 id="用容器部署应用-Docker-compose"><a href="#用容器部署应用-Docker-compose" class="headerlink" title="用容器部署应用 Docker compose"></a>用容器部署应用 Docker compose</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="容器化-Django-应用"><a href="#容器化-Django-应用" class="headerlink" title="容器化 Django 应用"></a>容器化 Django 应用</h2><p>Django 应用容器化优势：</p><ul><li>效率提升：开发环境可以复用</li><li>简单：一个命令搭建可以运行的开发环境</li><li>每个应用隔离的容器环境，无 Python/Pip包 版本冲突</li></ul><p>代码调整：</p><ul><li>settings文件配置：ALLOWED_HOSTS = [‘*’]</li><li>配置项放到环境变量中，通过读取配置启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000 <span class="variable">$server_params</span></span><br></pre></td></tr></table></figure><p>构建小镜像Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /data/recruitment</span></span><br><span class="line"><span class="keyword">ENV</span> server_params=</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --update --no-cache curl jq py3-configobj py3-pip py3-setuptools python3 python3-dev \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; apk add --no-cache gcc g++ jpeg-dev zlib-dev libc-dev libressl-dev musl-dev libffi-dev \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; python -m pip install --upgrade pip \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; pip install -r requirements.txt \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; apk del gcc g++ libressl-dev musl-dev libffi-dev python3-dev \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; apk del curl jq py3-configobj py3-pip py3-setuptools \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; <span class="built_in">rm</span> -rf /var/cache/apk/*</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;/data/recruitment/start.local.bat&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建小镜像要点:</p><ul><li>使用 alpine 的基础镜像</li><li>多个 命令使用一个 RUN 命令，这样只会产生一个 layer</li><li>在 RUN 命令的最后面删除不用的包，以及cache的包，减小镜像大小</li><li>使用 .dockerigonre 文件，把不需要打包到镜像的文件剔除，镜像会小很多</li></ul><p>运行容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t setcreed/recruitment-base:v1.0.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互运行</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> -p 8000:8000 --entrypoint /bin/sh setcreed/recruitment-base:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发环境， 开发阶段，指定本地源码目录</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> -p 8000:8000 -v <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>:/data/recruitment --entrypoint /bin/sh</span><br><span class="line">setcreed/recruitment-base:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定加载源码 &amp;&amp; 环境变量</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -p 8000:8000 -v <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>:/data/recruitment --<span class="built_in">env</span> server_params=<span class="string">&quot;--</span></span><br><span class="line"><span class="string">settings=settings.local&quot;</span> setcreed/recruitment-base:v1.0</span><br></pre></td></tr></table></figure><h2 id="容器编排-–-docker-compose"><a href="#容器编排-–-docker-compose" class="headerlink" title="容器编排 – docker compose"></a>容器编排 – docker compose</h2><p>Docker compose 单机编排:</p><ul><li>想要在一台主机上， 一下子跑起来多个容器， 且容器之间有调用关系</li></ul><p>在一个 docker-compose.yml 文件中配置4个容器:</p><ul><li>web: django 的应用， 使用 start.local.bat 来启动</li><li>redis: 缓存，以及 Celery 的broker 要用到的数据存储</li><li>celery: 异步任务 worker （用于异步发送钉钉消息通知）</li><li>flower：异步任务的监控应用 （监控异步任务的执行情况）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/sh</span> <span class="string">/data/recruitment/start.local.bat</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">server_params=--settings=settings.local</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/data/recruitment</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/logs/recruitment/</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">celery</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">flower</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">recruit-redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">  <span class="attr">celery:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;setcreed/recruitment-base:v1.0&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">recruit-celery</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/data/recruitment</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/logs/recruitment/</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;/data/recruitment/worker.start.sh&quot;</span>]</span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">flower:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;setcreed/recruitment-base:v1.0&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">recruit-flower</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5555:5555&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/data/recruitment</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/logs/recruitment/</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;/data/recruitment/flower.start.sh&quot;</span>]</span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p>启动：docker-compse up –d</p><p>停止：docker-compose stop</p><p>删除：docker-compose rm</p><p>docker docker-compose  kubernates的关系</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211202954.png" alt=""></p><h2 id="kubernates的介绍"><a href="#kubernates的介绍" class="headerlink" title="kubernates的介绍"></a>kubernates的介绍</h2><p>k8s 的架构</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211205019.png" alt=""></p><p>k8s的分层架构</p><ul><li>核心层：Kubernetes 最核心的功能，对外提 供 API 构建高层的应用，对内提供插件式应用 执行环境</li><li>应用层： 部署（无状态、有状态应用、job 等） 路由</li><li>管理层： 系统度量（如基础设施、容器和网络的度量） 自动化（如自动扩展、动态 Provision 等） 策略管理（RBAC、Quota、PSP、 NetworkPolicy 等）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211205205.png" alt=""></p><p>核心组件：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211205310.png" alt=""></p><p>k8s 的核心概念：</p><ul><li>声明式管理： 通过 yml 声明期望的状态，k8s 自动根据定义的状态进行调度 （相对命令式管理而言， k8s 也提供命令式管理的方式）<ul><li>声明式： kubectl apply -f  </li><li>命令式： kubectl run xxx ，kubectl expose ..</li></ul></li><li>Master node：集群主控节点，上面运行调度容器，管理容器</li><li>Worker node：工作节点，上面运行应用的容器</li><li>Pods：容器，k8s 对容器进行管理，自动创建、销毁容器</li><li>Service：使用 标签 选择算符（selectors）标识的一组 Pod，在集群内有固定 IP；可以用于为集群 内部容器/应用提供 稳定的访问入口，可以通过 service 名称访问到服务</li><li>Deployment：一套部署的容器集合</li><li>ReplicationController：可以复制的容器，功能集比 ReplicaSet 少，已不推荐使用</li><li>ReplicaSet：可以扩容、缩容的容器副本集，在容器集不需要状态，也不需要被其它容器访问的时候， 可以使用 ReplicaSet。其它容器无法直接访问 RS，可以通过 Service 来访问</li><li>StatefullSet：有状态的服务，比如 zookeeper，集群被外部使用的时候， 需要指定多个 zookeeper 服务的 ip 或者 hostname。由于是有状态的，比如 3 个节点的 zookeeper，不论如何 扩缩容（包括宕机恢复），3个节点容器名称/主机名总是 zk-0, zk-1, zk-2</li><li>Ingress：对外暴露可以访问的入口，为服务提供外网（从集群外）的访问入口</li><li>Namespace：资源可以放在 namespace 下面， 不同 namespace 之间相互隔离</li><li>Controller: 包括有节点控制器 , 路由控制器 , 服务控制器</li></ul><p>创建 k8s 声明式配置</p><p>把 compose 文件转换为 k8s 声明式配置文件。 on mac :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/kubernetes/kompose/releases/download/v1.16.0/k ompose-darwin-amd64 -o kompose</span><br><span class="line"><span class="built_in">chmod</span> +x compose &amp;&amp; sudo <span class="built_in">mv</span> kompose /usr/local/bin/</span><br><span class="line">kompose convert</span><br><span class="line">mkidr k8s</span><br><span class="line"><span class="built_in">mv</span> *.yaml k8s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后安装 应用到 k8s 集群:：</span></span><br><span class="line">kubectl apply -f k8s</span><br></pre></td></tr></table></figure><h2 id="在阿里云上搭建kubernates集群"><a href="#在阿里云上搭建kubernates集群" class="headerlink" title="在阿里云上搭建kubernates集群"></a>在阿里云上搭建kubernates集群</h2><p>K8s 环境创建 &amp; 部署流程：</p><ul><li>创建 Kubernetes 集群， 创建镜像仓库</li><li>配置本地 kubeconfig</li><li>Docker login 到 镜像仓库</li><li>Docker build &amp; docker push 推送镜像到镜像仓库</li><li>K8s 部署到集群： kubectl apply -f k8s</li></ul><p>在阿里云 k8s 控制台， 创建路由（ingress 路由），指向 Django 应用，即可访问</p><h2 id="管理监控容器中的Django应用"><a href="#管理监控容器中的Django应用" class="headerlink" title="管理监控容器中的Django应用"></a>管理监控容器中的Django应用</h2><p>云环境的复杂性：</p><ul><li>应用被分布在了容器上运行，大量容器不断得创建销毁，升级</li><li>应用的可观测性，可见性变得更加重要</li></ul><p>监控方案：</p><ul><li>kubectl 命令行</li><li>可视化监控方案<ul><li>GUI 的 kubernetes dashboard </li><li>云厂商的控制台</li><li>Sentry</li><li>ELK</li><li>Prometheus</li></ul></li></ul><p><a href="https://help.aliyun.com/document_detail/94622.html">https://help.aliyun.com/document_detail/94622.html</a></p><p>阿里云环境：手工安装 ack-prometheus-operator：<a href="https://help.aliyun.com/document_detail/94622.html">https://help.aliyun.com/document_detail/94622.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行以下命令，将集群中的Prometheus映射到本地9090端口</span></span><br><span class="line">kubectl -n monitoring port-forward svc/ack-prometheus-operator-prometheus 9090:9090</span><br><span class="line"></span><br><span class="line"><span class="comment"># Grafana 查看与展示数据聚合, 执行以下命令，将集群中的Grafana映射到本地3000端口。（admin/prom-operator）</span></span><br><span class="line">kubectl -n monitoring port-forward svc/ack-prometheus-operator-grafana 3000:80</span><br></pre></td></tr></table></figure><h2 id="应用日志收集与查询"><a href="#应用日志收集与查询" class="headerlink" title="应用日志收集与查询"></a>应用日志收集与查询</h2><p>云环境的复杂性:</p><ul><li>应用被分布在了容器上运行，大量容器不断得创建销毁，升级</li><li>应用的可观测性，可见性变得更加重要</li></ul><p>日志收集 &amp; 查询的不同方案:</p><ul><li>使用Kubelet收集容器化应用输出到标准输出的日志</li><li>使用 sidecar 收集输出到文件中的日志，输出到标准输出 &amp;&amp; tail –f<ul><li>ELK/EFK 采集日志</li><li>阿里云Logtail 日志采集</li></ul></li></ul><p>k8s 下面的各种日志:</p><ul><li>Pod logs</li><li>Node logs -&gt; 宿主机的 /var/log/containers目录</li><li>K8s components logging (api server ,scheduler …)</li><li>K8s events</li><li>Audit logs</li><li>k8s 默认会将容器的stdout和stderr录入node的/var/log/containers目录下</li><li>而 k8s 组件的日志默认放置在/var/log目录下</li></ul><p>阿里云 logtail 日志采集:</p><ul><li>为集群启用Logtail，确保 logtail-ds 组件已安装</li><li>登陆 SLS， 确保能看到采集的 k8s 系统日志</li><li>在 deployment.yaml 配置中指定 Logtail 相关配置变量</li><li>参考文档：<a href="https://help.aliyun.com/document_detail/87540.html">https://help.aliyun.com/document_detail/87540.html</a></li></ul><p>代码中的调整：</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211214229.png" alt=""></p><ul><li>日志输出到独立的目录中</li><li>Settings 文件中更改日志路径</li><li>通过环境变量来创建您的采集配置和自定义Tag，所有与配置相关的环境变量都 采用aliyun<em>logs</em>作为前缀</li><li>创建采集配置的规则如下：- name: aliyun<em>logs</em>{Logstore名称} value: {日志采集路径}</li><li>签名创建了两个采集配置</li><li>其中 aliyun_logs_recruitment-web 这个env表示创建一个Logstore名字为 recruitment-web，日志采集路径为stdout的配置，从而将容器的标准输出采集 到 recruitment-web 这个Logstore中</li></ul><h1 id="云环境下的持续集成"><a href="#云环境下的持续集成" class="headerlink" title="云环境下的持续集成"></a>云环境下的持续集成</h1><h2 id="CI-CD的工作流程"><a href="#CI-CD的工作流程" class="headerlink" title="CI/CD的工作流程"></a>CI/CD的工作流程</h2><p>CICD 包含如下流程：</p><ul><li>Build &amp; Package</li><li>Test</li><li>Deployment</li></ul><p>需要的服务：</p><ul><li>Git仓库：使用 Github</li><li>Docker 镜像仓库：使用阿里云镜像仓库</li><li>Jenkins：使用阿里云 k8s 上搭建的 jenkins</li><li>K8s: 使用阿里云 k8s</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210211214537.png" alt=""></p><p>CICD 工具：Jenkins、Spinnaker、Harness</p><p>Jenkins pipeline 流水线：</p><ul><li>CICD Pipeline: 包含一系列按照指定顺序执行的脚本</li><li>包含有用来完成任务的多个阶段（stages）</li></ul><p>CD 阶段不同的部署策略：</p><ul><li>Rolling Upgrade: 滚动更新，多个实例，下线一台升级一台，直至升级完</li><li>Blue/Green Deployment: 蓝绿部署，部署到新集群，部署完切流量到新集群</li><li>Canary Deployment：金丝雀部署，过程中新老版本共存，持续做灰度验证</li></ul><h2 id="CI-CD的使用"><a href="#CI-CD的使用" class="headerlink" title="CI/CD的使用"></a>CI/CD的使用</h2><p>如何对 Django Web 应用进行 CICD， 自动化镜像打包，测试，发布，部署</p><ul><li>前提：镜像的构建不依赖于本地的文件</li><li>安全策略：账号密码不保存在代码库中</li><li>账号密码保存到哪里？ 密码如何使用<ul><li>Kubernetes Secrets</li><li>KMS 系统： 如 Vault, 阿里云 KMS 等</li></ul></li></ul><p>使用 Kubernetes Secrets 管理账号密码：</p><p>使用账号密码使用的流程：</p><ul><li>K8s secrets 中管理密码，k8s 配置文件中引用密码，代码中通过环境变量来引用</li></ul><p>什么是 Kubernetes Secrets? <a href="https://kubernetes.io/zh/docs/concepts/configuration/secret/">https://kubernetes.io/zh/docs/concepts/configuration/secret/</a></p><p>如何使用：</p><ul><li>基于文件创建 Secret : kubectl apply -f mysecret.yaml</li><li>基于命令创建：kubectl create secret generic</li><li>在云厂商 k8s 的管理控制台创建 secrets</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret generic prod-db-secret --fromliteral=username=produser --from-literal=password=Y4nys7f11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl get secret prod-db-secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl describe secret prod-db-secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl delete secret prod-db-secret</span><br></pre></td></tr></table></figure><p>阿里云创建密钥:</p><ul><li>创建密钥: 配置管理 – 保密字典</li><li>使用密钥: K8s 文件中 引用 secrets</li><li>Python 代码从环境变量读取配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210212064436.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings/production.py</span></span><br><span class="line"></span><br><span class="line">LDAP_AUTH_URL = os.environ.get(<span class="string">&#x27;LDAPA_AUTH_URL&#x27;</span>, <span class="string">&#x27;ldap://localhost:389&#x27;</span>)</span><br><span class="line">LDAP_AUTH_CONNECTION_USERNAME = os.environ.get(<span class="string">&#x27;LDAP_AUTH_CONNECTION_USERNAME&#x27;</span>)</span><br><span class="line">LDAP_AUTH_CONNECTION_PASSWORD = os.environ.get(<span class="string">&#x27;LDAP_AUTH_CONNECTION_PASSWORD&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># AliCloud access key ID</span></span><br><span class="line">OSS_ACCESS_KEY_ID = os.environ.get(<span class="string">&#x27;OSS_ACCESS_KEY_ID&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># AliCloud access key secret</span></span><br><span class="line">OSS_ACCESS_KEY_SECRET = os.environ.get(<span class="string">&#x27;OSS_ACCESS_KEY_SECRET&#x27;</span>)</span><br></pre></td></tr></table></figure><p>搭建 k8s 中的 Jenkins 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Jenkins DoD 版本 (Docker on Docker），部署到 k8s</span></span><br><span class="line"><span class="built_in">cd</span> Jenkins-dod</span><br><span class="line">docker pull ihopeit/jenkins-dod:1.1</span><br><span class="line">docker tag ihopeit/jenkins-dod:1.1 registry.cnbeijing.aliyuncs.com/ihopeit/jenkins-dod:1.1</span><br><span class="line">docker push registry.cn-beijing.aliyuncs.com/ihopeit/jenkins-dod:1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化完成后，部署到 k8s :</span></span><br><span class="line">kubectl apply -f jenkins-service.yaml</span><br><span class="line">kubectl apply -f jenkins-deployment.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># jenkins 的启动日志里面会自动产生初始化的 admin 密码，可用于登陆</span></span><br></pre></td></tr></table></figure><ul><li>阿里云 K8s 创建 Jenkins 路由（ingress路由）</li><li>访问 Jenkins， 配置 kubeconfig， 配置 阿里云 镜像仓库账号密码</li><li>创建 Jenkins 项目， Pipeline 项目，设置 Pipeline</li><li>Build 项目</li></ul><h1 id="快速迭代开发过程"><a href="#快速迭代开发过程" class="headerlink" title="快速迭代开发过程"></a>快速迭代开发过程</h1><h2 id="快速迭代的价值与挑战"><a href="#快速迭代的价值与挑战" class="headerlink" title="快速迭代的价值与挑战"></a>快速迭代的价值与挑战</h2><p>快速迭代：以天，甚至小时为单位，持续完善产品，交付到用户的循环过程</p><p>快速迭代的价值:</p><ul><li>时间是最大的成本：机会瞬息即逝，赢得市场先机</li><li>快速验证需求，减少不对用户产生价值的投入（Fail fast, fail better）</li><li>快速验证方案，提高研发效率</li><li>加速反馈回路，给到团队和自己即时的激励</li></ul><p>快速迭代的挑战:</p><ul><li>产品设计者：能梳理清楚业务流程，抓住客户的重点需求，能把客户需求转化为系统需求</li><li>开发者：充分理解用户需求;有足够的能力，能用简洁的方案来设计出易维护的系统</li></ul><p>根本挑战:</p><ul><li>市场、用户、技术、环境变化太快，产品开发赶不上节奏</li><li>几乎不能从一开始就设计出一个完美的，能够适应未来长时间变化的方案</li><li>几乎没有人愿意承认，自己没有足够的能力（或条件）设计出一个完美的产品（系统）</li></ul><h2 id="使用-OOPD-方法识别产品核心功能"><a href="#使用-OOPD-方法识别产品核心功能" class="headerlink" title="使用 OOPD 方法识别产品核心功能"></a>使用 OOPD 方法识别产品核心功能</h2><p>OOPD （Online and Offline integrated Product development）产品开发流程</p><p>OOPD 快速迭代的原则:</p><ul><li>自助原则：做自己用的产品，自己用自己的产品，吃自己的狗食</li><li>0day 原则：找到明确的核心问题 拆解目标，抓住核心的问题，忽略掉一切细节，0day 发布</li><li>时限原则：设定时限，挑战自我 不给自己写 Bug 的时间</li><li>不完美原则：不做完美的产品（没有完美的产品，不去为了完美而浪费宝贵的资源）</li><li>谦卑原则：能够看到自己的局限性，获取用户反馈，持续迭代，听取用户声音</li></ul><h2 id="如何做好技术方案设计与工作拆解"><a href="#如何做好技术方案设计与工作拆解" class="headerlink" title="如何做好技术方案设计与工作拆解"></a>如何做好技术方案设计与工作拆解</h2><p>做技术方案设计的前提条件</p><ul><li>有明确的用户场景，用户如何跟产品交互，期望拿到什么样的预期结果</li><li>有清晰定义的业务流程</li></ul><p>技术方案设计流程</p><p><img src="https://cdn.jsdelivr.net/gh/setcreed/CDN@latest/img/20210212074835.png" alt=""></p><p>产出的技术方案设计文档要素:</p><ul><li>产品背景（用户场景，产品目标，引用到的业务流程，产品需求文档）</li><li>要解决的问题列表，系统不解决的问题列表，系统的限制</li><li>对于问题的不同解决方案的对比，阐述各个主要的问题如何被解决</li><li>所选整体的流程图（序列图），模块关系图，重要的接口、实体的概念定义</li><li>除了功能之外的其它方面的设计，包括安全，性能，可维护性，稳定性，监控，扩展性，易用性等</li></ul><p>工作拆解的原则:</p><ul><li>优先级：主流程上，不确定的工作优先完成（建议提前一个迭代做调研）</li><li>核心流程优先：核心工作优先，先把主流程跑通</li><li>依赖：减少不同人之间的工作依赖；并且保持团队工作拆解的透明，预留20% Buffer</li><li>拆解粒度：拆解到每项子任务 0.5-1天的粒度，最长不超过2天</li></ul><h2 id="如何保证交付质量和持续迭代"><a href="#如何保证交付质量和持续迭代" class="headerlink" title="如何保证交付质量和持续迭代"></a>如何保证交付质量和持续迭代</h2><ul><li>定义好清晰产品需求，产品需求从根本上决定了软件的质量</li><li>系统有整体上的架构方案的设计，评估，评审；系统设计决定了软件实现的质量</li><li>工程的角度持续交付的最佳实践推荐<ul><li>Code Review： 每一次提交都有 CR，每次 commit 代码量 &lt; 200 行，频繁commit</li><li>单元测试：项目开始建立好单元测试的机制，在持续集成中自动运行</li><li>自动化回归：对预发/线上系统做 API/页面自动化测试 (Postman/Robot Framework)</li><li>使用 CICD 机制对系统进行自动化的打包、测试、部署、线上验证</li></ul></li><li>发布过程做到可监控，可回滚</li><li>对于大量用户使用的产品，使用灰度机制</li><li>架构上对于意外的并发访问进行限流，降级</li><li>架构上使用配置开关，对系统功能提供实时的开启/关闭的服务</li><li>对产品建立 A/B Test机制，通过数据来快速对比不同版本，不同方案的效果</li><li>自动化所有事情，代码化所有过程：代码化配置，代码化部署流程，代码化基础设施<ul><li>声明式 API，CICD Pipeline, K8S, Helm, Terraform</li></ul></li></ul><p>Hacker</p><p><a href="https://translations.readthedocs.io/en/latest/hacker_howto.html">https://translations.readthedocs.io/en/latest/hacker_howto.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;职位管理系统&quot;&gt;&lt;a href=&quot;#职位管理系统&quot; class=&quot;headerlink&quot; title=&quot;职位管理系统&quot;&gt;&lt;/a&gt;职位管理系统&lt;/h1&gt;&lt;h2 id=&quot;创建一个可以管理职位的后台&quot;&gt;&lt;a href=&quot;#创建一个可以管理职位的后台&quot; class=&quot;he</summary>
      
    
    
    
    <category term="django" scheme="https://setcreed.github.io/categories/django/"/>
    
    
    <category term="django" scheme="https://setcreed.github.io/tags/django/"/>
    
  </entry>
  
</feed>
